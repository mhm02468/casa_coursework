{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7df2e021-7397-47c7-8273-7105f26d7883",
   "metadata": {},
   "source": [
    "# Urban Simulation Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "74b5bee9-a1bf-4db9-a2f4-225e529e3d40",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<jemalloc>: MADV_DONTNEED does not work (memset will be used instead)\n",
      "<jemalloc>: (This is the expected behaviour if you are running under QEMU)\n"
     ]
    }
   ],
   "source": [
    "#import the necessary libraries for gravity models\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import geopandas as gpd\n",
    "import seaborn as sns\n",
    "import folium\n",
    "import statsmodels.api as sm\n",
    "import scipy.stats\n",
    "import numpy as np\n",
    "from math import sqrt\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "# we will import all the necessary libraries for networks (using some of the above ones as well)\n",
    "import networkx as nx\n",
    "from matplotlib.pyplot import cm\n",
    "import json\n",
    "import re\n",
    "from shapely.geometry import Point, LineString #this library is for manipulating geometric objects, and it is what geopandas uses to store geometries\n",
    "from scipy.spatial import distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bcfd11c7-873e-45e9-b12a-8f99d54a1c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up the metric calculations\n",
    "def CalcRSqaured(observed, estimated):\n",
    "    \"\"\"Calculate the r^2 from a series of observed and estimated target values\n",
    "    inputs:\n",
    "    Observed: Series of actual observed values\n",
    "    estimated: Series of predicted values\"\"\"\n",
    "    \n",
    "    r, p = scipy.stats.pearsonr(observed, estimated)\n",
    "    R2 = r **2\n",
    "    \n",
    "    return R2\n",
    "\n",
    "def CalcRMSE(observed, estimated):\n",
    "    \"\"\"Calculate Root Mean Square Error between a series of observed and estimated values\n",
    "    inputs:\n",
    "    Observed: Series of actual observed values\n",
    "    estimated: Series of predicted values\"\"\"\n",
    "    \n",
    "    res = (observed -estimated)**2\n",
    "    RMSE = round(sqrt(res.mean()), 3)\n",
    "    \n",
    "    return RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "602b843f-337e-4ce6-8b84-48a2915093f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c35a16c3-ca4d-47ca-85e9-3855f2e30465",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61474"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a31541c6-5fb4-43b6-a1a2-3f379660e8ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove Battersea Power Station because it has 0 values that will throw errors\n",
    "data.drop(data[(data['station_origin'] == 'Battersea Park') | (data['station_destination'] == 'Battersea Park')].index, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "46bd5745-347e-458f-962b-35e8019eb63c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          station_origin station_destination  population   jobs  distance\n",
      "4985         Blackfriars         Blackfriars        6781  10849       0.0\n",
      "8847        Canary Wharf        Canary Wharf       14632  58772       0.0\n",
      "9444       Cannon Street       Cannon Street        3874   4698       0.0\n",
      "16611  Elephant & Castle   Elephant & Castle        9325   6427       0.0\n",
      "17552             Euston              Euston       17796  16800       0.0\n",
      "17807      Euston Square       Euston Square        4926   8093       0.0\n",
      "18940      Finsbury Park       Finsbury Park       24735   6769       0.0\n",
      "21752    Hackney Central     Hackney Central        3370   2440       0.0\n",
      "21809      Hackney Downs       Hackney Downs         843    835       0.0\n",
      "22242        Hammersmith         Hammersmith       11818  18250       0.0\n",
      "32294          Limehouse           Limehouse        5348   2969       0.0\n",
      "32472   Liverpool Street    Liverpool Street       31473  61122       0.0\n",
      "32755      London Bridge       London Bridge       32597  29930       0.0\n",
      "39328         Paddington          Paddington       23381  20198       0.0\n",
      "44856           Shadwell            Shadwell        6741   7447       0.0\n",
      "45107    Shepherd's Bush     Shepherd's Bush       10511   9890       0.0\n",
      "54895           Victoria            Victoria       37517  33251       0.0\n",
      "56180           Waterloo            Waterloo       67372  23466       0.0\n",
      "-------------------------------------------\n",
      "station_origin             0\n",
      "station_destination        0\n",
      "flows                  17479\n",
      "population                 0\n",
      "jobs                       0\n",
      "distance                  18\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Identify rows with zero values in 'population', 'jobs', or 'distance'; this would also remove battersea park\n",
    "zero_rows = data[(data['population'] <= 0) | (data['jobs'] <= 0) | (data['distance'] <= 0)]\n",
    "\n",
    "# Print the rows with 'station_origin' and 'station_destination'\n",
    "print(zero_rows[['station_origin', 'station_destination','population','jobs','distance']])\n",
    "\n",
    "print('-------------------------------------------')\n",
    "\n",
    "zero_count = (data == 0).sum()\n",
    "print(zero_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0a2dacb2-5689-49b3-9908-c2f5e14febc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove the rows with zero values from the dataset\n",
    "data1 = data[(data['population'] > 0) & (data['jobs'] > 0) & (data['distance'] > 0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "46130526-cfb0-4314-bc44-334da28f8bc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61413"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data1.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39bb8fe4-f61a-4d09-8972-45a1a6457e0a",
   "metadata": {},
   "source": [
    "## Part I"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69691d48-da54-498d-8102-8d78f1fbe890",
   "metadata": {},
   "source": [
    "### Setting up the Network"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a9c5eda-2a76-496a-b8b2-e12de9e692cd",
   "metadata": {},
   "source": [
    "This section using code from Practical 10 to set up the network so we can explore its resiliance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c61c726-3bf6-4ff5-88a4-8bb1163c5760",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Add in the underground station geography\n",
    "stations = gpd.read_file('data/tfl_stations.json')\n",
    "lines = gpd.read_file('data/tfl_lines.json')\n",
    "stations = stations.to_crs(epsg = 27700)\n",
    "lines = lines.to_crs(epsg = 27700)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a562ad41-40d4-4512-98c4-f3cffeeb6a0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#clean station names\n",
    "station_names = {row.id: row['name'] for i, row in stations.iterrows()}\n",
    "for k, v in station_names.items():\n",
    "    if k == 'none':\n",
    "        continue\n",
    "    cleaned_name = re.sub('\\sLU\\s?|\\sLO\\s?|\\sNR\\s?|\\sTf[lL]\\s?|\\sDLR\\s?|\\s\\(.*\\)', '', v)\n",
    "    \n",
    "    #note that bank and monument are enconded as one station in our TFL data, so we will do the same\n",
    "    if cleaned_name in ['Bank', 'Monument']:\n",
    "        cleaned_name = 'Bank and Monument'\n",
    "    station_names[k] = cleaned_name\n",
    "    \n",
    "stations['name'] = stations['id'].apply(lambda x: station_names[x])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2de31d2c-a460-4b15-99df-0e7e44d07465",
   "metadata": {},
   "outputs": [],
   "source": [
    "#get position of stations as mean of x, y of stations\n",
    "\n",
    "#create empty dict to store list of coordinates\n",
    "pos = {}\n",
    "\n",
    "#iterate through the stations\n",
    "for i, station in stations.iterrows():\n",
    "    xy = station.geometry.coords[0]\n",
    "    \n",
    "    #if station already in dict add coordinate to coordinate list\n",
    "    if station['name'] in pos.keys():\n",
    "        pos[station['name']].extend([xy])\n",
    "    #if station is not in the dict add station to dict and set first coordinate in list\n",
    "    else:\n",
    "        pos[station['name']] = [xy]\n",
    "\n",
    "#iterate through our dict and replace coordinate list with mean value\n",
    "for k, v in pos.items():\n",
    "    #we set axis to 0 to make sure to take mean of x and y coordinates\n",
    "    pos[k] = np.mean(v, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f93641d-ec8c-4961-b3a4-d0e6e8953280",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set new geometry\n",
    "stations['geometry'] = stations['name'].apply(lambda x: Point(pos[x]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "129764fc-f8b0-4776-b11e-ab2cfcfac585",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZQAAAFcCAYAAADvfkh5AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAWKUlEQVR4nO3debQedX3H8fePJYTIolaQRcggsrmgFESLqKwqjrJVhOKCQFWkFiu2OHVHBQcrx11xARHQolih4ggHFDioKGClQECRxQkEFwjIHkgI0z9+k/pwyXKT/O6deZ77fp1zz3PvPMv95kDyOd/5baFpGiRJWlmrdF2AJGk0GCiSpCQMFElSEgaKJCkJA0WSlISBIklKwkBRp0IIdQhhj/b794UQvt6DmrYKIVwVQrg/hHDUJP7ek0IIH2y/3yWEMGeyfreUwmpdFyAt0jTN8RP9O0IIbwC+0v64KrAG8NBADWsBxwCXNE2zXfueU4E5TdN8YBmfnQG/Bx5sL80FTmqaphxPbU3THDHuP4jUQ3YomlKapvlW0zRrtcGxF/CHRT+31wBmAtetxK95cvtZrwM+GELYcyXLloaCgaLeCCF8JIRwRvt9FkJoQgiHhBBuDSHMDSG8f+C1q4QQihDCzSGEu0II3w0hPDVBDRcBuwJfCCE8EELYckU/q2maXxGD6QUDn39WCOFPIYR7QwiXhhCeM/DcqSGEj69E+VKnDBT13c7AVsDuwIdCCNu0148C9gVeDmwE/AX44qI3hRCuCSEcvLy/rGma3YCfAu9su5bfrWjhIYQXA88Fbhq4fB6wBbA+8GvgWyv6+VLfOIaivju2aZp5wNUhhKuB5wO/Ad5O/Ed/DsTuBrg1hPCmpmkebZpm284qhrkhhDWA6cCJwDmLnmia5pRF37c1/yWEsG7TNPdOdpFSanYo6rs/DXz/EDA4znF2COGeEMI9xJBZCDx9cstbrKcR6/xXYBdgdYAQwqohhLK9TXcfUA+8Xhp6BoqG1W3AXk3TPHnga3rTNLd3XRhA0zQLm6Y5EXgYOLK9fDCwD7AHsC6QtdfDpBcoTQADRcPqJOC4EMJMgBDCeiGEfSbw960aQpg+8DVtnO8rgWNCCNOBtYFHgLuAGcCET5OWJpOBomH1WeAHwAUhhPuBXwIvWvRkCOG6ds1JKgUwb+DronG+ryJOGHgrcBowG7gduL6tWRoZwQO2JEkp2KFIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpCQNFkpSEgSJJSsJAkSQlYaBIkpIwUCRJSRgokqQkDBRJUhIGiiQpidW6LkCSND5ZUa0HZEBdl/mdHZfzBHYokjQEsqI6CJgNXAjMbn/uldA0Tdc1SJKWou1MZgNrDlyeB8zsU6dihyJJ/ZcB88dcm99e7w0DRZL6rwamj7k2rb3eGwaKJPVce1vrJqAB7iXe7jqsT7e7wDEUSeq9rKg2A24BjgfOoaezvJw2LEn997r28Wt1mdddFrI03vKSpP57JXBNn8MEDBRJ6rWsqFYBdgR+1nUty2KgSFK/bQqsDVzddSHLYqBIUr9t2T7e0GkV42CgSFK/PbN9vKXTKsbBQJGkftsMWADc3nUhy2KgSFK/PRu4sS7zx7ouZFkMFEnqqXaG14uBK7uuZTwMFEnqrx2BpwE/6bqQ8TBQJKm/DiPu23Vu14WMh4EiST2UFdUmwJuBM+oyv6fjcsbFQJGknsmKKgCfIe4ufFy31Yyfm0NKUv+8DdgfKOoyn911MeNlhyJJPZIVVQ58ATgf+I+Oy1kuBook9URWVAcCZwPXAAcOw9qTQd7ykqSOZUW1JvAx4D3EXYVfW5f5fd1WtfwMFElKJCuq9YCMcZ6o2C5c3A8ogWcBXwKOrsv8kYmsc6J4BLAkraCsqNYCNgTWBfYC3gfMB1Ynnvl+5mLeswrwPCAnTgveCvgt8M66zIdiAeOSGCiSNA5ZUc0AXtp+7QBsSwyTpZkFzAEeAtYANiAGyFrt85cRu5Lv1GX+6ASUPakMFElagqyo1iDeknoDsCcxFBYSg+JqYmcxB1gP+CjwpIG3zweuAKYDa7Y/3wHcSNyb68d1mf9hUv4gk8RAkaQxsqKaDhwBvJfYVdwGfJ84lfendZk/OOb16wGzicGxyDxg5njGUkaFgSJJA7Ki2h34CrA5cDFwAnDhsqbwZkV1EHAKsROZxhLGUEaZgSJJQFZU6xAXEr4NuAk4si7zC5fzM5ZrlteoMVAkTXlZUe1F7Eo2Bk4EPlyX+bxuqxo+rkORNGVlRfVU4NPE6bu/AXaqy/zybqsaXm69ImlKyopqf+B64GDg48B2hsnKsUORNKVkRbU+cfPFA4CrgFfWZX51t1WNBgNF0pTQnjFyEPA5YB3iqvZP1WW+oNPCRoiBImnkZUW1AXHQfW/gcuKU3uu7rWr0GCiSRlbblRwOfJK46PA9wGfrMl/YaWEjykCRNJKyotoM+DqwG3Ap8La6zG/otqrRZqBIGilZUa0KvBM4nrjv1tuBr9Vl7qK7CWagSBoZWVFtQ+xKdgJ+BBxRl/lt3VY1dRgokoZeVlSrAUcTd/x9EDgEON2uZHIZKJKGWlZUzwa+AexI3BH4yLrM/9xtVVOTgSJpKLVjJe8mrnJ/ADgQOMuupDsGiqShkxXVs4BTgZcA5xDHSuxKOmagSBoa7Xns7yCuK1lA3NTxDLuSfjBQJA2FrKgy4gFWuwIXAIfXZT6n06L0OAaKpF4bWO3+aaAB3gqcbFfSPwaKpN7KimpD4GtATjyO99C6zGd3W5WWxPNQJPVSe0b7dcDuwFHAHoZJv9mhSOqVrKj+BvgS8HrizsCHuAfXcLBDkdQbWVHlwCxgP+D9wM6GyfCwQ5HUmayo1gMyYC4xQA4HrgVe5SmKw8dAkdSJdozkFOAxYEZ7uQQ+Upf5I50VphUWmsaZd5ImV9uZzCYeerXII8AmdZnf2U1VWlmOoUjqwn7AGmOuPUy8/aUh5S0vSZMmK6o1geOAf1nM09OAejLrUVp2KJImRVZULwR+Tdwh+CTgUGAecG/7eJi3u4abYyiSJlRWVNOADwDvA/5IDI4L2+cWzfKqDZPhZ6BImjBZUT0XOA3Yrn18V13m93RalCaMYyiSkmsPvzqaePjVvcB+dZmf02lRmnAGiqSksqLaHPgm8fCrs4mHX93RbVWaDAaKpCTabeaPAD6Fh19NSQaKpJWWFdUziKve98TDr6YsA0XSCmu7kjcCnwdWJx7P+xW7kqnJQJG0QtopvycB+wM/J24zf3O3ValLLmyUtNyyotqXePjVa4BjgJcbJrJDkbRMAwsQ7wA+TFzlfhWwW13mszosTT1ioEhaqoFt5hcCT2ovHwccW5f5gs4KU++4Ul7SErnNvJaHYyiSluYg3GZe4+QtL0lPkBXV1sAJwN7A2NsYbjOvxTJQJP2/rKieRdwZ+E3Ag8C/A3OArwLziWHiNvNaLMdQJJEV1WbAB4nbpSwAvgSUi4LDbeY1HgaKNIVlRZURO5JDiLO4TgJOqMv8j13WpeFkoEhTUFZUmwLvBw4jBslXiUFye6eFaag5hiKNuMHbVcAM4smJh7ZPfxX4hBs5KgUDRRphA4sSFxDDJBA7kpOJQXJrh+VpxHjLSxpRbWdyKzB94PKjwPZ1mV/TTVUaZS5slEZQVlRbEG9nTR/z1IM8caGilIS3vKQR0Z7jvifwVmA/4rqRR3n833MXJWrCGCjSkGu7kbcQp/5uDNwFlMDngF2IYyguStSEcwxFGjJZUa0O7EDsRvYGtgceA84HvgGcW5f5IwOvd1GiJoWBIvVYextrc+D5wAuAHYG/I24j3wBXAN8Dvl2X+R86KlMCDBSpN7KimgZsBWxL7DpeRAyRGe1LFgLXEo/bvQS4pC7zuZNeqLQEBoo0ybKiCsAmwPOIncdz28ct+eu45sPEExGvAK4Brgauq8v84UkvWBonA0VaAeMZl8iKajVgJrAFsDWwDfAcYpCsM/DSW4mBMYvYgVwL3OBpiBo2Boq0nAZWny+aOfVu4AZicGxJvG21JXHsY3Am5V+A64iBcU37eG1d5vdNWvHSBDJQpOXQ7s77W5a8OHA+cCPwO2LI3Ajc1L7nzrrM/QunkeU6FGkpsqJaC9iZuJ7jZcRZVquOedk84N+ACritLvOFk1mj1Bd2KJrSxo6FZEW1DjFAXt5+7UAMkAXAr4iD5Efw+A5lHjDTNR6a6gwUTVkDYyGPEQNiNjFcFgXIFcClwMXAZXWZPzjmfYOrz8+c7PqlvjFQNHKWNgMrK6qnAC8FXgm8g7id+yKPAZ8BfgT8oi7zh1bkd0hTlYGikbKY7uFY4M/EW1cvIa73CMQOJPD4ccR7gT3rMr9yMmuWRoWD8hp67ULBDYiD5qcBqwNrtk+X7eODwOXAh4mrzH9PnInlTrxSIgaKhk4bIM8DdicOnL8YePoSXv4QcRfes8fOvsqK6jDciVdKxlteGgpZUa1CnH11ELAPsFH71E3AZcD/ELuLM/lrdwLLmIHlWIiUjoGiXsuKalNih3EosBmx4zgf+CHw47rMbxvzemdgSR0xUNQ7WVHNAPYlHhq1B3Hw/CLiWR9nL5q+u5T323VIHTBQ1JnBf/iBucRzPg4FDgTWJq4LORU4tS7zuosaJY2fg/LqxMCtqQXEMY+5wIbE2VjfIwbJpXWZP9ZVjZKWjx2KJl1WVBsDtxDHOBZ5jLhr7yl1mT/QSWGSVoodiiZNVlSbAe8i3taaNubp+4mr0w0TaUgZKJpwWVFtDXyIODaykDhD69U8foNFFxVKQ26VrgvQ6MqKapOsqL5BPFRqb+BEYLO6zPcnzuCaR9zuZB4uKpSGnmMoSi4rqicBxxDPCFkF+CJQLmajRqf3SiPEQFEy7Wr2NwKfIK5k/w7w3rrMZ3damKRJ4RiKVlq7t9auwAnEXX2vAA6oy/yyTguTNKkMFC2XMYsR7wb2Awpge+B24E3At10/Ik09BorGbTGLEe8m7vJ7E/B24PS6zOd1V6GkLjmGonHJimoTYnCMXYz4j8BpY7eGlzT12KHoCdrB9U2B5wDbEs8b2YPFL0acZZhIAgNlSlncNN2sqFYDtiOGxnbEANkGmDHw1huBs4hnkbgYUdJiectrihhzTsgawLeA9Ymzs9ZqX3YHcA0wC/gtcUHirLrM71nMZ3jWiKTHMVCmgLYzuRWYPuap2cB5xDPWLwPm1GW+1P8hXIwoaUkMlBHVrg3ZHvh74A3AJmNecj+we13mV052bZJGk2MoI6QdD9mJuDZkP2AmcTPGnxGn9w4Oqq+G4x+SEjJQhtCYxYX3EWdgHUDcgPEpxDGOC4Fjgf+uy/zuJYx/eMtKUjLe8hoyA8HwGHFMZD5xkeE9wLnAD4AL6jK/bzHvdfxD0oQxUIZIVlTbEGdhDXaWC4kbMn6/LvP5nRQmSXjLayi0YyPvAj7KE/+bPQDcbJhI6poHbPVcVlTPJA6qf6p9fHjMS1xcKKkXDJQey4pqV+BXwNbAPwCvIp7H7kmHknrHMZQeyopqI+B44M3EFeuvqcv8loHnHVyX1DsGSs+0s7hOA1YnDrgfXpf5N7utSpKWzUDpkbbzuI3Hb8A4D5hpJyKp7xxD6ZcMWHXMtfntdUnqNQOlX57KE6cFO4tL0lBwHUpPZEU1A/gccBfxLBK3SJE0VAyU/vgEsCWwO3AtzuKSNGQclO+Bdr3JRcDn6zI/qut6JGlFOIbSsXbNyenA74Ci43IkaYV5y6tDWVGtBfwQWJe4ePGhjkuSpBVmoHQkK6pVgTOBbYHX1mX+v91WJEkrx0DpQFZUqwMnATlwZF3m53VckiStNMdQJlm7Gv7LwGHAx+oy/3LHJUlSEnYokygrqh2A/wLWA15fl/lZHZckScnYoUySrKgOAX7e/vhSw0TSqLFDmWBZUa1BXLT4buAnwEF1mc/ttipJSs9AmSBZUQXgtcAnga2ALwBH12W+oNPCJGmCGCgJtQPu2wF7AvsAWwA3Aq92JpekUefWKyuhXeX+OuAVwAuB9dunFgCXAGcA/2lXImkqMFCWU3sraxfgn4B9ieeX3Aj8jLip47XAL+syf6CjEiWpEwbKOGVFtSFwAHAEsA1wN3AycHJd5jd0WZsk9YFjKEuQFdVTgJcRu5Fdgee3T10JvAX4bl3m8zopTpJ6yA6l1d7K2oHYhewG/C0QgIeBXwAXAD+sy3xWZ0VKUo8ZKEBWVC8EPg+8iDig/kvimpGLgcvrMn+kw/IkaShM2Vte7QaNrwL+mTjN9w7gSOKsrHs6LE2ShtKU6FDareLXATYEdiYGyR7A2sCfiGe5f7Eu8/s6K1KShtxIBEpWVKsAM4GNiWexbwY8s722UXttDrB5+5Y5wHnAucD5rhORpJU3dIHSdhsbA88ANgF2BA4GNhjz0j8Cvx94vBW4C7gauL4u8+H6g0tSzw3NGEpWVDOB44mLCWcMPPUoUAE/AmYTg6N2Sq8kTa6h6FDas9evIW5tcjpwFfG21W3AzZ7FLkndG5YO5SDiuMjudZlf1HUxkqQnGpYDtl5BvJV1cdeFSJIWr9cdSrsdfAbsBFzmQLok9VdvAyUrqoOAU4iD7msD93RakCRpqXo5KN92JrOBNQcuPwxsWpf5nd1UJUlamr6OoWTA/DHXHmmvS5J6qK+BUgPTxlyb1l6XJPVQLwOlva11GDAPuLd9PMzbXZLUX70cQ1lkYJZXbZhIUr/1OlAkScOjl7e8JEnDx0CRJCVhoEiSkjBQJElJGCiSpCQMFElSEgaKJCkJA0WSlISBIklKwkCRJCVhoEiSkjBQJElJGCiSpCQMFElSEgaKJCkJA0WSlISBIklKwkCRJCXxf5iu/FUaGxjUAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#get all line types as a list and subset geoms by lines\n",
    "line_names  = lines.lines.apply(lambda x: [x['name'] for x in json.loads(x)] )\n",
    "line_names = list(set([item for sublist in line_names for item in sublist]))\n",
    "\n",
    "# check the data for each line\n",
    "for line in line_names:\n",
    "    #I'm removing thameslink 6tph line because there are not corresponding stations in station file\n",
    "    if line == 'Thameslink 6tph line':\n",
    "        continue\n",
    "    fig, ax = plt.subplots(figsize = (7,7))\n",
    "    fig.suptitle(f'line: {line}')\n",
    "    ax.set_aspect(\"equal\")\n",
    "    ax.axis('off')\n",
    "    ax.margins(0.1)\n",
    "    temp_lines = lines[lines.lines.str.contains(line)]\n",
    "    base = temp_lines.plot(ax=ax)\n",
    "    temp_stations = stations[stations.lines.str.contains(line)]\n",
    "    temp_stations.plot(ax=base, markersize=20)\n",
    "    plt.show()\n",
    "    \n",
    "#We can see that east london line is incomplete\n",
    "#digging into this however we notice that it's because east london is actually part of the overground\n",
    "#merge East London line and London Overground since they are one line\n",
    "lines.lines = lines.lines.str.replace('East London', 'London Overground')\n",
    "stations.lines = stations.lines.str.replace('East London', 'London Overground')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d35dd6e-4f32-4aed-9758-ce54e6348950",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Our TFL data doesn't include tramlink, emirates air lines, and crossrail is still in construction\n",
    "#exclude the lines that we are not going to use\n",
    "excluded_lines = ['Thameslink 6tph line', 'East London', 'Crossrail 2', 'Emirates Air Line', 'Crossrail', 'Tramlink']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a06fdf29-7f05-4dc3-a990-091f46b586bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hammersmith & City\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Bakerloo\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Northern\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Jubilee\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "TfL Rail\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Metropolitan\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Central\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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JCQkhNTUVIqKisjIyOCee+6hoqLC8otVL9532draypYtW8jMzGT06NFa1CJ+T8En37V6Ne4nn8TW0UGnzcb/HT+eU3fffcmnmKaJYRjfWTwxe/Zsn73oXXwljcfjISQkhBEjRlxx/urs2bP87ne/w+PxMHnyZObNm+eTuq6W0+nkyJEj7N27lz179rB3716ioqLIz8+npaWFUaNG0draCtBztmVZWVnPlU9Wh51IoFDwyXf9teMzPR6MkBA8+/ZxzO2mtraW4cOH94Sdx+OhtrYWoNeG267Vtm3b2LJlC/fddx9jx47t1e995swZtm/fzuHDhykuLubDDz9k5MiRTJ48uee/9PR0ysvLSU5Oxu12s3XrVgzDIC8vT3sXRXxEwSeXdw1zfP5s06ZN7Ny5k4EDB7Jy5UqfzfO53W727dtHZWUlX375JYcOHWLXrl1MmTKFGTNm0NXVxZQpU7jrrrt88v1F5Oop+CSgOZ1Onn76aSIjI4mPj2fFihVe+br19fW8//77nDlzhpMnT+J0Ohk1ahSlpaWkp6fj8XhYuHAhmZmZPXvicnJy1MWJ+AGd3CIBzeFw0NzcTGRk5A1tpocLXd2mTZt47733aG9vJzU1FcMwSE1N5ezZs6Snp/PLX/4SgNLS0p5TaxwOB7NmzbrhxyIi3qHgk4DXvZ/swIEDTJ069Zr+X6fTyUcffURhYSEVFRXExsaSkJDAihUrKCwsJDY2lltuuYWCggJycnJ65jh1MLOI/9JQpwS81NRU/v7v/57ly5dfcrLJ93G73bzxxhts27aNpKQkDMOgf//+dHZ2kp6ezpIlS3xctYj4ijo+CQrx8fFXfZLMp59+yhtvvIHL5eK222675IzLjRs3cs899/i4WhHxJXV8EvD+4R/+gSFDhjBp0qTv3cv35Zdf8pvf/AbTNMnIyGDatGmMHDlS++dEAow6Pglobre751SZysrKy358w4YNvPTSS0RGRjJmzBjuu+8+GhoatApTJEAp+CSglZaW0r9/f4BLurbm5mZef/11XnnlFQYPHsyTTz7JwoULqaqqUocnEuA01CkBze1289xzz+F2u3E6nZw7d45BgwbhcrkoLy/nySefZMqUKd854FpEAleI1QWI+JLNZuMnP/kJ4eHhTJw4kaioKGw2G/369WPChAncfvvtCj2RIKOOT4KG0+nkww8/5Ouvv2bAgAE88sgjDB482OqyRKSXKfhERCSoaKhTRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCioJPRESCyv8DY8lxsNMmXZMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "District\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "DLR\n"
     ]
    },
    {
     "data": {
      "image/png": "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msLv5Zdf5vDhwwBEREQwePBgUnfvJn7VKmy33KJNrUXaCQWfyDEul4v33nuPvLw8LMuiX0EBtx63mbVOdBBpH7RlmcgxTqeT6dOnk5ubS2lpKf0++wxoOtHBAjzz5mFT8IkEPAWfyHHsdjsZGRlkZGTgamiAlSu9JzpsTEvjYm1sLRLwFHwip+C87jpYupQDL77I0i5d2NXQQFheHuk60kgkoGkBu8jpZGXRddEijmRmYlkWu3bt0mJ3kQCn4BM5A7vdztixYwFYu3Yty5YtU/iJBDAFn0gLJCcnM3LkSAC++uorPvnkE4WfSIBS8Im0gN1u54orrvCG3+rVq/n0008VfiIBSMEn0kLN4Zeamgo0hV9ubq6PqxKRs6XgEzkLdrudG264ga5du2JZFqtWrdKZfiIBRsEncpacTieXX345AOXl5axYscLHFYnI2VDwiZyD1NRUBg4ciMfjweFw+LocETkLCj6Rc2C325kyZQo2m4218+bh/tOfID/f12WJSAtok2qR87Di1VcZcf/92AwDu8OBsX49JCf7uiwROQ21+ETOwyjTxGazEeJyYXk8sHKlr0sSkTPQXp0i5yFkwgSskBA8NhuGzQaZmb4uSUTOQF2dIucrP7+ppZeZqW5OkQCg4BMRkaCiMT4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkqCj4REQkq/x97amRtvMkRGQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Piccadilly\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Victoria\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Circle\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "Waterloo & City\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "London Overground\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "#create an empty dict to hold our geometric graphs\n",
    "geometric_graphs = {}\n",
    "\n",
    "#iterate through each line individually\n",
    "for line_name in line_names:\n",
    "    #skip lines that we won't be using\n",
    "    if line_name in excluded_lines :\n",
    "        continue\n",
    "    print(line_name)\n",
    "    \n",
    "    #subset our line and station files for the ones the belong to a specific line\n",
    "    temp_lines = lines[lines.lines.str.contains(line_name)]\n",
    "    temp_stations = stations[stations.lines.str.contains(line_name)]\n",
    "    \n",
    "    #create empty graph\n",
    "    G= nx.Graph()\n",
    "    \n",
    "    #iterate through our line geometries\n",
    "    for i, line in temp_lines.iterrows():\n",
    "        #get list of coordinates that define our line\n",
    "        _l = list(line.geometry.coords)\n",
    "\n",
    "        #add coordinates as edges\n",
    "        G.add_edges_from(list(zip(_l,_l[1:])))\n",
    "    \n",
    "    #remove any self loops\n",
    "    G.remove_edges_from(nx.selfloop_edges(G))\n",
    "    \n",
    "    #the position of the node is the name of the node\n",
    "    #let's extract this to plot our graph\n",
    "    pos = {n: n for n in G.nodes()}\n",
    "    \n",
    "    # get degree one nodes\n",
    "    D = nx.degree(G)\n",
    "    k1 = [node for node,degree in D if degree==1]\n",
    "    #let's plot our graph and all degree one nodes\n",
    "    nx.draw(G, pos=pos, node_size=0.5, node_color='grey')\n",
    "    nx.draw_networkx_nodes(G, pos=pos, nodelist=k1, node_color='red', node_size=8)\n",
    "    plt.show()\n",
    "    \n",
    "    #get distance between all points of 1-degree, this will be a matrix\n",
    "    dist = distance.cdist(k1, k1)\n",
    "    \n",
    "    #add edges between points that are close\n",
    "    for j in range(dist.shape[0]-1):\n",
    "        temp = dist[j][j+1:]\n",
    "        #get index of closest node\n",
    "        i_min = np.argmin(temp)\n",
    "        if dist[j][i_min+j+1]<50:\n",
    "            G.add_edge(k1[j],k1[i_min+j+1])\n",
    "    \n",
    "    #recalculate degree\n",
    "    D = nx.degree(G)\n",
    "    k1 = [node for node,degree in D if degree==1]\n",
    "    #plot new graph\n",
    "    nx.draw(G, pos=pos, node_size=0.5, node_color='grey')\n",
    "    nx.draw_networkx_nodes(G, pos=pos, nodelist=k1, node_color='red', node_size=8)\n",
    "    plt.show()\n",
    "    print(nx.number_connected_components(G))\n",
    "    #store graph in dictionary\n",
    "    geometric_graphs[line_name] = G\n",
    "\n",
    "#create a dataframe with all geometries from all valid lines\n",
    "#this list will contain a dictionary for each edge in our graph that contains\n",
    "# node pairs, line name, and a geometry (this is just for quick visualization purposes and will be replaced by true geometry)\n",
    "edge_list = []\n",
    "def _has_ids(k):\n",
    "    #helper function to check if line contains id of start and end station\n",
    "    if ('start_sid' in k.keys()) and ('end_sid' in k.keys()):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "\n",
    "#iterate through each line seperately \n",
    "for line_name in line_names:\n",
    "    if line_name in excluded_lines :\n",
    "        continue\n",
    "        \n",
    "    #subset lines and stations\n",
    "    temp_lines = lines[lines.lines.str.contains(line_name)]\n",
    "    temp_stations = stations[stations.lines.str.contains(line_name)]\n",
    "    \n",
    "    #for each line in our subset dataframe get each origin and destination pair\n",
    "    for i, line in temp_lines.iterrows():\n",
    "        for k in json.loads(line.lines):\n",
    "            if k['name'] == line_name:\n",
    "                if _has_ids(k):\n",
    "                    #get start and end station ids\n",
    "                    start_id = k['start_sid']\n",
    "                    end_id = k['end_sid']\n",
    "\n",
    "                    #get info of start and end station\n",
    "                    start_station = temp_stations[(temp_stations.id == start_id) | (temp_stations.altmodeid == start_id)].values\n",
    "                    end_station = temp_stations[(temp_stations.id == end_id) | (temp_stations.altmodeid == end_id)].values\n",
    "                    \n",
    "                    #if no matching station exist, let's just take the starting and ending coordinate of the line for now\n",
    "                    if len(start_station) >= 1 and len(end_station) >=1:\n",
    "                        s_geom = start_station[0][-1].coords[0]\n",
    "                        e_geom = end_station[0][-1].coords[0]\n",
    "                        edge_list.append({\n",
    "                            'line_name': line_name,\n",
    "                            'start_id': start_id,\n",
    "                            'end_id': end_id,\n",
    "                            'geometry': LineString([s_geom, e_geom])\n",
    "                        })\n",
    "\n",
    "#turn our dictionary list into a geopandas df to quickly plot and sanity check our work\n",
    "edge_gdf = gpd.GeoDataFrame(edge_list)\n",
    "edge_gdf.crs = lines.crs\n",
    "\n",
    "for line_name in line_names:\n",
    "    if line_name in excluded_lines :\n",
    "        continue\n",
    "    temp_lines = edge_gdf[edge_gdf.line_name == line_name]\n",
    "    temp_stations = stations[stations.lines.str.contains(line_name)]\n",
    "    \n",
    "#     #let's plot our lines so we can check them\n",
    "#     fig, ax = plt.subplots(figsize = (7,7))\n",
    "#     fig.suptitle(f'line: {line_name}')\n",
    "#     ax.set_aspect(\"equal\")\n",
    "#     ax.axis('off')\n",
    "#     ax.margins(0.1)\n",
    "    \n",
    "#     base = temp_lines.plot(ax=ax, color='grey')\n",
    "#     temp_stations.plot(ax=base, markersize=20, color='red')\n",
    "#     plt.show()\n",
    "    \n",
    "    #add real geometry back\n",
    "    for i, edge in temp_lines.iterrows():\n",
    "        #get start and end of line coordinates\n",
    "        start = edge.geometry.coords[0]\n",
    "        end = edge.geometry.coords[-1]\n",
    "        \n",
    "        #let's get all the coordinates in our geometric graph\n",
    "        nodes = list(geometric_graphs[line_name].nodes)\n",
    "        \n",
    "        #find nearest node in graph to origin and destination\n",
    "        s_dist = distance.cdist([start], nodes)[0]\n",
    "        s_i = np.argmin(s_dist)\n",
    "        source= nodes[s_i]\n",
    "        \n",
    "        t_dist = distance.cdist([end], nodes)[0]\n",
    "        t_i = np.argmin(t_dist)\n",
    "        target= nodes[t_i]\n",
    "        \n",
    "        #get shortest path\n",
    "        sp = nx.shortest_path(geometric_graphs[line_name], source, target)\n",
    "        \n",
    "        #make into geometry\n",
    "        #notice how I'm also adding the start and end coordinates to the line definition\n",
    "        #this fixes the problem of stations and lines not matching up\n",
    "        geometry = LineString([start] + sp + [end])\n",
    "        edge_gdf.loc[i, 'geometry'] = geometry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7eb654e-3985-4c33-b27b-9b203b22d873",
   "metadata": {},
   "outputs": [],
   "source": [
    "edge_gdf['length'] = edge_gdf.geometry.length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc6a0540-7d78-4faf-98bc-517c96e10a70",
   "metadata": {},
   "outputs": [],
   "source": [
    "#let's replace the ids with the actual nane\n",
    "#get all station names\n",
    "station_names_2 = {row.altmodeid: row['name'] for i, row in stations.iterrows() if row.altmodeid != None}\n",
    "station_names.update(station_names_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a50cf0e5-b96d-4f3f-8b29-84d8525597a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "edge_gdf['start_id'] = edge_gdf['start_id'].apply(lambda x: station_names[x])\n",
    "edge_gdf['end_id'] = edge_gdf['end_id'].apply(lambda x: station_names[x])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9698087c-082b-426b-9802-1a052800b053",
   "metadata": {},
   "source": [
    "#### Creating the Graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01ac66c5-ef48-47db-aecd-8923d03e30d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# THIS IS CREATING THE GRAPH BASED ON THE CLEANING ABOVE SO WE CAN USE IT WITH NETWORKX\n",
    "\n",
    "G = nx.from_pandas_edgelist(edge_gdf, source = 'start_id', target='end_id', edge_attr=['length', 'line_name'])\n",
    "#save position to graph\n",
    "nx.set_node_attributes(G, pos, 'coords')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c909082-30c2-4a56-838f-e6470fb262a1",
   "metadata": {},
   "source": [
    "#### Merge the Assignment Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c99ec4af-bfa0-48a8-b923-f9c0e3deb979",
   "metadata": {},
   "source": [
    "Below is using the code from Practical 10 but, instead of the actual TfL flow data, we are using the simplified data for the assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e21b5a1-d4d2-47c2-90a1-7fa1af8507b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#check that our OD data and network data match\n",
    "OD_names = set(data.station_origin.unique())\n",
    "network_names = set([n for n in G.nodes()]) # checks the network name, convert them to sets because if there is something in or but not dest, it will tell us"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79c14213-a5a8-44cd-9068-8335e660d09d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Battersea Park', 'Battersea Power Station', 'Nine Elms'}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "network_names.symmetric_difference(OD_names)\n",
    "# Battersea power station and Nine Elms data doesn't exist in our TFL data \n",
    "# because the station wasn't opened when the data was collected. This was an\n",
    "# extension of Northern line that opened recently."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0123038-07af-4dae-b959-f77600dfe2dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#let's filter out the stations that we don't have in our network\n",
    "OD_names = set(data.station_origin.unique())\n",
    "_filter = list(network_names.symmetric_difference(OD_names))\n",
    "data = data[~data.station_origin.isin(_filter)]\n",
    "data = data[~data.station_destination.isin(_filter)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4228b2a6-eb99-41bd-b8a1-920ff600128f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create a dictionary to store flows for all edges\n",
    "flows = {(u,v): 0 for u,v in G.edges()}\n",
    "\n",
    "# the u,v : 0 means we have two edges and the flows are 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85c87bde-4e37-4834-a040-4021e5226b22",
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate shortest paths for all flows and add data to dict\n",
    "for i, row in data.iterrows():\n",
    "    source = row.station_origin\n",
    "    target = row.station_destination\n",
    "    \n",
    "    #get shortest path\n",
    "    path = nx.dijkstra_path(G, source, target)\n",
    "    \n",
    "    #our path is a list of nodes, we need to turn this to a list of edges\n",
    "    path_edges = list(zip(path,path[1:])) # offsets things by 1\n",
    "    \n",
    "    #add flows to our dict\n",
    "    for u,v in path_edges:\n",
    "        try:\n",
    "            flows[(u,v)] += row.flows # u,v are edge keys\n",
    "        except:\n",
    "            flows[(v,u)] += row.flows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9133d7c6-71c7-43d0-8dae-de9daae2febd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set this as a network attribute\n",
    "nx.set_edge_attributes(G, flows, 'flows')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5721f29-5271-4411-90a6-3886f65b51d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(('Wembley Park', 'Finchley Road'),\n",
       " {'length': 7266.373927496304, 'line_name': 'Metropolitan', 'flows': 55215})"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(dict(G.edges).items(), key=lambda x: x[1]['length'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02f314d0-4730-4249-aaef-056cfa9d38bd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Aldgate East', {}),\n",
       " ('Liverpool Street', {}),\n",
       " ('Whitechapel', {}),\n",
       " ('Stepney Green', {}),\n",
       " ('Mile End', {}),\n",
       " ('Bow Road', {}),\n",
       " ('Bromley-by-Bow', {}),\n",
       " ('West Ham', {}),\n",
       " ('Plaistow', {}),\n",
       " ('Upton Park', {}),\n",
       " ('East Ham', {}),\n",
       " ('Barking', {}),\n",
       " ('Baker Street', {}),\n",
       " ('Great Portland Street', {}),\n",
       " ('Euston Square', {}),\n",
       " (\"King's Cross St. Pancras\", {}),\n",
       " ('Farringdon', {}),\n",
       " ('Barbican', {}),\n",
       " ('Moorgate', {}),\n",
       " ('Edgware Road', {}),\n",
       " ('Hammersmith', {}),\n",
       " ('Goldhawk Road', {}),\n",
       " (\"Shepherd's Bush Market\", {}),\n",
       " ('Wood Lane', {}),\n",
       " ('Latimer Road', {}),\n",
       " ('Ladbroke Grove', {}),\n",
       " ('Westbourne Park', {}),\n",
       " ('Royal Oak', {}),\n",
       " ('Paddington', {}),\n",
       " ('Harrow & Wealdstone', {}),\n",
       " ('Kenton', {}),\n",
       " ('South Kenton', {}),\n",
       " ('North Wembley', {}),\n",
       " ('Wembley Central', {}),\n",
       " ('Stonebridge Park', {}),\n",
       " ('Harlesden', {}),\n",
       " ('Willesden Junction', {}),\n",
       " ('Kensal Green', {}),\n",
       " (\"Queen's Park\", {}),\n",
       " ('Kilburn Park', {}),\n",
       " ('Maida Vale', {}),\n",
       " ('Warwick Avenue', {}),\n",
       " ('Marylebone', {}),\n",
       " (\"Regent's Park\", {}),\n",
       " ('Oxford Circus', {}),\n",
       " ('Piccadilly Circus', {}),\n",
       " ('Charing Cross', {}),\n",
       " ('Embankment', {}),\n",
       " ('Waterloo', {}),\n",
       " ('Lambeth North', {}),\n",
       " ('Elephant & Castle', {}),\n",
       " ('Edgware', {}),\n",
       " ('Burnt Oak', {}),\n",
       " ('Colindale', {}),\n",
       " ('Hendon Central', {}),\n",
       " ('Brent Cross', {}),\n",
       " ('Golders Green', {}),\n",
       " ('Hampstead', {}),\n",
       " ('Belsize Park', {}),\n",
       " ('Chalk Farm', {}),\n",
       " ('Camden Town', {}),\n",
       " ('Euston', {}),\n",
       " ('Angel', {}),\n",
       " ('Old Street', {}),\n",
       " ('Bank and Monument', {}),\n",
       " ('London Bridge', {}),\n",
       " ('Borough', {}),\n",
       " ('Kennington', {}),\n",
       " ('Oval', {}),\n",
       " ('Stockwell', {}),\n",
       " ('Clapham North', {}),\n",
       " ('Clapham Common', {}),\n",
       " ('Clapham South', {}),\n",
       " ('Balham', {}),\n",
       " ('Tooting Bec', {}),\n",
       " ('Tooting Broadway', {}),\n",
       " ('Colliers Wood', {}),\n",
       " ('South Wimbledon', {}),\n",
       " ('Morden', {}),\n",
       " ('Finchley Central', {}),\n",
       " ('Mill Hill East', {}),\n",
       " ('High Barnet', {}),\n",
       " ('Totteridge & Whetstone', {}),\n",
       " ('Woodside Park', {}),\n",
       " ('West Finchley', {}),\n",
       " ('East Finchley', {}),\n",
       " ('Highgate', {}),\n",
       " ('Archway', {}),\n",
       " ('Tufnell Park', {}),\n",
       " ('Kentish Town', {}),\n",
       " ('Mornington Crescent', {}),\n",
       " ('Warren Street', {}),\n",
       " ('Goodge Street', {}),\n",
       " ('Tottenham Court Road', {}),\n",
       " ('Leicester Square', {}),\n",
       " ('Battersea Power Station', {}),\n",
       " ('Nine Elms', {}),\n",
       " ('Wembley Park', {}),\n",
       " ('Kingsbury', {}),\n",
       " ('Queensbury', {}),\n",
       " ('Canons Park', {}),\n",
       " ('Stanmore', {}),\n",
       " ('Stratford', {}),\n",
       " ('Canning Town', {}),\n",
       " ('North Greenwich', {}),\n",
       " ('Canary Wharf', {}),\n",
       " ('Canada Water', {}),\n",
       " ('Bermondsey', {}),\n",
       " ('Southwark', {}),\n",
       " ('Westminster', {}),\n",
       " ('Green Park', {}),\n",
       " ('Bond Street', {}),\n",
       " (\"St. John's Wood\", {}),\n",
       " ('Swiss Cottage', {}),\n",
       " ('Finchley Road', {}),\n",
       " ('Neasden', {}),\n",
       " ('Dollis Hill', {}),\n",
       " ('Willesden Green', {}),\n",
       " ('Kilburn', {}),\n",
       " ('West Hampstead', {}),\n",
       " ('Maryland', {}),\n",
       " ('Forest Gate', {}),\n",
       " ('Manor Park', {}),\n",
       " ('Ilford', {}),\n",
       " ('Seven Kings', {}),\n",
       " ('Goodmayes', {}),\n",
       " ('Chadwell Heath', {}),\n",
       " ('Romford', {}),\n",
       " ('Gidea Park', {}),\n",
       " ('Harold Wood', {}),\n",
       " ('Brentwood', {}),\n",
       " ('Shenfield', {}),\n",
       " ('Uxbridge', {}),\n",
       " ('Hillingdon', {}),\n",
       " ('Ickenham', {}),\n",
       " ('Ruislip', {}),\n",
       " ('Ruislip Manor', {}),\n",
       " ('Eastcote', {}),\n",
       " ('Rayners Lane', {}),\n",
       " ('West Harrow', {}),\n",
       " ('Aldgate', {}),\n",
       " ('Harrow-on-the-Hill', {}),\n",
       " ('Amersham', {}),\n",
       " ('Chalfont & Latimer', {}),\n",
       " ('Chorleywood', {}),\n",
       " ('Rickmansworth', {}),\n",
       " ('Moor Park', {}),\n",
       " ('Northwood', {}),\n",
       " ('Northwood Hills', {}),\n",
       " ('Pinner', {}),\n",
       " ('North Harrow', {}),\n",
       " ('Northwick Park', {}),\n",
       " ('Preston Road', {}),\n",
       " ('Croxley', {}),\n",
       " ('Watford', {}),\n",
       " ('Chesham', {}),\n",
       " ('West Acton', {}),\n",
       " ('Ealing Broadway', {}),\n",
       " ('North Acton', {}),\n",
       " ('West Ruislip', {}),\n",
       " ('Ruislip Gardens', {}),\n",
       " ('South Ruislip', {}),\n",
       " ('Northolt', {}),\n",
       " ('Greenford', {}),\n",
       " ('Perivale', {}),\n",
       " ('Hanger Lane', {}),\n",
       " ('East Acton', {}),\n",
       " ('White City', {}),\n",
       " (\"Shepherd's Bush\", {}),\n",
       " ('Holland Park', {}),\n",
       " ('Notting Hill Gate', {}),\n",
       " ('Queensway', {}),\n",
       " ('Lancaster Gate', {}),\n",
       " ('Marble Arch', {}),\n",
       " ('Holborn', {}),\n",
       " ('Chancery Lane', {}),\n",
       " (\"St. Paul's\", {}),\n",
       " ('Bethnal Green', {}),\n",
       " ('Leyton', {}),\n",
       " ('Leytonstone', {}),\n",
       " ('Snaresbrook', {}),\n",
       " ('South Woodford', {}),\n",
       " ('Woodford', {}),\n",
       " ('Buckhurst Hill', {}),\n",
       " ('Loughton', {}),\n",
       " ('Debden', {}),\n",
       " ('Theydon Bois', {}),\n",
       " ('Epping', {}),\n",
       " ('Wanstead', {}),\n",
       " ('Redbridge', {}),\n",
       " ('Gants Hill', {}),\n",
       " ('Newbury Park', {}),\n",
       " ('Barkingside', {}),\n",
       " ('Fairlop', {}),\n",
       " ('Hainault', {}),\n",
       " ('Grange Hill', {}),\n",
       " ('Chigwell', {}),\n",
       " ('Roding Valley', {}),\n",
       " (\"Earl's Court\", {}),\n",
       " ('Gloucester Road', {}),\n",
       " ('West Kensington', {}),\n",
       " ('Barons Court', {}),\n",
       " ('Ravenscourt Park', {}),\n",
       " ('Stamford Brook', {}),\n",
       " ('Turnham Green', {}),\n",
       " ('Chiswick Park', {}),\n",
       " ('Acton Town', {}),\n",
       " ('Ealing Common', {}),\n",
       " ('South Kensington', {}),\n",
       " ('Sloane Square', {}),\n",
       " ('Richmond', {}),\n",
       " ('Kew Gardens', {}),\n",
       " ('Gunnersbury', {}),\n",
       " ('West Brompton', {}),\n",
       " ('Wimbledon', {}),\n",
       " ('Wimbledon Park', {}),\n",
       " ('Southfields', {}),\n",
       " ('East Putney', {}),\n",
       " ('Putney Bridge', {}),\n",
       " ('Parsons Green', {}),\n",
       " ('Fulham Broadway', {}),\n",
       " ('High Street Kensington', {}),\n",
       " ('Bayswater', {}),\n",
       " ('Victoria', {}),\n",
       " (\"St. James's Park\", {}),\n",
       " ('Temple', {}),\n",
       " ('Blackfriars', {}),\n",
       " ('Mansion House', {}),\n",
       " ('Cannon Street', {}),\n",
       " ('Tower Hill', {}),\n",
       " ('Upney', {}),\n",
       " ('Becontree', {}),\n",
       " ('Dagenham Heathway', {}),\n",
       " ('Dagenham East', {}),\n",
       " ('Elm Park', {}),\n",
       " ('Hornchurch', {}),\n",
       " ('Upminster Bridge', {}),\n",
       " ('Upminster', {}),\n",
       " ('Kensington', {}),\n",
       " ('Stratford High Street', {}),\n",
       " ('Abbey Road', {}),\n",
       " ('Star Lane', {}),\n",
       " ('Royal Victoria', {}),\n",
       " ('Shadwell', {}),\n",
       " ('Limehouse', {}),\n",
       " ('Westferry', {}),\n",
       " ('West India Quay', {}),\n",
       " ('Heron Quays', {}),\n",
       " ('South Quay', {}),\n",
       " ('Crossharbour', {}),\n",
       " ('Mudchute', {}),\n",
       " ('Island Gardens', {}),\n",
       " ('Cutty Sark', {}),\n",
       " ('Greenwich', {}),\n",
       " ('Deptford Bridge', {}),\n",
       " ('Elverson Road', {}),\n",
       " ('Lewisham', {}),\n",
       " ('Tower Gateway', {}),\n",
       " ('Poplar', {}),\n",
       " ('All Saints', {}),\n",
       " ('Blackwall', {}),\n",
       " ('East India', {}),\n",
       " ('Custom House', {}),\n",
       " ('Prince Regent', {}),\n",
       " ('Royal Albert', {}),\n",
       " ('Beckton Park', {}),\n",
       " ('Cyprus', {}),\n",
       " ('Gallions Reach', {}),\n",
       " ('Beckton', {}),\n",
       " ('Langdon Park', {}),\n",
       " ('Devons Road', {}),\n",
       " ('Bow Church', {}),\n",
       " ('Pudding Mill Lane', {}),\n",
       " ('Stratford International', {}),\n",
       " ('Woolwich Arsenal', {}),\n",
       " ('King George V', {}),\n",
       " ('West Silvertown', {}),\n",
       " ('Pontoon Dock', {}),\n",
       " ('London City Airport', {}),\n",
       " ('South Ealing', {}),\n",
       " ('Knightsbridge', {}),\n",
       " ('Hyde Park Corner', {}),\n",
       " ('Covent Garden', {}),\n",
       " ('Russell Square', {}),\n",
       " ('Caledonian Road', {}),\n",
       " ('Holloway Road', {}),\n",
       " ('Arsenal', {}),\n",
       " ('Finsbury Park', {}),\n",
       " ('Manor House', {}),\n",
       " ('Turnpike Lane', {}),\n",
       " ('Wood Green', {}),\n",
       " ('Bounds Green', {}),\n",
       " ('Arnos Grove', {}),\n",
       " ('Southgate', {}),\n",
       " ('Oakwood', {}),\n",
       " ('Cockfosters', {}),\n",
       " ('South Harrow', {}),\n",
       " ('Sudbury Hill', {}),\n",
       " ('Sudbury Town', {}),\n",
       " ('Alperton', {}),\n",
       " ('Park Royal', {}),\n",
       " ('North Ealing', {}),\n",
       " ('Heathrow Terminal 4', {}),\n",
       " ('Hatton Cross', {}),\n",
       " ('Heathrow Terminals 2 & 3', {}),\n",
       " ('Hounslow West', {}),\n",
       " ('Hounslow Central', {}),\n",
       " ('Hounslow East', {}),\n",
       " ('Osterley', {}),\n",
       " ('Boston Manor', {}),\n",
       " ('Northfields', {}),\n",
       " ('Heathrow Terminal 5', {}),\n",
       " ('Brixton', {}),\n",
       " ('Vauxhall', {}),\n",
       " ('Pimlico', {}),\n",
       " ('Highbury & Islington', {}),\n",
       " ('Seven Sisters', {}),\n",
       " ('Tottenham Hale', {}),\n",
       " ('Blackhorse Road', {}),\n",
       " ('Walthamstow Central', {}),\n",
       " ('Cambridge Heath', {}),\n",
       " ('London Fields', {}),\n",
       " ('Hackney Downs', {}),\n",
       " ('Rectory Road', {}),\n",
       " ('Stoke Newington', {}),\n",
       " ('Stamford Hill', {}),\n",
       " ('Bruce Grove', {}),\n",
       " ('White Hart Lane', {}),\n",
       " ('Silver Street', {}),\n",
       " ('Edmonton Green', {}),\n",
       " ('Southbury', {}),\n",
       " ('Turkey Street', {}),\n",
       " ('Theobalds Grove', {}),\n",
       " ('Cheshunt', {}),\n",
       " ('Enfield Town', {}),\n",
       " ('Bush Hill Park', {}),\n",
       " ('Emerson Park', {}),\n",
       " ('Clapton', {}),\n",
       " ('St James Street', {}),\n",
       " ('Wood Street', {}),\n",
       " ('Highams Park', {}),\n",
       " ('Chingford', {}),\n",
       " ('South Acton', {}),\n",
       " ('Kilburn High Road', {}),\n",
       " ('Acton Central', {}),\n",
       " ('Kensal Rise', {}),\n",
       " ('Brondesbury Park', {}),\n",
       " ('Brondesbury', {}),\n",
       " ('Finchley Road & Frognal', {}),\n",
       " ('Hampstead Heath', {}),\n",
       " ('Gospel Oak', {}),\n",
       " ('Kentish Town West', {}),\n",
       " ('Camden Road', {}),\n",
       " ('Caledonian Road & Barnsbury', {}),\n",
       " ('Canonbury', {}),\n",
       " ('Dalston Kingsland', {}),\n",
       " ('Hackney Central', {}),\n",
       " ('Homerton', {}),\n",
       " ('Hackney Wick', {}),\n",
       " ('Wapping', {}),\n",
       " ('Rotherhithe', {}),\n",
       " ('Surrey Quays', {}),\n",
       " ('New Cross Gate', {}),\n",
       " ('Shoreditch High Street', {}),\n",
       " ('New Cross', {}),\n",
       " ('Sydenham', {}),\n",
       " ('Crystal Palace', {}),\n",
       " ('Queens Road Peckham', {}),\n",
       " ('Peckham Rye', {}),\n",
       " ('Denmark Hill', {}),\n",
       " ('Clapham High Street', {}),\n",
       " ('Wandsworth Road', {}),\n",
       " ('Clapham Junction', {}),\n",
       " ('Imperial Wharf', {}),\n",
       " ('South Hampstead', {}),\n",
       " ('Bushey', {}),\n",
       " ('Watford High Street', {}),\n",
       " ('Carpenders Park', {}),\n",
       " ('Hatch End', {}),\n",
       " ('Headstone Lane', {}),\n",
       " ('Watford Junction', {}),\n",
       " ('Upper Holloway', {}),\n",
       " ('Crouch Hill', {}),\n",
       " ('Harringay Green Lanes', {}),\n",
       " ('South Tottenham', {}),\n",
       " ('Walthamstow Queens Road', {}),\n",
       " ('Leyton Midland Road', {}),\n",
       " ('Leytonstone High Road', {}),\n",
       " ('Wanstead Park', {}),\n",
       " ('Woodgrange Park', {}),\n",
       " ('Brockley', {}),\n",
       " ('Honor Oak Park', {}),\n",
       " ('Forest Hill', {}),\n",
       " ('Penge West', {}),\n",
       " ('Anerley', {}),\n",
       " ('Norwood Junction', {}),\n",
       " ('West Croydon', {}),\n",
       " ('Dalston Junction', {}),\n",
       " ('Haggerston', {}),\n",
       " ('Hoxton', {}),\n",
       " ('Battersea Park', {})]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# THIS IS JUST TO CHECK WE HAVE EVERYTHING\n",
    "list(G.nodes(data = True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "931a1f4b-28a2-476e-9c7f-da596b13e80c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Kennington', 'Nine Elms')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(flows, key=flows.get)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0985e361-840b-4ab1-83d8-5b300f737ba5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Waterloo', 'Bank and Monument')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(flows, key=flows.get)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86ba8750-d91e-4e65-95a9-1cb82d8cbd4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "pos = {}\n",
    "\n",
    "#iterate through the stations\n",
    "for i, station in stations.iterrows():\n",
    "    xy = station.geometry.coords[0]\n",
    "    \n",
    "    #if station already in dict add coordinate to coordinate list\n",
    "    if station['name'] in pos.keys():\n",
    "        pos[station['name']].extend([xy])\n",
    "    #if station is not in the dict add station to dict and set first coordinate in list\n",
    "    else:\n",
    "        pos[station['name']] = [xy]\n",
    "\n",
    "#iterate through our dict and replace coordinate list with mean value\n",
    "for k, v in pos.items():\n",
    "    #we set axis to 0 to make sure to take mean of x and y coordinates\n",
    "    pos[k] = np.mean(v, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81903609-acfe-456d-92c1-688bbc6dc0f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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WgqrIiKN0MiQy4OAhHml76b5uxYRkWOhsCoi0jj1RNNUiUgjoLAqItLIjAy5/AQ0TZWINBIKqyIijcjIkMujAce80nf3+LsWEZG6oLAqItJIjAy53ACd5pW+u9nftYiI1BWFVRGRxqM78Ju/ixARqUsKqyIijUClaapK/V2LiEhdMpal/vciIg2ZMSY+lPBxJRQ9a1lWlr/rERGpS2pZFRFp+K4toeg+4Fp/FyIiUteC/F2AiIgcs9eqfBYRaTTUDUBEREREApa6AYiIiIhIwFJYFREREZGApbAqIiIiIgFLYVVEREREApbCqoiIiIgELIVVEREREQlYCqsiIiIiErAUVkVEREQkYCmsioiIiEjAUlgVERERkYClsCoiIiIiAUthVUREREQClsKqiIiIiAQshVURERERCVgKqyIiIiISsBRWRURERCRgKayKiIiISMBSWBURERGRgKWwKiIiIiIBS2FVRERERAKWwqqIiIiIBCyFVREREREJWAqrIiIiIhKwFFZFREREJGAprIqIiIhIwFJYFREREZGApbAqIiIiIgFLYVVEREREApbCqoiIiIgELIVVEREREQlYCqsiIiIiErAUVkVEREQkYCmsioiIiEjAUlgVERERkYClsCoiIiIiAUthVUREREQClsKqiIiIiAQshVURERERCVgKqyIiIiISsBRWRURERCRgKayKiIiISMBSWBURERGRgKWwKiIiIiIBS2FVRERERAKWwqqIiIiIBCyFVREREREJWAqrIiIiIhKwFFZFREREJGAprIqIiIhIwFJYFREREZGApbAqIiIiIgFLYVVEREREApbCqoiIiIgELIVVEREREQlYCqsiIiIiErAUVkVEREQkYCmsioiIiEjAUlgVERERkYClsCoiIiIiAUthVUREREQClsKqiIiIiAQshVURERERCVgKqyIiIiISsBRWRURERCRgKayKiIiISMBSWBURERGRgKWwKiIiIiIBS2FVRERERAKWwqqIiIiIBCyFVREREREJWAqrIiIiIhKwFFZFREREJGAprIqIiIhIwFJYFREREZGApbAqIiIiIgFLYVVEREREApbCqoiIiIgELIVVEREREQlYCqsiIiIiErAUVkVEREQkYCmsioiIiEjAUlgVERERkYClsCoiIiIiAUthVUREREQClsKqiIiIiAQshVURERERCVgKqyIiIiISsBRWRURERCRgKayKiIiISMBSWBURERGRgKWwKiIiIiIBS2FVRERERAKWwqqIiIiIBCyFVREREREJWAqrIiIiIhKwFFZFREREJGAprIqIiIhIwFJYFREREZGApbAqIiIiIgFLYVVEREREApbCqoiIiIgELIVVEREREQlYCqsiIiIiErAUVkVEREQkYCmsioiIiEjAUlgVERERkYClsCoiIiIiAUthVUREREQClsKqiIiIiAQshVURERERCVgKqyIiIiISsBRWRURERCRgKayKiIiISMBSWBURERGRgKWwKiIiIiIBS2FVRERERAKWwqqIiIiIBCyFVREREREJWAqrIiIiIhKwFFZFREREJGAprIqIiIhIwFJYFREREZGApbAqIiIiIgFLYVVEREREApbCqoiIiIgELIVVEREREQlYCqsiIiIiErAUVkVEREQkYCmsioiIiEjAUlgVERERkYClsCoiIiIiAUthVUREREQClsKqiIiIiAQshVURERERCVhB/i5A5GjFm0SrlNL9G4zB7Pv6oC/2HXPg99Udc6htlb6psrv6bYer48BvrUOdX82x+zYcdI3qjj3UNSq2G/u8mo6t7l41XvvYzzno/MPsr801a/Vaa7HfOpo6DrvfOubXdtCrO9SPlKn85UFP5KD/RXw/nYe5rlXteZWvXfV/qYP27Tvm4O2VjzdVXm9Nxxx8nyrnHHS/Q1yz8j2rXP/Qxx94bnX3OmD/Qd9z0PGVf51U+m13iHNMlW32lmWrSuZalpWMSAOisCoNVimlnOoYgXFUhDeH/bVxwL5tBuNw7P8XrOJr335TcazZf/y+Yw7YVvn7as6pdE2MwTLGft+iyjHWvjo44B5Vj7eMLxEYg1Xx/ocxdkjad81K51U6Z1+Q2nc8+2qr+L7aY/btN5X2Y9+/xnM48JwD9puDth18zMHXOOialbbX9pxD1lXlGhUOtf/Aa1qHfS0HHEOVY7D3UeU+FduqHmOqO8euzLd/f8g11ZxjjFXpR7DSORW3r3KMY9/3+4Ofo9L3Dl9Yc+zbb+3b7zjgmErf+76uvN9R3X4qb/Pu27b/GC/OA67h3Xe8s9L3+4/xfY933zWcxrvvmk7jta/J/ntWXOeAc/DiNN5997Wv4fVdw97v8O23j7VwVDrHiXffeftqPWC/dUCd+7+3KtVWcR6++4ITU+l7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\n",
      "text/plain": [
       "<Figure size 864x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot our calcuated flows\n",
    "flows_values = flows.values()\n",
    "flow_color=[(i[2]['flows']/max(flows_values)) for i in G.edges(data=True)]\n",
    "flow_width=[(i[2]['flows']/max(flows_values)*10) for i in G.edges(data=True)]\n",
    "\n",
    "\n",
    "# Plot graph\n",
    "fig, ax = plt.subplots(figsize=(12,12))\n",
    "\n",
    "#pos=nx.spring_layout(G)\n",
    "edg=nx.draw_networkx_edges(G, pos,edge_color=flow_color, width=flow_width)\n",
    "\n",
    "nx.draw_networkx_nodes(G,\n",
    "        pos = pos,\n",
    "        node_color= 'black',\n",
    "        node_size= 1)\n",
    "\n",
    "plt.colorbar(edg,label=\"Passenger Flows\",orientation=\"horizontal\", shrink=0.5)\n",
    "plt.axis(\"off\")\n",
    "plt.title(\"London network Passenger Flows\",fontsize=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fca47b4-1b89-4669-9ee3-697c8f5df8ae",
   "metadata": {},
   "source": [
    "### Topological Networks\n",
    "1. The 'length' in the network corresponds to distance (I checked by looking at just wembly park to finchly road)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c127b921-c318-4d40-8bda-adb992f85040",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 1 ... 0 0 0]\n",
      " [1 0 0 ... 0 0 0]\n",
      " [1 0 0 ... 0 0 0]\n",
      " ...\n",
      " [0 0 0 ... 0 1 0]\n",
      " [0 0 0 ... 1 0 0]\n",
      " [0 0 0 ... 0 0 0]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_3480/3546948467.py:1: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n",
      "  adj = nx.adjacency_matrix(G,weight=None)\n"
     ]
    }
   ],
   "source": [
    "adj = nx.adjacency_matrix(G,weight=None)\n",
    "print(adj.todense())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c752d99-7fee-43b5-9bef-3ad18c6ac378",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nx.diameter(G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a01f559-0c5f-4638-a625-2e5835cd3362",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>degree</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Stratford</th>\n",
       "      <td>0.0225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bank and Monument</th>\n",
       "      <td>0.0200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>King's Cross St. Pancras</th>\n",
       "      <td>0.0175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Baker Street</th>\n",
       "      <td>0.0175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterloo</th>\n",
       "      <td>0.0150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canning Town</th>\n",
       "      <td>0.0150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Earl's Court</th>\n",
       "      <td>0.0150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Ham</th>\n",
       "      <td>0.0150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Green Park</th>\n",
       "      <td>0.0150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oxford Circus</th>\n",
       "      <td>0.0150</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          degree\n",
       "Stratford                 0.0225\n",
       "Bank and Monument         0.0200\n",
       "King's Cross St. Pancras  0.0175\n",
       "Baker Street              0.0175\n",
       "Waterloo                  0.0150\n",
       "Canning Town              0.0150\n",
       "Earl's Court              0.0150\n",
       "West Ham                  0.0150\n",
       "Green Park                0.0150\n",
       "Oxford Circus             0.0150"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# To dataframe using the nodes as the index\n",
    "deg_london =nx.degree_centrality(G)\n",
    "nx.set_node_attributes(G,dict(deg_london),'degree')\n",
    "\n",
    "df = pd.DataFrame(index=G.nodes())\n",
    "df['degree'] = pd.Series(nx.get_node_attributes(G, 'degree'))\n",
    "\n",
    "df_sorted = df.sort_values([\"degree\"], ascending=False)\n",
    "df_sorted[0:10]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5c68ad7-a458-4841-899a-2a748ad1f07d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "78581.28589029616"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# diameter of the network considering the distance between stations (weighted diameter), in metres\n",
    "\n",
    "nlen = {n:nx.single_source_dijkstra_path_length(G, n, weight='length') for n in G.nodes() }\n",
    "e = nx.eccentricity(G,sp=nlen)\n",
    "d = nx.diameter(G, e)\n",
    "d"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cc5e9c1-0e1b-4aaf-b9e3-dbf846f88849",
   "metadata": {},
   "source": [
    "#### Running Centrality Measures: Top 10 Stations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b67f2b28-dfc5-4398-b845-f8986786ccd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topological_Betweenness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Stratford</th>\n",
       "      <td>23768.093434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bank and Monument</th>\n",
       "      <td>23181.058947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liverpool Street</th>\n",
       "      <td>21610.387049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>King's Cross St. Pancras</th>\n",
       "      <td>20373.521465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterloo</th>\n",
       "      <td>19464.882323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Green Park</th>\n",
       "      <td>17223.622114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Euston</th>\n",
       "      <td>16624.275469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Westminster</th>\n",
       "      <td>16226.155916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Baker Street</th>\n",
       "      <td>15287.107612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finchley Road</th>\n",
       "      <td>13173.758009</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Topological_Betweenness\n",
       "Stratford                            23768.093434\n",
       "Bank and Monument                    23181.058947\n",
       "Liverpool Street                     21610.387049\n",
       "King's Cross St. Pancras             20373.521465\n",
       "Waterloo                             19464.882323\n",
       "Green Park                           17223.622114\n",
       "Euston                               16624.275469\n",
       "Westminster                          16226.155916\n",
       "Baker Street                         15287.107612\n",
       "Finchley Road                        13173.758009"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Betweenness\n",
    "Topological_Betweenness=nx.betweenness_centrality(G,normalized=False)\n",
    "\n",
    "# We can add these values to the nodes attributes:\n",
    "nx.set_node_attributes(G,Topological_Betweenness,'Topological_Betweenness')\n",
    "\n",
    "df = pd.DataFrame(index=G.nodes())\n",
    "df['Topological_Betweenness'] = pd.Series(nx.get_node_attributes(G, 'Topological_Betweenness'))\n",
    "\n",
    "df_sorted = df.sort_values([\"Topological_Betweenness\"], ascending=False)\n",
    "df_sorted[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "718b89f0-dce2-4a13-9d8f-904d060552cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topological_Closeness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Green Park</th>\n",
       "      <td>0.114778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bank and Monument</th>\n",
       "      <td>0.113572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>King's Cross St. Pancras</th>\n",
       "      <td>0.113443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Westminster</th>\n",
       "      <td>0.112549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterloo</th>\n",
       "      <td>0.112265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oxford Circus</th>\n",
       "      <td>0.111204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bond Street</th>\n",
       "      <td>0.110988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Farringdon</th>\n",
       "      <td>0.110742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angel</th>\n",
       "      <td>0.110742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moorgate</th>\n",
       "      <td>0.110314</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Topological_Closeness\n",
       "Green Park                             0.114778\n",
       "Bank and Monument                      0.113572\n",
       "King's Cross St. Pancras               0.113443\n",
       "Westminster                            0.112549\n",
       "Waterloo                               0.112265\n",
       "Oxford Circus                          0.111204\n",
       "Bond Street                            0.110988\n",
       "Farringdon                             0.110742\n",
       "Angel                                  0.110742\n",
       "Moorgate                               0.110314"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Closeness\n",
    "Topological_Closeness=nx.closeness_centrality(G)\n",
    "\n",
    "# We can add these values to the nodes attributes:\n",
    "nx.set_node_attributes(G,Topological_Closeness,'Topological_Closeness')\n",
    "\n",
    "df2 = pd.DataFrame(index=G.nodes())\n",
    "df2['Topological_Closeness'] = pd.Series(nx.get_node_attributes(G, 'Topological_Closeness'))\n",
    "\n",
    "df_sorted2 = df2.sort_values([\"Topological_Closeness\"], ascending=False)\n",
    "df_sorted2[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6c67fad-21e9-4fc8-8b24-666b16b86d33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topological_Eigenvector</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Bank and Monument</th>\n",
       "      <td>0.383427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liverpool Street</th>\n",
       "      <td>0.328824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stratford</th>\n",
       "      <td>0.269179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterloo</th>\n",
       "      <td>0.249731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moorgate</th>\n",
       "      <td>0.215137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Green Park</th>\n",
       "      <td>0.197630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oxford Circus</th>\n",
       "      <td>0.184094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tower Hill</th>\n",
       "      <td>0.171676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Westminster</th>\n",
       "      <td>0.168610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shadwell</th>\n",
       "      <td>0.159090</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Topological_Eigenvector\n",
       "Bank and Monument                 0.383427\n",
       "Liverpool Street                  0.328824\n",
       "Stratford                         0.269179\n",
       "Waterloo                          0.249731\n",
       "Moorgate                          0.215137\n",
       "Green Park                        0.197630\n",
       "Oxford Circus                     0.184094\n",
       "Tower Hill                        0.171676\n",
       "Westminster                       0.168610\n",
       "Shadwell                          0.159090"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Eigenvector\n",
    "Topological_Eigenvector = nx.eigenvector_centrality(G, max_iter=500)\n",
    "\n",
    "# Add values to node attributes\n",
    "nx.set_node_attributes(G, Topological_Eigenvector, 'Topological_Eigenvector')\n",
    "\n",
    "df3 = pd.DataFrame(index=G.nodes())\n",
    "df3['Topological_Eigenvector'] = pd.Series(nx.get_node_attributes(G, 'Topological_Eigenvector'))\n",
    "\n",
    "df_sorted3 = df3.sort_values([\"Topological_Eigenvector\"], ascending=False)\n",
    "df_sorted3[0:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d0a39d7-d4ab-481a-9936-57a25a085867",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table><tr><td><table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topological_Betweenness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Stratford</th>\n",
       "      <td>23768.093434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bank and Monument</th>\n",
       "      <td>23181.058947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liverpool Street</th>\n",
       "      <td>21610.387049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>King's Cross St. Pancras</th>\n",
       "      <td>20373.521465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterloo</th>\n",
       "      <td>19464.882323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Green Park</th>\n",
       "      <td>17223.622114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Euston</th>\n",
       "      <td>16624.275469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Westminster</th>\n",
       "      <td>16226.155916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Baker Street</th>\n",
       "      <td>15287.107612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finchley Road</th>\n",
       "      <td>13173.758009</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table></td><td><table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topological_Closeness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Green Park</th>\n",
       "      <td>0.114778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bank and Monument</th>\n",
       "      <td>0.113572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>King's Cross St. Pancras</th>\n",
       "      <td>0.113443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Westminster</th>\n",
       "      <td>0.112549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterloo</th>\n",
       "      <td>0.112265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oxford Circus</th>\n",
       "      <td>0.111204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bond Street</th>\n",
       "      <td>0.110988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Farringdon</th>\n",
       "      <td>0.110742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angel</th>\n",
       "      <td>0.110742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moorgate</th>\n",
       "      <td>0.110314</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table></td><td><table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Topological_Eigenvector</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Bank and Monument</th>\n",
       "      <td>0.383427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liverpool Street</th>\n",
       "      <td>0.328824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stratford</th>\n",
       "      <td>0.269179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterloo</th>\n",
       "      <td>0.249731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moorgate</th>\n",
       "      <td>0.215137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Green Park</th>\n",
       "      <td>0.197630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oxford Circus</th>\n",
       "      <td>0.184094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tower Hill</th>\n",
       "      <td>0.171676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Westminster</th>\n",
       "      <td>0.168610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shadwell</th>\n",
       "      <td>0.159090</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table></td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML\n",
    "\n",
    "# Display the tables side by side\n",
    "display(HTML('<table><tr><td>' + df_sorted[0:10].to_html() + '</td><td>' + df_sorted2[0:10].to_html() + '</td><td>' + df_sorted3[0:10].to_html() + '</td></tr></table>'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5acceaa5-07d7-4b43-bc7f-db8fc024405e",
   "metadata": {},
   "source": [
    "#### Removing Nodes and Assessing: Nonsequential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "6b284d07-cdb1-4de9-b95a-543b6adf08a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_nodes_by_centrality3(G, centrality_function, num_nodes_to_remove=10, **kwargs):\n",
    "    # Create a copy of the graph\n",
    "    G_copy = G.copy()\n",
    "\n",
    "    # Calculate the centrality measure for the current graph\n",
    "    current_centrality_measure = centrality_function(G_copy, **kwargs)\n",
    "\n",
    "    # Sort the centrality values in descending order\n",
    "    sorted_nodes = sorted(current_centrality_measure, key=current_centrality_measure.get, reverse=True)\n",
    "\n",
    "    # Initialize the results list\n",
    "    results = []\n",
    "\n",
    "    # Remove the highest ranked nodes one by one and record the measurements\n",
    "    for i in range(num_nodes_to_remove):\n",
    "        node_to_remove = sorted_nodes[i]\n",
    "        G_copy.remove_node(node_to_remove)\n",
    "\n",
    "        # Get the connected components\n",
    "        connected_components = list(nx.connected_components(G_copy))\n",
    "        num_connected_components = len(connected_components)\n",
    "\n",
    "        # Get the largest connected component\n",
    "        largest_cc = max(nx.connected_components(G_copy), key=len)\n",
    "        largest_cc_size = len(largest_cc)\n",
    "        \n",
    "        # Get ratio of the size of giant component to the number of connected components\n",
    "        ratio = largest_cc_size/num_connected_components\n",
    "\n",
    "        # Calculate the isolation rate\n",
    "        isolated_components = [comp for comp in connected_components if len(comp) != largest_cc_size]\n",
    "        isolated_nodes = [node for comp in isolated_components for node in comp]\n",
    "        isolation_rate = len(isolated_nodes) / nx.number_of_nodes(G_copy)\n",
    "        \n",
    "        results.append({\"Node Removed\": node_to_remove, \"Isolation Rate\": isolation_rate, \"Ratio\": ratio, \"Num Connected Components\": num_connected_components, \"Largest CC Size\": largest_cc_size})\n",
    "\n",
    "    return pd.DataFrame(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "40875136-94a9-486d-bb4b-902b4979c150",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Node Removed</th>\n",
       "      <th>Isolation Rate</th>\n",
       "      <th>Ratio</th>\n",
       "      <th>Num Connected Components</th>\n",
       "      <th>Largest CC Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Stratford</td>\n",
       "      <td>0.052500</td>\n",
       "      <td>126.333333</td>\n",
       "      <td>3</td>\n",
       "      <td>379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0.052632</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Liverpool Street</td>\n",
       "      <td>0.052764</td>\n",
       "      <td>125.666667</td>\n",
       "      <td>3</td>\n",
       "      <td>377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>King's Cross St. Pancras</td>\n",
       "      <td>0.065491</td>\n",
       "      <td>92.750000</td>\n",
       "      <td>4</td>\n",
       "      <td>371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Waterloo</td>\n",
       "      <td>0.065657</td>\n",
       "      <td>92.500000</td>\n",
       "      <td>4</td>\n",
       "      <td>370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Green Park</td>\n",
       "      <td>0.065823</td>\n",
       "      <td>92.250000</td>\n",
       "      <td>4</td>\n",
       "      <td>369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Euston</td>\n",
       "      <td>0.121827</td>\n",
       "      <td>69.200000</td>\n",
       "      <td>5</td>\n",
       "      <td>346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Westminster</td>\n",
       "      <td>0.122137</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>5</td>\n",
       "      <td>345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Baker Street</td>\n",
       "      <td>0.127551</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Finchley Road</td>\n",
       "      <td>0.132992</td>\n",
       "      <td>48.428571</td>\n",
       "      <td>7</td>\n",
       "      <td>339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Highbury &amp; Islington</td>\n",
       "      <td>0.133333</td>\n",
       "      <td>48.285714</td>\n",
       "      <td>7</td>\n",
       "      <td>338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Willesden Junction</td>\n",
       "      <td>0.167095</td>\n",
       "      <td>40.500000</td>\n",
       "      <td>8</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Bond Street</td>\n",
       "      <td>0.213918</td>\n",
       "      <td>33.888889</td>\n",
       "      <td>9</td>\n",
       "      <td>305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>West Ham</td>\n",
       "      <td>0.219638</td>\n",
       "      <td>30.200000</td>\n",
       "      <td>10</td>\n",
       "      <td>302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Wembley Park</td>\n",
       "      <td>0.230570</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Finsbury Park</td>\n",
       "      <td>0.259740</td>\n",
       "      <td>21.923077</td>\n",
       "      <td>13</td>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Moorgate</td>\n",
       "      <td>0.257812</td>\n",
       "      <td>20.357143</td>\n",
       "      <td>14</td>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Earl's Court</td>\n",
       "      <td>0.258486</td>\n",
       "      <td>20.285714</td>\n",
       "      <td>14</td>\n",
       "      <td>284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>South Hampstead</td>\n",
       "      <td>0.259162</td>\n",
       "      <td>20.214286</td>\n",
       "      <td>14</td>\n",
       "      <td>283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Canada Water</td>\n",
       "      <td>0.608924</td>\n",
       "      <td>9.933333</td>\n",
       "      <td>15</td>\n",
       "      <td>149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Queen's Park</td>\n",
       "      <td>0.615789</td>\n",
       "      <td>8.588235</td>\n",
       "      <td>17</td>\n",
       "      <td>146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Kilburn High Road</td>\n",
       "      <td>0.614776</td>\n",
       "      <td>9.125000</td>\n",
       "      <td>16</td>\n",
       "      <td>146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Preston Road</td>\n",
       "      <td>0.616402</td>\n",
       "      <td>9.062500</td>\n",
       "      <td>16</td>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Harrow-on-the-Hill</td>\n",
       "      <td>0.647215</td>\n",
       "      <td>7.388889</td>\n",
       "      <td>18</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Northwick Park</td>\n",
       "      <td>0.646277</td>\n",
       "      <td>7.823529</td>\n",
       "      <td>17</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Kensal Green</td>\n",
       "      <td>0.645333</td>\n",
       "      <td>8.312500</td>\n",
       "      <td>16</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>South Kensington</td>\n",
       "      <td>0.644385</td>\n",
       "      <td>7.388889</td>\n",
       "      <td>18</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Camden Town</td>\n",
       "      <td>0.643432</td>\n",
       "      <td>6.650000</td>\n",
       "      <td>20</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Gloucester Road</td>\n",
       "      <td>0.642473</td>\n",
       "      <td>6.650000</td>\n",
       "      <td>20</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Canning Town</td>\n",
       "      <td>0.681941</td>\n",
       "      <td>5.130435</td>\n",
       "      <td>23</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Seven Sisters</td>\n",
       "      <td>0.710811</td>\n",
       "      <td>4.458333</td>\n",
       "      <td>24</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Victoria</td>\n",
       "      <td>0.710027</td>\n",
       "      <td>4.115385</td>\n",
       "      <td>26</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Turnham Green</td>\n",
       "      <td>0.709239</td>\n",
       "      <td>3.962963</td>\n",
       "      <td>27</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Leyton</td>\n",
       "      <td>0.708447</td>\n",
       "      <td>3.962963</td>\n",
       "      <td>27</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Shepherd's Bush</td>\n",
       "      <td>0.707650</td>\n",
       "      <td>3.689655</td>\n",
       "      <td>29</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Surrey Quays</td>\n",
       "      <td>0.706849</td>\n",
       "      <td>3.451613</td>\n",
       "      <td>31</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Leytonstone</td>\n",
       "      <td>0.706044</td>\n",
       "      <td>3.451613</td>\n",
       "      <td>31</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>London Bridge</td>\n",
       "      <td>0.705234</td>\n",
       "      <td>3.242424</td>\n",
       "      <td>33</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Acton Town</td>\n",
       "      <td>0.704420</td>\n",
       "      <td>3.057143</td>\n",
       "      <td>35</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Hammersmith</td>\n",
       "      <td>0.703601</td>\n",
       "      <td>2.891892</td>\n",
       "      <td>37</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Barons Court</td>\n",
       "      <td>0.702778</td>\n",
       "      <td>2.891892</td>\n",
       "      <td>37</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>West Brompton</td>\n",
       "      <td>0.701950</td>\n",
       "      <td>2.743590</td>\n",
       "      <td>39</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>0.734637</td>\n",
       "      <td>2.317073</td>\n",
       "      <td>41</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Bermondsey</td>\n",
       "      <td>0.733894</td>\n",
       "      <td>2.375000</td>\n",
       "      <td>40</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Sloane Square</td>\n",
       "      <td>0.733146</td>\n",
       "      <td>2.435897</td>\n",
       "      <td>39</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Farringdon</td>\n",
       "      <td>0.732394</td>\n",
       "      <td>2.435897</td>\n",
       "      <td>39</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Angel</td>\n",
       "      <td>0.731638</td>\n",
       "      <td>2.435897</td>\n",
       "      <td>39</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>0.733711</td>\n",
       "      <td>2.410256</td>\n",
       "      <td>39</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Barbican</td>\n",
       "      <td>0.732955</td>\n",
       "      <td>2.473684</td>\n",
       "      <td>38</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Old Street</td>\n",
       "      <td>0.732194</td>\n",
       "      <td>2.540541</td>\n",
       "      <td>37</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Node Removed  Isolation Rate       Ratio  \\\n",
       "0                  Stratford        0.052500  126.333333   \n",
       "1          Bank and Monument        0.052632  126.000000   \n",
       "2           Liverpool Street        0.052764  125.666667   \n",
       "3   King's Cross St. Pancras        0.065491   92.750000   \n",
       "4                   Waterloo        0.065657   92.500000   \n",
       "5                 Green Park        0.065823   92.250000   \n",
       "6                     Euston        0.121827   69.200000   \n",
       "7                Westminster        0.122137   69.000000   \n",
       "8               Baker Street        0.127551   57.000000   \n",
       "9              Finchley Road        0.132992   48.428571   \n",
       "10      Highbury & Islington        0.133333   48.285714   \n",
       "11        Willesden Junction        0.167095   40.500000   \n",
       "12               Bond Street        0.213918   33.888889   \n",
       "13                  West Ham        0.219638   30.200000   \n",
       "14              Wembley Park        0.230570   27.000000   \n",
       "15             Finsbury Park        0.259740   21.923077   \n",
       "16                  Moorgate        0.257812   20.357143   \n",
       "17              Earl's Court        0.258486   20.285714   \n",
       "18           South Hampstead        0.259162   20.214286   \n",
       "19              Canada Water        0.608924    9.933333   \n",
       "20              Queen's Park        0.615789    8.588235   \n",
       "21         Kilburn High Road        0.614776    9.125000   \n",
       "22              Preston Road        0.616402    9.062500   \n",
       "23        Harrow-on-the-Hill        0.647215    7.388889   \n",
       "24            Northwick Park        0.646277    7.823529   \n",
       "25              Kensal Green        0.645333    8.312500   \n",
       "26          South Kensington        0.644385    7.388889   \n",
       "27               Camden Town        0.643432    6.650000   \n",
       "28           Gloucester Road        0.642473    6.650000   \n",
       "29              Canning Town        0.681941    5.130435   \n",
       "30             Seven Sisters        0.710811    4.458333   \n",
       "31                  Victoria        0.710027    4.115385   \n",
       "32             Turnham Green        0.709239    3.962963   \n",
       "33                    Leyton        0.708447    3.962963   \n",
       "34           Shepherd's Bush        0.707650    3.689655   \n",
       "35              Surrey Quays        0.706849    3.451613   \n",
       "36               Leytonstone        0.706044    3.451613   \n",
       "37             London Bridge        0.705234    3.242424   \n",
       "38                Acton Town        0.704420    3.057143   \n",
       "39               Hammersmith        0.703601    2.891892   \n",
       "40              Barons Court        0.702778    2.891892   \n",
       "41             West Brompton        0.701950    2.743590   \n",
       "42              Canary Wharf        0.734637    2.317073   \n",
       "43                Bermondsey        0.733894    2.375000   \n",
       "44             Sloane Square        0.733146    2.435897   \n",
       "45                Farringdon        0.732394    2.435897   \n",
       "46                     Angel        0.731638    2.435897   \n",
       "47                  Maryland        0.733711    2.410256   \n",
       "48                  Barbican        0.732955    2.473684   \n",
       "49                Old Street        0.732194    2.540541   \n",
       "\n",
       "    Num Connected Components  Largest CC Size  \n",
       "0                          3              379  \n",
       "1                          3              378  \n",
       "2                          3              377  \n",
       "3                          4              371  \n",
       "4                          4              370  \n",
       "5                          4              369  \n",
       "6                          5              346  \n",
       "7                          5              345  \n",
       "8                          6              342  \n",
       "9                          7              339  \n",
       "10                         7              338  \n",
       "11                         8              324  \n",
       "12                         9              305  \n",
       "13                        10              302  \n",
       "14                        11              297  \n",
       "15                        13              285  \n",
       "16                        14              285  \n",
       "17                        14              284  \n",
       "18                        14              283  \n",
       "19                        15              149  \n",
       "20                        17              146  \n",
       "21                        16              146  \n",
       "22                        16              145  \n",
       "23                        18              133  \n",
       "24                        17              133  \n",
       "25                        16              133  \n",
       "26                        18              133  \n",
       "27                        20              133  \n",
       "28                        20              133  \n",
       "29                        23              118  \n",
       "30                        24              107  \n",
       "31                        26              107  \n",
       "32                        27              107  \n",
       "33                        27              107  \n",
       "34                        29              107  \n",
       "35                        31              107  \n",
       "36                        31              107  \n",
       "37                        33              107  \n",
       "38                        35              107  \n",
       "39                        37              107  \n",
       "40                        37              107  \n",
       "41                        39              107  \n",
       "42                        41               95  \n",
       "43                        40               95  \n",
       "44                        39               95  \n",
       "45                        39               95  \n",
       "46                        39               95  \n",
       "47                        39               94  \n",
       "48                        38               94  \n",
       "49                        37               94  "
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G_topbet_rem = G.copy()\n",
    "results_topbet_rem = remove_nodes_by_centrality3(G_topbet_rem, nx.betweenness_centrality, num_nodes_to_remove=50)\n",
    "results_topbet_rem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "10e5ea7d-31d9-4894-97a4-555e2ad1fa42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Node Removed</th>\n",
       "      <th>Isolation Rate</th>\n",
       "      <th>Ratio</th>\n",
       "      <th>Num Connected Components</th>\n",
       "      <th>Largest CC Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Green Park</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>King's Cross St. Pancras</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>398.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Westminster</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>397.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Waterloo</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>396.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Oxford Circus</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>395.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Bond Street</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>394.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Farringdon</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>393.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Angel</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>392.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Moorgate</td>\n",
       "      <td>0.005115</td>\n",
       "      <td>129.666667</td>\n",
       "      <td>3</td>\n",
       "      <td>389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Liverpool Street</td>\n",
       "      <td>0.005128</td>\n",
       "      <td>129.333333</td>\n",
       "      <td>3</td>\n",
       "      <td>388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Euston</td>\n",
       "      <td>0.102828</td>\n",
       "      <td>69.800000</td>\n",
       "      <td>5</td>\n",
       "      <td>349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Barbican</td>\n",
       "      <td>0.100515</td>\n",
       "      <td>87.250000</td>\n",
       "      <td>4</td>\n",
       "      <td>349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Old Street</td>\n",
       "      <td>0.098191</td>\n",
       "      <td>116.333333</td>\n",
       "      <td>3</td>\n",
       "      <td>349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Baker Street</td>\n",
       "      <td>0.106218</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>5</td>\n",
       "      <td>345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Victoria</td>\n",
       "      <td>0.109091</td>\n",
       "      <td>57.166667</td>\n",
       "      <td>6</td>\n",
       "      <td>343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Hyde Park Corner</td>\n",
       "      <td>0.109375</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Holborn</td>\n",
       "      <td>0.107050</td>\n",
       "      <td>42.750000</td>\n",
       "      <td>8</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Euston Square</td>\n",
       "      <td>0.104712</td>\n",
       "      <td>42.750000</td>\n",
       "      <td>8</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Embankment</td>\n",
       "      <td>0.102362</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>9</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Warren Street</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>9</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Piccadilly Circus</td>\n",
       "      <td>0.097625</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>9</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>St. James's Park</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>42.750000</td>\n",
       "      <td>8</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Tottenham Court Road</td>\n",
       "      <td>0.092838</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>9</td>\n",
       "      <td>342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Highbury &amp; Islington</td>\n",
       "      <td>0.093085</td>\n",
       "      <td>37.888889</td>\n",
       "      <td>9</td>\n",
       "      <td>341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Great Portland Street</td>\n",
       "      <td>0.090667</td>\n",
       "      <td>42.625000</td>\n",
       "      <td>8</td>\n",
       "      <td>341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Chancery Lane</td>\n",
       "      <td>0.088235</td>\n",
       "      <td>42.625000</td>\n",
       "      <td>8</td>\n",
       "      <td>341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Russell Square</td>\n",
       "      <td>0.085791</td>\n",
       "      <td>48.714286</td>\n",
       "      <td>7</td>\n",
       "      <td>341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>St. Paul's</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>56.833333</td>\n",
       "      <td>6</td>\n",
       "      <td>341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Regent's Park</td>\n",
       "      <td>0.080863</td>\n",
       "      <td>68.200000</td>\n",
       "      <td>5</td>\n",
       "      <td>341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Stratford</td>\n",
       "      <td>0.137838</td>\n",
       "      <td>45.571429</td>\n",
       "      <td>7</td>\n",
       "      <td>319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>London Bridge</td>\n",
       "      <td>0.195122</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>9</td>\n",
       "      <td>297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Marble Arch</td>\n",
       "      <td>0.195652</td>\n",
       "      <td>32.888889</td>\n",
       "      <td>9</td>\n",
       "      <td>296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Charing Cross</td>\n",
       "      <td>0.193460</td>\n",
       "      <td>32.888889</td>\n",
       "      <td>9</td>\n",
       "      <td>296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Shadwell</td>\n",
       "      <td>0.196721</td>\n",
       "      <td>29.400000</td>\n",
       "      <td>10</td>\n",
       "      <td>294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>South Hampstead</td>\n",
       "      <td>0.197260</td>\n",
       "      <td>29.300000</td>\n",
       "      <td>10</td>\n",
       "      <td>293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Southwark</td>\n",
       "      <td>0.195055</td>\n",
       "      <td>32.555556</td>\n",
       "      <td>9</td>\n",
       "      <td>293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Finchley Road</td>\n",
       "      <td>0.201102</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>10</td>\n",
       "      <td>290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Edgware Road</td>\n",
       "      <td>0.204420</td>\n",
       "      <td>26.181818</td>\n",
       "      <td>11</td>\n",
       "      <td>288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Tower Hill</td>\n",
       "      <td>0.207756</td>\n",
       "      <td>23.833333</td>\n",
       "      <td>12</td>\n",
       "      <td>286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Cannon Street</td>\n",
       "      <td>0.205556</td>\n",
       "      <td>23.833333</td>\n",
       "      <td>12</td>\n",
       "      <td>286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Caledonian Road</td>\n",
       "      <td>0.206128</td>\n",
       "      <td>23.750000</td>\n",
       "      <td>12</td>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Kennington</td>\n",
       "      <td>0.203911</td>\n",
       "      <td>20.357143</td>\n",
       "      <td>14</td>\n",
       "      <td>285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Sloane Square</td>\n",
       "      <td>0.204482</td>\n",
       "      <td>20.285714</td>\n",
       "      <td>14</td>\n",
       "      <td>284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Knightsbridge</td>\n",
       "      <td>0.205056</td>\n",
       "      <td>20.214286</td>\n",
       "      <td>14</td>\n",
       "      <td>283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Lambeth North</td>\n",
       "      <td>0.202817</td>\n",
       "      <td>20.214286</td>\n",
       "      <td>14</td>\n",
       "      <td>283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Leicester Square</td>\n",
       "      <td>0.200565</td>\n",
       "      <td>20.214286</td>\n",
       "      <td>14</td>\n",
       "      <td>283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Bethnal Green</td>\n",
       "      <td>0.201133</td>\n",
       "      <td>20.142857</td>\n",
       "      <td>14</td>\n",
       "      <td>282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Camden Town</td>\n",
       "      <td>0.198864</td>\n",
       "      <td>17.625000</td>\n",
       "      <td>16</td>\n",
       "      <td>282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Marylebone</td>\n",
       "      <td>0.196581</td>\n",
       "      <td>18.800000</td>\n",
       "      <td>15</td>\n",
       "      <td>282</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Node Removed  Isolation Rate       Ratio  \\\n",
       "0                 Green Park        0.000000  400.000000   \n",
       "1          Bank and Monument        0.000000  399.000000   \n",
       "2   King's Cross St. Pancras        0.000000  398.000000   \n",
       "3                Westminster        0.000000  397.000000   \n",
       "4                   Waterloo        0.000000  396.000000   \n",
       "5              Oxford Circus        0.000000  395.000000   \n",
       "6                Bond Street        0.000000  394.000000   \n",
       "7                 Farringdon        0.000000  393.000000   \n",
       "8                      Angel        0.000000  392.000000   \n",
       "9                   Moorgate        0.005115  129.666667   \n",
       "10          Liverpool Street        0.005128  129.333333   \n",
       "11                    Euston        0.102828   69.800000   \n",
       "12                  Barbican        0.100515   87.250000   \n",
       "13                Old Street        0.098191  116.333333   \n",
       "14              Baker Street        0.106218   69.000000   \n",
       "15                  Victoria        0.109091   57.166667   \n",
       "16          Hyde Park Corner        0.109375   57.000000   \n",
       "17                   Holborn        0.107050   42.750000   \n",
       "18             Euston Square        0.104712   42.750000   \n",
       "19                Embankment        0.102362   38.000000   \n",
       "20             Warren Street        0.100000   38.000000   \n",
       "21         Piccadilly Circus        0.097625   38.000000   \n",
       "22          St. James's Park        0.095238   42.750000   \n",
       "23      Tottenham Court Road        0.092838   38.000000   \n",
       "24      Highbury & Islington        0.093085   37.888889   \n",
       "25     Great Portland Street        0.090667   42.625000   \n",
       "26             Chancery Lane        0.088235   42.625000   \n",
       "27            Russell Square        0.085791   48.714286   \n",
       "28                St. Paul's        0.083333   56.833333   \n",
       "29             Regent's Park        0.080863   68.200000   \n",
       "30                 Stratford        0.137838   45.571429   \n",
       "31             London Bridge        0.195122   33.000000   \n",
       "32               Marble Arch        0.195652   32.888889   \n",
       "33             Charing Cross        0.193460   32.888889   \n",
       "34                  Shadwell        0.196721   29.400000   \n",
       "35           South Hampstead        0.197260   29.300000   \n",
       "36                 Southwark        0.195055   32.555556   \n",
       "37             Finchley Road        0.201102   29.000000   \n",
       "38              Edgware Road        0.204420   26.181818   \n",
       "39                Tower Hill        0.207756   23.833333   \n",
       "40             Cannon Street        0.205556   23.833333   \n",
       "41           Caledonian Road        0.206128   23.750000   \n",
       "42                Kennington        0.203911   20.357143   \n",
       "43             Sloane Square        0.204482   20.285714   \n",
       "44             Knightsbridge        0.205056   20.214286   \n",
       "45             Lambeth North        0.202817   20.214286   \n",
       "46          Leicester Square        0.200565   20.214286   \n",
       "47             Bethnal Green        0.201133   20.142857   \n",
       "48               Camden Town        0.198864   17.625000   \n",
       "49                Marylebone        0.196581   18.800000   \n",
       "\n",
       "    Num Connected Components  Largest CC Size  \n",
       "0                          1              400  \n",
       "1                          1              399  \n",
       "2                          1              398  \n",
       "3                          1              397  \n",
       "4                          1              396  \n",
       "5                          1              395  \n",
       "6                          1              394  \n",
       "7                          1              393  \n",
       "8                          1              392  \n",
       "9                          3              389  \n",
       "10                         3              388  \n",
       "11                         5              349  \n",
       "12                         4              349  \n",
       "13                         3              349  \n",
       "14                         5              345  \n",
       "15                         6              343  \n",
       "16                         6              342  \n",
       "17                         8              342  \n",
       "18                         8              342  \n",
       "19                         9              342  \n",
       "20                         9              342  \n",
       "21                         9              342  \n",
       "22                         8              342  \n",
       "23                         9              342  \n",
       "24                         9              341  \n",
       "25                         8              341  \n",
       "26                         8              341  \n",
       "27                         7              341  \n",
       "28                         6              341  \n",
       "29                         5              341  \n",
       "30                         7              319  \n",
       "31                         9              297  \n",
       "32                         9              296  \n",
       "33                         9              296  \n",
       "34                        10              294  \n",
       "35                        10              293  \n",
       "36                         9              293  \n",
       "37                        10              290  \n",
       "38                        11              288  \n",
       "39                        12              286  \n",
       "40                        12              286  \n",
       "41                        12              285  \n",
       "42                        14              285  \n",
       "43                        14              284  \n",
       "44                        14              283  \n",
       "45                        14              283  \n",
       "46                        14              283  \n",
       "47                        14              282  \n",
       "48                        16              282  \n",
       "49                        15              282  "
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G_topclos_rem = G.copy()\n",
    "results_topclos_rem = remove_nodes_by_centrality3(G_topclos_rem, nx.closeness_centrality, num_nodes_to_remove=50)\n",
    "results_topclos_rem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "6772b207",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Node Removed</th>\n",
       "      <th>Isolation Rate</th>\n",
       "      <th>Ratio</th>\n",
       "      <th>Num Connected Components</th>\n",
       "      <th>Largest CC Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Liverpool Street</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Stratford</td>\n",
       "      <td>0.052764</td>\n",
       "      <td>125.666667</td>\n",
       "      <td>3</td>\n",
       "      <td>377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Waterloo</td>\n",
       "      <td>0.052897</td>\n",
       "      <td>125.333333</td>\n",
       "      <td>3</td>\n",
       "      <td>376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Moorgate</td>\n",
       "      <td>0.053030</td>\n",
       "      <td>125.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Green Park</td>\n",
       "      <td>0.053165</td>\n",
       "      <td>124.666667</td>\n",
       "      <td>3</td>\n",
       "      <td>374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Oxford Circus</td>\n",
       "      <td>0.053299</td>\n",
       "      <td>124.333333</td>\n",
       "      <td>3</td>\n",
       "      <td>373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Tower Hill</td>\n",
       "      <td>0.055980</td>\n",
       "      <td>92.750000</td>\n",
       "      <td>4</td>\n",
       "      <td>371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Westminster</td>\n",
       "      <td>0.056122</td>\n",
       "      <td>92.500000</td>\n",
       "      <td>4</td>\n",
       "      <td>370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Shadwell</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>73.600000</td>\n",
       "      <td>5</td>\n",
       "      <td>368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Aldgate East</td>\n",
       "      <td>0.058974</td>\n",
       "      <td>73.400000</td>\n",
       "      <td>5</td>\n",
       "      <td>367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>London Bridge</td>\n",
       "      <td>0.061697</td>\n",
       "      <td>60.833333</td>\n",
       "      <td>6</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Piccadilly Circus</td>\n",
       "      <td>0.061856</td>\n",
       "      <td>60.666667</td>\n",
       "      <td>6</td>\n",
       "      <td>364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Embankment</td>\n",
       "      <td>0.072351</td>\n",
       "      <td>51.285714</td>\n",
       "      <td>7</td>\n",
       "      <td>359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>West Ham</td>\n",
       "      <td>0.077720</td>\n",
       "      <td>44.500000</td>\n",
       "      <td>8</td>\n",
       "      <td>356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Bond Street</td>\n",
       "      <td>0.077922</td>\n",
       "      <td>44.375000</td>\n",
       "      <td>8</td>\n",
       "      <td>355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Mile End</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>39.111111</td>\n",
       "      <td>9</td>\n",
       "      <td>352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Aldgate</td>\n",
       "      <td>0.080940</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>8</td>\n",
       "      <td>352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Bethnal Green</td>\n",
       "      <td>0.081152</td>\n",
       "      <td>43.875000</td>\n",
       "      <td>8</td>\n",
       "      <td>351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>St. Paul's</td>\n",
       "      <td>0.081365</td>\n",
       "      <td>43.750000</td>\n",
       "      <td>8</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Cannon Street</td>\n",
       "      <td>0.078947</td>\n",
       "      <td>43.750000</td>\n",
       "      <td>8</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Whitechapel</td>\n",
       "      <td>0.081794</td>\n",
       "      <td>38.666667</td>\n",
       "      <td>9</td>\n",
       "      <td>348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Southwark</td>\n",
       "      <td>0.079365</td>\n",
       "      <td>43.500000</td>\n",
       "      <td>8</td>\n",
       "      <td>348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Charing Cross</td>\n",
       "      <td>0.079576</td>\n",
       "      <td>43.375000</td>\n",
       "      <td>8</td>\n",
       "      <td>347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Leicester Square</td>\n",
       "      <td>0.079787</td>\n",
       "      <td>43.250000</td>\n",
       "      <td>8</td>\n",
       "      <td>346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Tottenham Court Road</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>43.125000</td>\n",
       "      <td>8</td>\n",
       "      <td>345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Baker Street</td>\n",
       "      <td>0.082888</td>\n",
       "      <td>38.111111</td>\n",
       "      <td>9</td>\n",
       "      <td>343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Kennington</td>\n",
       "      <td>0.096515</td>\n",
       "      <td>30.636364</td>\n",
       "      <td>11</td>\n",
       "      <td>337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Stratford High Street</td>\n",
       "      <td>0.094086</td>\n",
       "      <td>30.636364</td>\n",
       "      <td>11</td>\n",
       "      <td>337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Lambeth North</td>\n",
       "      <td>0.091644</td>\n",
       "      <td>30.636364</td>\n",
       "      <td>11</td>\n",
       "      <td>337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Victoria</td>\n",
       "      <td>0.132432</td>\n",
       "      <td>24.692308</td>\n",
       "      <td>13</td>\n",
       "      <td>321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Leyton</td>\n",
       "      <td>0.130081</td>\n",
       "      <td>24.692308</td>\n",
       "      <td>13</td>\n",
       "      <td>321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Hackney Wick</td>\n",
       "      <td>0.130435</td>\n",
       "      <td>24.615385</td>\n",
       "      <td>13</td>\n",
       "      <td>320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Pudding Mill Lane</td>\n",
       "      <td>0.130790</td>\n",
       "      <td>24.538462</td>\n",
       "      <td>13</td>\n",
       "      <td>319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>0.131148</td>\n",
       "      <td>24.461538</td>\n",
       "      <td>13</td>\n",
       "      <td>318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Regent's Park</td>\n",
       "      <td>0.128767</td>\n",
       "      <td>26.500000</td>\n",
       "      <td>12</td>\n",
       "      <td>318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Canning Town</td>\n",
       "      <td>0.167582</td>\n",
       "      <td>20.200000</td>\n",
       "      <td>15</td>\n",
       "      <td>303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Stratford International</td>\n",
       "      <td>0.165289</td>\n",
       "      <td>21.642857</td>\n",
       "      <td>14</td>\n",
       "      <td>303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Warren Street</td>\n",
       "      <td>0.168508</td>\n",
       "      <td>20.066667</td>\n",
       "      <td>15</td>\n",
       "      <td>301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>St. James's Park</td>\n",
       "      <td>0.166205</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>14</td>\n",
       "      <td>301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Barbican</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>21.428571</td>\n",
       "      <td>14</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Old Street</td>\n",
       "      <td>0.167131</td>\n",
       "      <td>21.357143</td>\n",
       "      <td>14</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Stepney Green</td>\n",
       "      <td>0.164804</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>13</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Elephant &amp; Castle</td>\n",
       "      <td>0.162465</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>13</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>0.160112</td>\n",
       "      <td>24.916667</td>\n",
       "      <td>12</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Hyde Park Corner</td>\n",
       "      <td>0.160563</td>\n",
       "      <td>24.833333</td>\n",
       "      <td>12</td>\n",
       "      <td>298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Borough</td>\n",
       "      <td>0.158192</td>\n",
       "      <td>27.090909</td>\n",
       "      <td>11</td>\n",
       "      <td>298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Star Lane</td>\n",
       "      <td>0.155807</td>\n",
       "      <td>29.800000</td>\n",
       "      <td>10</td>\n",
       "      <td>298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Holborn</td>\n",
       "      <td>0.161932</td>\n",
       "      <td>24.583333</td>\n",
       "      <td>12</td>\n",
       "      <td>295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Bromley-by-Bow</td>\n",
       "      <td>0.159544</td>\n",
       "      <td>24.583333</td>\n",
       "      <td>12</td>\n",
       "      <td>295</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Node Removed  Isolation Rate       Ratio  \\\n",
       "0         Bank and Monument        0.000000  400.000000   \n",
       "1          Liverpool Street        0.000000  399.000000   \n",
       "2                 Stratford        0.052764  125.666667   \n",
       "3                  Waterloo        0.052897  125.333333   \n",
       "4                  Moorgate        0.053030  125.000000   \n",
       "5                Green Park        0.053165  124.666667   \n",
       "6             Oxford Circus        0.053299  124.333333   \n",
       "7                Tower Hill        0.055980   92.750000   \n",
       "8               Westminster        0.056122   92.500000   \n",
       "9                  Shadwell        0.058824   73.600000   \n",
       "10             Aldgate East        0.058974   73.400000   \n",
       "11            London Bridge        0.061697   60.833333   \n",
       "12        Piccadilly Circus        0.061856   60.666667   \n",
       "13               Embankment        0.072351   51.285714   \n",
       "14                 West Ham        0.077720   44.500000   \n",
       "15              Bond Street        0.077922   44.375000   \n",
       "16                 Mile End        0.083333   39.111111   \n",
       "17                  Aldgate        0.080940   44.000000   \n",
       "18            Bethnal Green        0.081152   43.875000   \n",
       "19               St. Paul's        0.081365   43.750000   \n",
       "20            Cannon Street        0.078947   43.750000   \n",
       "21              Whitechapel        0.081794   38.666667   \n",
       "22                Southwark        0.079365   43.500000   \n",
       "23            Charing Cross        0.079576   43.375000   \n",
       "24         Leicester Square        0.079787   43.250000   \n",
       "25     Tottenham Court Road        0.080000   43.125000   \n",
       "26             Baker Street        0.082888   38.111111   \n",
       "27               Kennington        0.096515   30.636364   \n",
       "28    Stratford High Street        0.094086   30.636364   \n",
       "29            Lambeth North        0.091644   30.636364   \n",
       "30                 Victoria        0.132432   24.692308   \n",
       "31                   Leyton        0.130081   24.692308   \n",
       "32             Hackney Wick        0.130435   24.615385   \n",
       "33        Pudding Mill Lane        0.130790   24.538462   \n",
       "34                 Maryland        0.131148   24.461538   \n",
       "35            Regent's Park        0.128767   26.500000   \n",
       "36             Canning Town        0.167582   20.200000   \n",
       "37  Stratford International        0.165289   21.642857   \n",
       "38            Warren Street        0.168508   20.066667   \n",
       "39         St. James's Park        0.166205   21.500000   \n",
       "40                 Barbican        0.166667   21.428571   \n",
       "41               Old Street        0.167131   21.357143   \n",
       "42            Stepney Green        0.164804   23.000000   \n",
       "43        Elephant & Castle        0.162465   23.000000   \n",
       "44               Abbey Road        0.160112   24.916667   \n",
       "45         Hyde Park Corner        0.160563   24.833333   \n",
       "46                  Borough        0.158192   27.090909   \n",
       "47                Star Lane        0.155807   29.800000   \n",
       "48                  Holborn        0.161932   24.583333   \n",
       "49           Bromley-by-Bow        0.159544   24.583333   \n",
       "\n",
       "    Num Connected Components  Largest CC Size  \n",
       "0                          1              400  \n",
       "1                          1              399  \n",
       "2                          3              377  \n",
       "3                          3              376  \n",
       "4                          3              375  \n",
       "5                          3              374  \n",
       "6                          3              373  \n",
       "7                          4              371  \n",
       "8                          4              370  \n",
       "9                          5              368  \n",
       "10                         5              367  \n",
       "11                         6              365  \n",
       "12                         6              364  \n",
       "13                         7              359  \n",
       "14                         8              356  \n",
       "15                         8              355  \n",
       "16                         9              352  \n",
       "17                         8              352  \n",
       "18                         8              351  \n",
       "19                         8              350  \n",
       "20                         8              350  \n",
       "21                         9              348  \n",
       "22                         8              348  \n",
       "23                         8              347  \n",
       "24                         8              346  \n",
       "25                         8              345  \n",
       "26                         9              343  \n",
       "27                        11              337  \n",
       "28                        11              337  \n",
       "29                        11              337  \n",
       "30                        13              321  \n",
       "31                        13              321  \n",
       "32                        13              320  \n",
       "33                        13              319  \n",
       "34                        13              318  \n",
       "35                        12              318  \n",
       "36                        15              303  \n",
       "37                        14              303  \n",
       "38                        15              301  \n",
       "39                        14              301  \n",
       "40                        14              300  \n",
       "41                        14              299  \n",
       "42                        13              299  \n",
       "43                        13              299  \n",
       "44                        12              299  \n",
       "45                        12              298  \n",
       "46                        11              298  \n",
       "47                        10              298  \n",
       "48                        12              295  \n",
       "49                        12              295  "
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G_topeig_rem = G.copy()\n",
    "results_topeig_rem = remove_nodes_by_centrality3(G_topeig_rem, nx.eigenvector_centrality, num_nodes_to_remove=50, max_iter=500)\n",
    "results_topeig_rem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "200092cd-7b18-410b-b586-ae2cbe7fba71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extract data from the DataFrames\n",
    "isolation_rate_bet = results_topbet_rem['Isolation Rate']\n",
    "isolation_rate_clos = results_topclos_rem['Isolation Rate']\n",
    "isolation_rate_eig = results_topeig_rem['Isolation Rate']\n",
    "\n",
    "ratio_bet = results_topbet_rem['Ratio']\n",
    "ratio_clos = results_topclos_rem['Ratio']\n",
    "ratio_eig = results_topeig_rem['Ratio']\n",
    "\n",
    "# Set up the plot\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n",
    "\n",
    "# Plot the isolation rate\n",
    "ax1.plot(isolation_rate_bet, label='Betweenness Centrality')\n",
    "ax1.plot(isolation_rate_clos, label='Closeness Centrality')\n",
    "ax1.plot(isolation_rate_eig, label='Eigenvector Centrality')\n",
    "ax1.set_title('Isolation Rate')\n",
    "ax1.set_xlabel('Number of Nodes Removed')\n",
    "ax1.set_ylabel('Isolation Rate')\n",
    "ax1.legend()\n",
    "\n",
    "# Plot the ratio\n",
    "ax2.plot(ratio_bet, label='Betweenness Centrality')\n",
    "ax2.plot(ratio_clos, label='Closeness Centrality')\n",
    "ax2.plot(ratio_eig, label='Eigenvector Centrality')\n",
    "ax2.set_title('Ratio of Size of Largest Connected Component to Number of Connected Components')\n",
    "ax2.set_xlabel('Number of Nodes Removed')\n",
    "ax2.set_ylabel('Ratio')\n",
    "ax2.legend()\n",
    "\n",
    "# Add title\n",
    "fig.suptitle('Non-sequential Node Removal', fontsize=20)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f43d199-c6e2-462e-9acd-139d74fddf75",
   "metadata": {},
   "source": [
    "#### Removing Nodes and Assessing: Sequential"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "a1f23757-d45f-44a7-831f-8d0e1af8c521",
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_nodes_by_centrality_sequential2(G, centrality_function, num_nodes_to_remove=10, **kwargs):\n",
    "    # Create a copy of the graph\n",
    "    G_copy = G.copy()\n",
    "\n",
    "    # Initialize the results list\n",
    "    results = []\n",
    "\n",
    "    # Remove the highest ranked nodes one by one and record the measurements\n",
    "    for i in range(num_nodes_to_remove):\n",
    "        # Calculate the centrality measure for the current graph\n",
    "        current_centrality_measure = centrality_function(G_copy, **kwargs)\n",
    "\n",
    "        # Get the node with the highest centrality\n",
    "        node_to_remove = max(current_centrality_measure, key=current_centrality_measure.get)\n",
    "\n",
    "        # Remove the node\n",
    "        G_copy.remove_node(node_to_remove)\n",
    "\n",
    "        # Get the connected components\n",
    "        connected_components = list(nx.connected_components(G_copy))\n",
    "        num_connected_components = len(connected_components)\n",
    "\n",
    "        # Get the largest connected component\n",
    "        largest_cc = max(nx.connected_components(G_copy), key=len)\n",
    "        largest_cc_size = len(largest_cc)\n",
    "\n",
    "        # Identify the isolated components (all components excluding the largest)\n",
    "        isolated_components = [comp for comp in connected_components if comp != largest_cc]\n",
    "\n",
    "        # Count the total number of nodes in the isolated components\n",
    "        total_nodes_in_isolated_components = sum(len(comp) for comp in isolated_components)\n",
    "\n",
    "        # Calculate the isolation rate as the proportion of nodes in isolated components out of all nodes\n",
    "        isolation_rate = total_nodes_in_isolated_components / nx.number_of_nodes(G_copy)\n",
    "\n",
    "        # Calculate the ratio of the size of the giant connected component to the number of connected components\n",
    "        ratio = largest_cc_size / num_connected_components\n",
    "\n",
    "        results.append({\"Node Removed\": node_to_remove, \"Isolation Rate\": isolation_rate, \"Ratio\": ratio, \"Num Connected Components\": num_connected_components, \"Largest CC Size\": largest_cc_size})\n",
    "\n",
    "    return pd.DataFrame(results)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "1ffac406-27f1-475b-a664-2647312171e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "G_topbet_rem2 = G.copy()\n",
    "results_topbet_rem2 = remove_nodes_by_centrality_sequential2(G_topbet_rem2, nx.betweenness_centrality, num_nodes_to_remove=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "27b78a2e-bcb4-4aa8-a5c9-6ef47f2ab2fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Node Removed</th>\n",
       "      <th>Isolation Rate</th>\n",
       "      <th>Ratio</th>\n",
       "      <th>Num Connected Components</th>\n",
       "      <th>Largest CC Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Stratford</td>\n",
       "      <td>0.052500</td>\n",
       "      <td>126.333333</td>\n",
       "      <td>3</td>\n",
       "      <td>379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>King's Cross St. Pancras</td>\n",
       "      <td>0.052632</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Waterloo</td>\n",
       "      <td>0.052764</td>\n",
       "      <td>125.666667</td>\n",
       "      <td>3</td>\n",
       "      <td>377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0.052897</td>\n",
       "      <td>125.333333</td>\n",
       "      <td>3</td>\n",
       "      <td>376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Canada Water</td>\n",
       "      <td>0.053030</td>\n",
       "      <td>125.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>West Hampstead</td>\n",
       "      <td>0.425316</td>\n",
       "      <td>56.750000</td>\n",
       "      <td>4</td>\n",
       "      <td>227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Earl's Court</td>\n",
       "      <td>0.426396</td>\n",
       "      <td>56.500000</td>\n",
       "      <td>4</td>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Shepherd's Bush</td>\n",
       "      <td>0.501272</td>\n",
       "      <td>39.200000</td>\n",
       "      <td>5</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Euston</td>\n",
       "      <td>0.558673</td>\n",
       "      <td>28.833333</td>\n",
       "      <td>6</td>\n",
       "      <td>173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Baker Street</td>\n",
       "      <td>0.565217</td>\n",
       "      <td>24.285714</td>\n",
       "      <td>7</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Acton Town</td>\n",
       "      <td>0.623077</td>\n",
       "      <td>16.333333</td>\n",
       "      <td>9</td>\n",
       "      <td>147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>West Ham</td>\n",
       "      <td>0.629820</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>10</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Whitechapel</td>\n",
       "      <td>0.731959</td>\n",
       "      <td>9.454545</td>\n",
       "      <td>11</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Paddington</td>\n",
       "      <td>0.739018</td>\n",
       "      <td>7.769231</td>\n",
       "      <td>13</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Blackhorse Road</td>\n",
       "      <td>0.818653</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Seven Sisters</td>\n",
       "      <td>0.849351</td>\n",
       "      <td>3.411765</td>\n",
       "      <td>17</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Harrow-on-the-Hill</td>\n",
       "      <td>0.848958</td>\n",
       "      <td>3.052632</td>\n",
       "      <td>19</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Victoria</td>\n",
       "      <td>0.887728</td>\n",
       "      <td>2.150000</td>\n",
       "      <td>20</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Willesden Junction</td>\n",
       "      <td>0.890052</td>\n",
       "      <td>1.826087</td>\n",
       "      <td>23</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Canning Town</td>\n",
       "      <td>0.910761</td>\n",
       "      <td>1.307692</td>\n",
       "      <td>26</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Highbury &amp; Islington</td>\n",
       "      <td>0.910526</td>\n",
       "      <td>1.214286</td>\n",
       "      <td>28</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Romford</td>\n",
       "      <td>0.910290</td>\n",
       "      <td>1.133333</td>\n",
       "      <td>30</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Green Park</td>\n",
       "      <td>0.912698</td>\n",
       "      <td>1.100000</td>\n",
       "      <td>30</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Oxford Circus</td>\n",
       "      <td>0.923077</td>\n",
       "      <td>0.906250</td>\n",
       "      <td>32</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Wandsworth Road</td>\n",
       "      <td>0.928191</td>\n",
       "      <td>0.794118</td>\n",
       "      <td>34</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Bethnal Green</td>\n",
       "      <td>0.928000</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>36</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>0.927807</td>\n",
       "      <td>0.710526</td>\n",
       "      <td>38</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>North Ealing</td>\n",
       "      <td>0.938338</td>\n",
       "      <td>0.589744</td>\n",
       "      <td>39</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Stockwell</td>\n",
       "      <td>0.940860</td>\n",
       "      <td>0.523810</td>\n",
       "      <td>42</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Camden Town</td>\n",
       "      <td>0.946092</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>44</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Hammersmith</td>\n",
       "      <td>0.945946</td>\n",
       "      <td>0.434783</td>\n",
       "      <td>46</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Woodford</td>\n",
       "      <td>0.951220</td>\n",
       "      <td>0.382979</td>\n",
       "      <td>47</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Barking</td>\n",
       "      <td>0.951087</td>\n",
       "      <td>0.367347</td>\n",
       "      <td>49</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Embankment</td>\n",
       "      <td>0.956403</td>\n",
       "      <td>0.313725</td>\n",
       "      <td>51</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Wembley Park</td>\n",
       "      <td>0.956284</td>\n",
       "      <td>0.296296</td>\n",
       "      <td>54</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Poplar</td>\n",
       "      <td>0.956164</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>56</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Brockley</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>0.245614</td>\n",
       "      <td>57</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Notting Hill Gate</td>\n",
       "      <td>0.961433</td>\n",
       "      <td>0.233333</td>\n",
       "      <td>60</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Gants Hill</td>\n",
       "      <td>0.964088</td>\n",
       "      <td>0.213115</td>\n",
       "      <td>61</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Rayners Lane</td>\n",
       "      <td>0.963989</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>63</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>North Acton</td>\n",
       "      <td>0.963889</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>65</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Moor Park</td>\n",
       "      <td>0.963788</td>\n",
       "      <td>0.194030</td>\n",
       "      <td>67</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Harrow &amp; Wealdstone</td>\n",
       "      <td>0.966480</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>68</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Hackney Downs</td>\n",
       "      <td>0.966387</td>\n",
       "      <td>0.171429</td>\n",
       "      <td>70</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Turnpike Lane</td>\n",
       "      <td>0.969101</td>\n",
       "      <td>0.154930</td>\n",
       "      <td>71</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Finchley Central</td>\n",
       "      <td>0.969014</td>\n",
       "      <td>0.150685</td>\n",
       "      <td>73</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Edmonton Green</td>\n",
       "      <td>0.968927</td>\n",
       "      <td>0.146667</td>\n",
       "      <td>75</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Gospel Oak</td>\n",
       "      <td>0.968839</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>77</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Parsons Green</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>0.141026</td>\n",
       "      <td>78</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Hounslow Central</td>\n",
       "      <td>0.968661</td>\n",
       "      <td>0.139241</td>\n",
       "      <td>79</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Node Removed  Isolation Rate       Ratio  \\\n",
       "0                  Stratford        0.052500  126.333333   \n",
       "1   King's Cross St. Pancras        0.052632  126.000000   \n",
       "2                   Waterloo        0.052764  125.666667   \n",
       "3          Bank and Monument        0.052897  125.333333   \n",
       "4               Canada Water        0.053030  125.000000   \n",
       "5             West Hampstead        0.425316   56.750000   \n",
       "6               Earl's Court        0.426396   56.500000   \n",
       "7            Shepherd's Bush        0.501272   39.200000   \n",
       "8                     Euston        0.558673   28.833333   \n",
       "9               Baker Street        0.565217   24.285714   \n",
       "10                Acton Town        0.623077   16.333333   \n",
       "11                  West Ham        0.629820   14.400000   \n",
       "12               Whitechapel        0.731959    9.454545   \n",
       "13                Paddington        0.739018    7.769231   \n",
       "14           Blackhorse Road        0.818653    5.000000   \n",
       "15             Seven Sisters        0.849351    3.411765   \n",
       "16        Harrow-on-the-Hill        0.848958    3.052632   \n",
       "17                  Victoria        0.887728    2.150000   \n",
       "18        Willesden Junction        0.890052    1.826087   \n",
       "19              Canning Town        0.910761    1.307692   \n",
       "20      Highbury & Islington        0.910526    1.214286   \n",
       "21                   Romford        0.910290    1.133333   \n",
       "22                Green Park        0.912698    1.100000   \n",
       "23             Oxford Circus        0.923077    0.906250   \n",
       "24           Wandsworth Road        0.928191    0.794118   \n",
       "25             Bethnal Green        0.928000    0.750000   \n",
       "26              Canary Wharf        0.927807    0.710526   \n",
       "27              North Ealing        0.938338    0.589744   \n",
       "28                 Stockwell        0.940860    0.523810   \n",
       "29               Camden Town        0.946092    0.454545   \n",
       "30               Hammersmith        0.945946    0.434783   \n",
       "31                  Woodford        0.951220    0.382979   \n",
       "32                   Barking        0.951087    0.367347   \n",
       "33                Embankment        0.956403    0.313725   \n",
       "34              Wembley Park        0.956284    0.296296   \n",
       "35                    Poplar        0.956164    0.285714   \n",
       "36                  Brockley        0.961538    0.245614   \n",
       "37         Notting Hill Gate        0.961433    0.233333   \n",
       "38                Gants Hill        0.964088    0.213115   \n",
       "39              Rayners Lane        0.963989    0.206349   \n",
       "40               North Acton        0.963889    0.200000   \n",
       "41                 Moor Park        0.963788    0.194030   \n",
       "42       Harrow & Wealdstone        0.966480    0.176471   \n",
       "43             Hackney Downs        0.966387    0.171429   \n",
       "44             Turnpike Lane        0.969101    0.154930   \n",
       "45          Finchley Central        0.969014    0.150685   \n",
       "46            Edmonton Green        0.968927    0.146667   \n",
       "47                Gospel Oak        0.968839    0.142857   \n",
       "48             Parsons Green        0.968750    0.141026   \n",
       "49          Hounslow Central        0.968661    0.139241   \n",
       "\n",
       "    Num Connected Components  Largest CC Size  \n",
       "0                          3              379  \n",
       "1                          3              378  \n",
       "2                          3              377  \n",
       "3                          3              376  \n",
       "4                          3              375  \n",
       "5                          4              227  \n",
       "6                          4              226  \n",
       "7                          5              196  \n",
       "8                          6              173  \n",
       "9                          7              170  \n",
       "10                         9              147  \n",
       "11                        10              144  \n",
       "12                        11              104  \n",
       "13                        13              101  \n",
       "14                        14               70  \n",
       "15                        17               58  \n",
       "16                        19               58  \n",
       "17                        20               43  \n",
       "18                        23               42  \n",
       "19                        26               34  \n",
       "20                        28               34  \n",
       "21                        30               34  \n",
       "22                        30               33  \n",
       "23                        32               29  \n",
       "24                        34               27  \n",
       "25                        36               27  \n",
       "26                        38               27  \n",
       "27                        39               23  \n",
       "28                        42               22  \n",
       "29                        44               20  \n",
       "30                        46               20  \n",
       "31                        47               18  \n",
       "32                        49               18  \n",
       "33                        51               16  \n",
       "34                        54               16  \n",
       "35                        56               16  \n",
       "36                        57               14  \n",
       "37                        60               14  \n",
       "38                        61               13  \n",
       "39                        63               13  \n",
       "40                        65               13  \n",
       "41                        67               13  \n",
       "42                        68               12  \n",
       "43                        70               12  \n",
       "44                        71               11  \n",
       "45                        73               11  \n",
       "46                        75               11  \n",
       "47                        77               11  \n",
       "48                        78               11  \n",
       "49                        79               11  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_topbet_rem2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "2b2e1dd4-99fc-4adc-bc32-43d651513f19",
   "metadata": {},
   "outputs": [],
   "source": [
    "G_topclos_rem2 = G.copy()\n",
    "results_topclos_rem2 = remove_nodes_by_centrality_sequential2(G_topclos_rem2, nx.closeness_centrality, num_nodes_to_remove=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "2f0b2c30-bdce-4fac-a7d3-503a078b9213",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Node Removed</th>\n",
       "      <th>Isolation Rate</th>\n",
       "      <th>Ratio</th>\n",
       "      <th>Num Connected Components</th>\n",
       "      <th>Largest CC Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Green Park</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>King's Cross St. Pancras</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Waterloo</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>398.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>397.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>West Hampstead</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>396.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Canada Water</td>\n",
       "      <td>0.427848</td>\n",
       "      <td>113.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Stratford</td>\n",
       "      <td>0.426396</td>\n",
       "      <td>56.500000</td>\n",
       "      <td>4</td>\n",
       "      <td>226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Earl's Court</td>\n",
       "      <td>0.427481</td>\n",
       "      <td>56.250000</td>\n",
       "      <td>4</td>\n",
       "      <td>225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Shepherd's Bush</td>\n",
       "      <td>0.502551</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>5</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Oxford Circus</td>\n",
       "      <td>0.503836</td>\n",
       "      <td>38.800000</td>\n",
       "      <td>5</td>\n",
       "      <td>194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Paddington</td>\n",
       "      <td>0.505128</td>\n",
       "      <td>38.600000</td>\n",
       "      <td>5</td>\n",
       "      <td>193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Mile End</td>\n",
       "      <td>0.503856</td>\n",
       "      <td>38.600000</td>\n",
       "      <td>5</td>\n",
       "      <td>193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Willesden Junction</td>\n",
       "      <td>0.546392</td>\n",
       "      <td>25.142857</td>\n",
       "      <td>7</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Barking</td>\n",
       "      <td>0.545220</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>8</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Whitechapel</td>\n",
       "      <td>0.544041</td>\n",
       "      <td>17.600000</td>\n",
       "      <td>10</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Seven Sisters</td>\n",
       "      <td>0.542857</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Baker Street</td>\n",
       "      <td>0.778646</td>\n",
       "      <td>5.666667</td>\n",
       "      <td>15</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Canning Town</td>\n",
       "      <td>0.778068</td>\n",
       "      <td>4.722222</td>\n",
       "      <td>18</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Ealing Common</td>\n",
       "      <td>0.777487</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>20</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Embankment</td>\n",
       "      <td>0.839895</td>\n",
       "      <td>2.772727</td>\n",
       "      <td>22</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Camden Town</td>\n",
       "      <td>0.839474</td>\n",
       "      <td>2.541667</td>\n",
       "      <td>24</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Harrow-on-the-Hill</td>\n",
       "      <td>0.839050</td>\n",
       "      <td>2.346154</td>\n",
       "      <td>26</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Harringay Green Lanes</td>\n",
       "      <td>0.896825</td>\n",
       "      <td>1.444444</td>\n",
       "      <td>27</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Highbury &amp; Islington</td>\n",
       "      <td>0.896552</td>\n",
       "      <td>1.344828</td>\n",
       "      <td>29</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Stockwell</td>\n",
       "      <td>0.917553</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>32</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Turnham Green</td>\n",
       "      <td>0.920000</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>34</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Hackney Downs</td>\n",
       "      <td>0.922460</td>\n",
       "      <td>0.805556</td>\n",
       "      <td>36</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>West India Quay</td>\n",
       "      <td>0.922252</td>\n",
       "      <td>0.783784</td>\n",
       "      <td>37</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Wembley Park</td>\n",
       "      <td>0.922043</td>\n",
       "      <td>0.725000</td>\n",
       "      <td>40</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Liverpool Street</td>\n",
       "      <td>0.921833</td>\n",
       "      <td>0.690476</td>\n",
       "      <td>42</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Woodford</td>\n",
       "      <td>0.921622</td>\n",
       "      <td>0.674419</td>\n",
       "      <td>43</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Blackhorse Road</td>\n",
       "      <td>0.921409</td>\n",
       "      <td>0.630435</td>\n",
       "      <td>46</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Warren Street</td>\n",
       "      <td>0.921196</td>\n",
       "      <td>0.617021</td>\n",
       "      <td>47</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Gloucester Road</td>\n",
       "      <td>0.920981</td>\n",
       "      <td>0.604167</td>\n",
       "      <td>48</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Tottenham Court Road</td>\n",
       "      <td>0.920765</td>\n",
       "      <td>0.591837</td>\n",
       "      <td>49</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>West Ham</td>\n",
       "      <td>0.920548</td>\n",
       "      <td>0.557692</td>\n",
       "      <td>52</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Romford</td>\n",
       "      <td>0.920330</td>\n",
       "      <td>0.537037</td>\n",
       "      <td>54</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Poplar</td>\n",
       "      <td>0.920110</td>\n",
       "      <td>0.517857</td>\n",
       "      <td>56</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Elephant &amp; Castle</td>\n",
       "      <td>0.919890</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>58</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Moor Park</td>\n",
       "      <td>0.919668</td>\n",
       "      <td>0.483333</td>\n",
       "      <td>60</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Denmark Hill</td>\n",
       "      <td>0.961111</td>\n",
       "      <td>0.229508</td>\n",
       "      <td>61</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Edmonton Green</td>\n",
       "      <td>0.961003</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>63</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Gospel Oak</td>\n",
       "      <td>0.960894</td>\n",
       "      <td>0.215385</td>\n",
       "      <td>65</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Victoria</td>\n",
       "      <td>0.960784</td>\n",
       "      <td>0.208955</td>\n",
       "      <td>67</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Rayners Lane</td>\n",
       "      <td>0.960674</td>\n",
       "      <td>0.202899</td>\n",
       "      <td>69</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>West Brompton</td>\n",
       "      <td>0.960563</td>\n",
       "      <td>0.197183</td>\n",
       "      <td>71</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Honor Oak Park</td>\n",
       "      <td>0.960452</td>\n",
       "      <td>0.194444</td>\n",
       "      <td>72</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Finchley Central</td>\n",
       "      <td>0.960340</td>\n",
       "      <td>0.189189</td>\n",
       "      <td>74</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Goldhawk Road</td>\n",
       "      <td>0.960227</td>\n",
       "      <td>0.186667</td>\n",
       "      <td>75</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Perivale</td>\n",
       "      <td>0.960114</td>\n",
       "      <td>0.184211</td>\n",
       "      <td>76</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Node Removed  Isolation Rate       Ratio  \\\n",
       "0                 Green Park        0.000000  400.000000   \n",
       "1   King's Cross St. Pancras        0.000000  399.000000   \n",
       "2                   Waterloo        0.000000  398.000000   \n",
       "3          Bank and Monument        0.000000  397.000000   \n",
       "4             West Hampstead        0.000000  396.000000   \n",
       "5               Canada Water        0.427848  113.000000   \n",
       "6                  Stratford        0.426396   56.500000   \n",
       "7               Earl's Court        0.427481   56.250000   \n",
       "8            Shepherd's Bush        0.502551   39.000000   \n",
       "9              Oxford Circus        0.503836   38.800000   \n",
       "10                Paddington        0.505128   38.600000   \n",
       "11                  Mile End        0.503856   38.600000   \n",
       "12        Willesden Junction        0.546392   25.142857   \n",
       "13                   Barking        0.545220   22.000000   \n",
       "14               Whitechapel        0.544041   17.600000   \n",
       "15             Seven Sisters        0.542857   16.000000   \n",
       "16              Baker Street        0.778646    5.666667   \n",
       "17              Canning Town        0.778068    4.722222   \n",
       "18             Ealing Common        0.777487    4.250000   \n",
       "19                Embankment        0.839895    2.772727   \n",
       "20               Camden Town        0.839474    2.541667   \n",
       "21        Harrow-on-the-Hill        0.839050    2.346154   \n",
       "22     Harringay Green Lanes        0.896825    1.444444   \n",
       "23      Highbury & Islington        0.896552    1.344828   \n",
       "24                 Stockwell        0.917553    0.968750   \n",
       "25             Turnham Green        0.920000    0.882353   \n",
       "26             Hackney Downs        0.922460    0.805556   \n",
       "27           West India Quay        0.922252    0.783784   \n",
       "28              Wembley Park        0.922043    0.725000   \n",
       "29          Liverpool Street        0.921833    0.690476   \n",
       "30                  Woodford        0.921622    0.674419   \n",
       "31           Blackhorse Road        0.921409    0.630435   \n",
       "32             Warren Street        0.921196    0.617021   \n",
       "33           Gloucester Road        0.920981    0.604167   \n",
       "34      Tottenham Court Road        0.920765    0.591837   \n",
       "35                  West Ham        0.920548    0.557692   \n",
       "36                   Romford        0.920330    0.537037   \n",
       "37                    Poplar        0.920110    0.517857   \n",
       "38         Elephant & Castle        0.919890    0.500000   \n",
       "39                 Moor Park        0.919668    0.483333   \n",
       "40              Denmark Hill        0.961111    0.229508   \n",
       "41            Edmonton Green        0.961003    0.222222   \n",
       "42                Gospel Oak        0.960894    0.215385   \n",
       "43                  Victoria        0.960784    0.208955   \n",
       "44              Rayners Lane        0.960674    0.202899   \n",
       "45             West Brompton        0.960563    0.197183   \n",
       "46            Honor Oak Park        0.960452    0.194444   \n",
       "47          Finchley Central        0.960340    0.189189   \n",
       "48             Goldhawk Road        0.960227    0.186667   \n",
       "49                  Perivale        0.960114    0.184211   \n",
       "\n",
       "    Num Connected Components  Largest CC Size  \n",
       "0                          1              400  \n",
       "1                          1              399  \n",
       "2                          1              398  \n",
       "3                          1              397  \n",
       "4                          1              396  \n",
       "5                          2              226  \n",
       "6                          4              226  \n",
       "7                          4              225  \n",
       "8                          5              195  \n",
       "9                          5              194  \n",
       "10                         5              193  \n",
       "11                         5              193  \n",
       "12                         7              176  \n",
       "13                         8              176  \n",
       "14                        10              176  \n",
       "15                        11              176  \n",
       "16                        15               85  \n",
       "17                        18               85  \n",
       "18                        20               85  \n",
       "19                        22               61  \n",
       "20                        24               61  \n",
       "21                        26               61  \n",
       "22                        27               39  \n",
       "23                        29               39  \n",
       "24                        32               31  \n",
       "25                        34               30  \n",
       "26                        36               29  \n",
       "27                        37               29  \n",
       "28                        40               29  \n",
       "29                        42               29  \n",
       "30                        43               29  \n",
       "31                        46               29  \n",
       "32                        47               29  \n",
       "33                        48               29  \n",
       "34                        49               29  \n",
       "35                        52               29  \n",
       "36                        54               29  \n",
       "37                        56               29  \n",
       "38                        58               29  \n",
       "39                        60               29  \n",
       "40                        61               14  \n",
       "41                        63               14  \n",
       "42                        65               14  \n",
       "43                        67               14  \n",
       "44                        69               14  \n",
       "45                        71               14  \n",
       "46                        72               14  \n",
       "47                        74               14  \n",
       "48                        75               14  \n",
       "49                        76               14  "
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_topclos_rem2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "cea39bcf-972a-4f6a-be8f-67187a49abec",
   "metadata": {},
   "outputs": [],
   "source": [
    "G_topeig_rem2 = G.copy()\n",
    "results_topeig_rem2 = remove_nodes_by_centrality_sequential2(G_topeig_rem2, nx.eigenvector_centrality, num_nodes_to_remove=50, max_iter=1000000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "05a32a4e-37ba-493b-88aa-7c4b6bff31bb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Node Removed</th>\n",
       "      <th>Isolation Rate</th>\n",
       "      <th>Ratio</th>\n",
       "      <th>Num Connected Components</th>\n",
       "      <th>Largest CC Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>400.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Oxford Circus</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>399.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Stratford</td>\n",
       "      <td>0.052764</td>\n",
       "      <td>125.666667</td>\n",
       "      <td>3</td>\n",
       "      <td>377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Earl's Court</td>\n",
       "      <td>0.052897</td>\n",
       "      <td>125.333333</td>\n",
       "      <td>3</td>\n",
       "      <td>376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Westminster</td>\n",
       "      <td>0.053030</td>\n",
       "      <td>125.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Baker Street</td>\n",
       "      <td>0.055696</td>\n",
       "      <td>93.250000</td>\n",
       "      <td>4</td>\n",
       "      <td>373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>King's Cross St. Pancras</td>\n",
       "      <td>0.060914</td>\n",
       "      <td>74.000000</td>\n",
       "      <td>5</td>\n",
       "      <td>370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Canning Town</td>\n",
       "      <td>0.094148</td>\n",
       "      <td>50.857143</td>\n",
       "      <td>7</td>\n",
       "      <td>356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Turnham Green</td>\n",
       "      <td>0.094388</td>\n",
       "      <td>50.714286</td>\n",
       "      <td>7</td>\n",
       "      <td>355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Leicester Square</td>\n",
       "      <td>0.094629</td>\n",
       "      <td>50.571429</td>\n",
       "      <td>7</td>\n",
       "      <td>354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>West India Quay</td>\n",
       "      <td>0.094872</td>\n",
       "      <td>50.428571</td>\n",
       "      <td>7</td>\n",
       "      <td>353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Waterloo</td>\n",
       "      <td>0.095116</td>\n",
       "      <td>50.285714</td>\n",
       "      <td>7</td>\n",
       "      <td>352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Liverpool Street</td>\n",
       "      <td>0.108247</td>\n",
       "      <td>43.250000</td>\n",
       "      <td>8</td>\n",
       "      <td>346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Willesden Junction</td>\n",
       "      <td>0.155039</td>\n",
       "      <td>32.700000</td>\n",
       "      <td>10</td>\n",
       "      <td>327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Euston</td>\n",
       "      <td>0.233161</td>\n",
       "      <td>24.666667</td>\n",
       "      <td>12</td>\n",
       "      <td>296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Finsbury Park</td>\n",
       "      <td>0.262338</td>\n",
       "      <td>20.285714</td>\n",
       "      <td>14</td>\n",
       "      <td>284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Canada Water</td>\n",
       "      <td>0.294271</td>\n",
       "      <td>18.066667</td>\n",
       "      <td>15</td>\n",
       "      <td>271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Green Park</td>\n",
       "      <td>0.313316</td>\n",
       "      <td>16.437500</td>\n",
       "      <td>16</td>\n",
       "      <td>263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Wembley Park</td>\n",
       "      <td>0.620419</td>\n",
       "      <td>8.055556</td>\n",
       "      <td>18</td>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Whitechapel</td>\n",
       "      <td>0.619423</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>20</td>\n",
       "      <td>145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Notting Hill Gate</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>4.130435</td>\n",
       "      <td>23</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Blackhorse Road</td>\n",
       "      <td>0.773087</td>\n",
       "      <td>3.583333</td>\n",
       "      <td>24</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Hatton Cross</td>\n",
       "      <td>0.783069</td>\n",
       "      <td>3.280000</td>\n",
       "      <td>25</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Stockwell</td>\n",
       "      <td>0.782493</td>\n",
       "      <td>2.928571</td>\n",
       "      <td>28</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>West Hampstead</td>\n",
       "      <td>0.781915</td>\n",
       "      <td>2.645161</td>\n",
       "      <td>31</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>West Ham</td>\n",
       "      <td>0.781333</td>\n",
       "      <td>2.411765</td>\n",
       "      <td>34</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Paddington</td>\n",
       "      <td>0.780749</td>\n",
       "      <td>2.216216</td>\n",
       "      <td>37</td>\n",
       "      <td>82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Ealing Common</td>\n",
       "      <td>0.884718</td>\n",
       "      <td>1.102564</td>\n",
       "      <td>39</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>West Brompton</td>\n",
       "      <td>0.919355</td>\n",
       "      <td>0.731707</td>\n",
       "      <td>41</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Rayners Lane</td>\n",
       "      <td>0.919137</td>\n",
       "      <td>0.697674</td>\n",
       "      <td>43</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Holborn</td>\n",
       "      <td>0.918919</td>\n",
       "      <td>0.652174</td>\n",
       "      <td>46</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Hackney Downs</td>\n",
       "      <td>0.918699</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>48</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Woodford</td>\n",
       "      <td>0.918478</td>\n",
       "      <td>0.612245</td>\n",
       "      <td>49</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Elephant &amp; Castle</td>\n",
       "      <td>0.918256</td>\n",
       "      <td>0.588235</td>\n",
       "      <td>51</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Canonbury</td>\n",
       "      <td>0.918033</td>\n",
       "      <td>0.566038</td>\n",
       "      <td>53</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Romford</td>\n",
       "      <td>0.939726</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>55</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Poplar</td>\n",
       "      <td>0.939560</td>\n",
       "      <td>0.385965</td>\n",
       "      <td>57</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Moor Park</td>\n",
       "      <td>0.939394</td>\n",
       "      <td>0.372881</td>\n",
       "      <td>59</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>South Kensington</td>\n",
       "      <td>0.939227</td>\n",
       "      <td>0.360656</td>\n",
       "      <td>61</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Edmonton Green</td>\n",
       "      <td>0.939058</td>\n",
       "      <td>0.349206</td>\n",
       "      <td>63</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Barking</td>\n",
       "      <td>0.938889</td>\n",
       "      <td>0.338462</td>\n",
       "      <td>65</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>North Acton</td>\n",
       "      <td>0.938719</td>\n",
       "      <td>0.328358</td>\n",
       "      <td>67</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Surrey Quays</td>\n",
       "      <td>0.938547</td>\n",
       "      <td>0.318841</td>\n",
       "      <td>69</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Camden Town</td>\n",
       "      <td>0.960784</td>\n",
       "      <td>0.197183</td>\n",
       "      <td>71</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Gospel Oak</td>\n",
       "      <td>0.960674</td>\n",
       "      <td>0.191781</td>\n",
       "      <td>73</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Hammersmith</td>\n",
       "      <td>0.960563</td>\n",
       "      <td>0.186667</td>\n",
       "      <td>75</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Finchley Central</td>\n",
       "      <td>0.960452</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>77</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Sydenham</td>\n",
       "      <td>0.960340</td>\n",
       "      <td>0.177215</td>\n",
       "      <td>79</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Leytonstone</td>\n",
       "      <td>0.963068</td>\n",
       "      <td>0.160494</td>\n",
       "      <td>81</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Seven Sisters</td>\n",
       "      <td>0.962963</td>\n",
       "      <td>0.156627</td>\n",
       "      <td>83</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Node Removed  Isolation Rate       Ratio  \\\n",
       "0          Bank and Monument        0.000000  400.000000   \n",
       "1              Oxford Circus        0.000000  399.000000   \n",
       "2                  Stratford        0.052764  125.666667   \n",
       "3               Earl's Court        0.052897  125.333333   \n",
       "4                Westminster        0.053030  125.000000   \n",
       "5               Baker Street        0.055696   93.250000   \n",
       "6   King's Cross St. Pancras        0.060914   74.000000   \n",
       "7               Canning Town        0.094148   50.857143   \n",
       "8              Turnham Green        0.094388   50.714286   \n",
       "9           Leicester Square        0.094629   50.571429   \n",
       "10           West India Quay        0.094872   50.428571   \n",
       "11                  Waterloo        0.095116   50.285714   \n",
       "12          Liverpool Street        0.108247   43.250000   \n",
       "13        Willesden Junction        0.155039   32.700000   \n",
       "14                    Euston        0.233161   24.666667   \n",
       "15             Finsbury Park        0.262338   20.285714   \n",
       "16              Canada Water        0.294271   18.066667   \n",
       "17                Green Park        0.313316   16.437500   \n",
       "18              Wembley Park        0.620419    8.055556   \n",
       "19               Whitechapel        0.619423    7.250000   \n",
       "20         Notting Hill Gate        0.750000    4.130435   \n",
       "21           Blackhorse Road        0.773087    3.583333   \n",
       "22              Hatton Cross        0.783069    3.280000   \n",
       "23                 Stockwell        0.782493    2.928571   \n",
       "24            West Hampstead        0.781915    2.645161   \n",
       "25                  West Ham        0.781333    2.411765   \n",
       "26                Paddington        0.780749    2.216216   \n",
       "27             Ealing Common        0.884718    1.102564   \n",
       "28             West Brompton        0.919355    0.731707   \n",
       "29              Rayners Lane        0.919137    0.697674   \n",
       "30                   Holborn        0.918919    0.652174   \n",
       "31             Hackney Downs        0.918699    0.625000   \n",
       "32                  Woodford        0.918478    0.612245   \n",
       "33         Elephant & Castle        0.918256    0.588235   \n",
       "34                 Canonbury        0.918033    0.566038   \n",
       "35                   Romford        0.939726    0.400000   \n",
       "36                    Poplar        0.939560    0.385965   \n",
       "37                 Moor Park        0.939394    0.372881   \n",
       "38          South Kensington        0.939227    0.360656   \n",
       "39            Edmonton Green        0.939058    0.349206   \n",
       "40                   Barking        0.938889    0.338462   \n",
       "41               North Acton        0.938719    0.328358   \n",
       "42              Surrey Quays        0.938547    0.318841   \n",
       "43               Camden Town        0.960784    0.197183   \n",
       "44                Gospel Oak        0.960674    0.191781   \n",
       "45               Hammersmith        0.960563    0.186667   \n",
       "46          Finchley Central        0.960452    0.181818   \n",
       "47                  Sydenham        0.960340    0.177215   \n",
       "48               Leytonstone        0.963068    0.160494   \n",
       "49             Seven Sisters        0.962963    0.156627   \n",
       "\n",
       "    Num Connected Components  Largest CC Size  \n",
       "0                          1              400  \n",
       "1                          1              399  \n",
       "2                          3              377  \n",
       "3                          3              376  \n",
       "4                          3              375  \n",
       "5                          4              373  \n",
       "6                          5              370  \n",
       "7                          7              356  \n",
       "8                          7              355  \n",
       "9                          7              354  \n",
       "10                         7              353  \n",
       "11                         7              352  \n",
       "12                         8              346  \n",
       "13                        10              327  \n",
       "14                        12              296  \n",
       "15                        14              284  \n",
       "16                        15              271  \n",
       "17                        16              263  \n",
       "18                        18              145  \n",
       "19                        20              145  \n",
       "20                        23               95  \n",
       "21                        24               86  \n",
       "22                        25               82  \n",
       "23                        28               82  \n",
       "24                        31               82  \n",
       "25                        34               82  \n",
       "26                        37               82  \n",
       "27                        39               43  \n",
       "28                        41               30  \n",
       "29                        43               30  \n",
       "30                        46               30  \n",
       "31                        48               30  \n",
       "32                        49               30  \n",
       "33                        51               30  \n",
       "34                        53               30  \n",
       "35                        55               22  \n",
       "36                        57               22  \n",
       "37                        59               22  \n",
       "38                        61               22  \n",
       "39                        63               22  \n",
       "40                        65               22  \n",
       "41                        67               22  \n",
       "42                        69               22  \n",
       "43                        71               14  \n",
       "44                        73               14  \n",
       "45                        75               14  \n",
       "46                        77               14  \n",
       "47                        79               14  \n",
       "48                        81               13  \n",
       "49                        83               13  "
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_topeig_rem2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "15e201b7-f8c1-4592-986e-bc3e0ad05cdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extract data from the DataFrames\n",
    "isolation_rate_bet = results_topbet_rem2['Isolation Rate']\n",
    "isolation_rate_clos = results_topclos_rem2['Isolation Rate']\n",
    "isolation_rate_eig = results_topeig_rem2['Isolation Rate']\n",
    "\n",
    "ratio_bet = results_topbet_rem2['Ratio']\n",
    "ratio_clos = results_topclos_rem2['Ratio']\n",
    "ratio_eig = results_topeig_rem2['Ratio']\n",
    "\n",
    "# Set up the plot\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n",
    "\n",
    "# Plot the isolation rate\n",
    "ax1.plot(isolation_rate_bet, label='Betweenness Centrality')\n",
    "ax1.plot(isolation_rate_clos, label='Closeness Centrality')\n",
    "ax1.plot(isolation_rate_eig, label='Eigenvector Centrality')\n",
    "ax1.set_title('Isolation Rate')\n",
    "ax1.set_xlabel('Number of Nodes Removed')\n",
    "ax1.set_ylabel('Isolation Rate')\n",
    "ax1.legend()\n",
    "\n",
    "# Plot the ratio\n",
    "ax2.plot(ratio_bet, label='Betweenness Centrality')\n",
    "ax2.plot(ratio_clos, label='Closeness Centrality')\n",
    "ax2.plot(ratio_eig, label='Eigenvector Centrality')\n",
    "ax2.set_title('Ratio of Size of Largest Connected Component to Number of Connected Components')\n",
    "ax2.set_xlabel('Number of Nodes Removed')\n",
    "ax2.set_ylabel('Ratio')\n",
    "ax2.legend()\n",
    "\n",
    "# Add title\n",
    "fig.suptitle('Sequential Node Removal', fontsize=20)\n",
    "\n",
    "# Add caption\n",
    "fig.text(0.1, -0.05, 'Figure X. Graphs of impact measures for non-sequential and sequential node removal for 50 nodes.', ha='left', fontsize=12)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "33a0ed69-f17d-4f21-868d-5950506dde64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Extract data from the DataFrame\n",
    "ratio_betw = results_topbet_rem2['Ratio']\n",
    "\n",
    "# Calculate absolute differences in ratio values between successive rows\n",
    "results_topbet_rem2['Ratio Change'] = results_topbet_rem2['Ratio'].diff().abs()\n",
    "\n",
    "# Sort the DataFrame by 'Ratio Change' in descending order\n",
    "df_sorted = results_topbet_rem2.sort_values(by='Ratio Change', ascending=False)\n",
    "\n",
    "# Get the top 5 rows with the largest 'Ratio Change'\n",
    "top5_indices = df_sorted.head(5).index\n",
    "top5_nodes = df_sorted.head(5)['Node Removed']\n",
    "top5_changes = df_sorted.head(5)['Ratio Change']\n",
    "\n",
    "# Set up the plot\n",
    "fig, ax = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "# Plot the ratio for Betweenness centrality\n",
    "ax.plot(ratio_betw, label='Betweenness Centrality')\n",
    "\n",
    "# Add vertical lines at points of the largest changes\n",
    "colors = ['red', 'blue', 'green', 'orange', 'purple']\n",
    "for idx, node, change, color in zip(top5_indices, top5_nodes, top5_changes, colors):\n",
    "    ax.axvline(x=idx, linestyle='dotted', color=color, label=f\"{node} ({change:.2f})\")  # Add a vertical line with labeled legend\n",
    "\n",
    "ax.set_title('Ratio of Size of Largest Connected Component to Number of Connected Components (Betweenness Centrality)')\n",
    "ax.set_xlabel('Number of Nodes Removed')\n",
    "ax.set_ylabel('Ratio')\n",
    "\n",
    "# Position the legend on the side\n",
    "ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n",
    "\n",
    "# Add title\n",
    "fig.suptitle('Sequential Node Removal - Betweenness Centrality', fontsize=20)\n",
    "\n",
    "# Add caption\n",
    "fig.text(0.1, -0.05, 'Figure X. Graphs of impact measures for sequential node removal based on betweenness centrality for 50 nodes.', ha='left', fontsize=12)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b447d432-b155-4a8f-8845-198a6bbf102f",
   "metadata": {},
   "source": [
    "### Weighted Networks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cbeb8b2-cab7-42a3-ad2f-6911e5c121bf",
   "metadata": {},
   "source": [
    "#### Running Centrality Measures: Top 10 Stations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "3f932bf2-b0c2-409b-a6c0-62f5fc85fb2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Betweenness_Centrality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Green Park</th>\n",
       "      <td>0.539812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bank and Monument</th>\n",
       "      <td>0.467769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waterloo</th>\n",
       "      <td>0.400439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Westminster</th>\n",
       "      <td>0.348734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liverpool Street</th>\n",
       "      <td>0.345351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stratford</th>\n",
       "      <td>0.329474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Euston</th>\n",
       "      <td>0.270940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bond Street</th>\n",
       "      <td>0.269098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oxford Circus</th>\n",
       "      <td>0.247782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Baker Street</th>\n",
       "      <td>0.241003</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Betweenness_Centrality\n",
       "Green Park                       0.539812\n",
       "Bank and Monument                0.467769\n",
       "Waterloo                         0.400439\n",
       "Westminster                      0.348734\n",
       "Liverpool Street                 0.345351\n",
       "Stratford                        0.329474\n",
       "Euston                           0.270940\n",
       "Bond Street                      0.269098\n",
       "Oxford Circus                    0.247782\n",
       "Baker Street                     0.241003"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Weighted Betweenness Centrality\n",
    "\n",
    "# Add inverted weights to the graph\n",
    "for u, v, d in G.edges(data=True):\n",
    "    weight = d['flows']\n",
    "    if weight == 0: \n",
    "        d['inv_weight'] = 1e-15  # Assign a very small value\n",
    "    else:\n",
    "        d['inv_weight'] = 1/(weight+1)\n",
    "\n",
    "# Calculate the Betweenness Centrality using the inverted weights\n",
    "Betweenness_Centrality = nx.betweenness_centrality(G, weight='inv_weight')\n",
    "nx.set_node_attributes(G, Betweenness_Centrality, 'Betweenness_Centrality')\n",
    "\n",
    "# Create a DataFrame with the Betweenness Centrality values\n",
    "df_bc = pd.DataFrame(index=G.nodes())\n",
    "df_bc['Betweenness_Centrality'] = pd.Series(nx.get_node_attributes(G, 'Betweenness_Centrality'))\n",
    "\n",
    "# Sort the DataFrame by the Betweenness Centrality values\n",
    "betweenness_centrality_sorted = df_bc.sort_values([\"Betweenness_Centrality\"], ascending=False)\n",
    "\n",
    "# Display the top 10 nodes with the highest Betweenness Centrality\n",
    "betweenness_centrality_sorted.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "d724d4b2-8517-4217-a817-076e17b284c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|                   |   Betweenness_Centrality |\n",
      "|:------------------|-------------------------:|\n",
      "| Green Park        |                 0.539812 |\n",
      "| Bank and Monument |                 0.467769 |\n",
      "| Waterloo          |                 0.400439 |\n",
      "| Westminster       |                 0.348734 |\n",
      "| Liverpool Street  |                 0.345351 |\n",
      "| Stratford         |                 0.329474 |\n",
      "| Euston            |                 0.27094  |\n",
      "| Bond Street       |                 0.269098 |\n",
      "| Oxford Circus     |                 0.247782 |\n",
      "| Baker Street      |                 0.241003 |\n"
     ]
    }
   ],
   "source": [
    "markdown_table = betweenness_centrality_sorted.head(10).to_markdown()\n",
    "print(markdown_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9ae924f-b88c-4d7b-adbc-b448e505a625",
   "metadata": {},
   "source": [
    "| Station Name      |   Betweenness Centrality |\n",
    "|:------------------|-------------------------:|\n",
    "| Green Park        |                 0.539812 |\n",
    "| Bank and Monument |                 0.467769 |\n",
    "| Waterloo          |                 0.400439 |\n",
    "| Westminster       |                 0.348734 |\n",
    "| Liverpool Street  |                 0.345351 |\n",
    "| Stratford         |                 0.329474 |\n",
    "| Euston            |                 0.27094  |\n",
    "| Bond Street       |                 0.269098 |\n",
    "| Oxford Circus     |                 0.247782 |\n",
    "| Baker Street      |                 0.241003 |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de69142f-1f57-4a70-b2f0-2204c725031e",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "#### Removing Nodes with NEW Measures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "497c8d09-07b9-4d67-b5ad-01df3badc0a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_nodes_by_betweenness_weighted(G, num_nodes_to_remove=10, weight='flows', epsilon=1e-20):\n",
    "    G_copy = G.copy()\n",
    "\n",
    "    results = []\n",
    "\n",
    "    for i in range(num_nodes_to_remove):\n",
    "        # Invert the weights for centrality calculation and add epsilon to zero weights\n",
    "        for u, v, data in G_copy.edges(data=True):\n",
    "            if data[weight] == 0:\n",
    "                data['inverted_weight'] = 1 / (data[weight] + epsilon)\n",
    "            else:\n",
    "                data['inverted_weight'] = 1 / data[weight]\n",
    "\n",
    "        current_centrality_measure = nx.betweenness_centrality(G_copy, weight='inverted_weight')\n",
    "        node_to_remove = max(current_centrality_measure, key=current_centrality_measure.get)\n",
    "\n",
    "        # Flows impacted by the node removal\n",
    "        impacted_flow = sum(data[weight] for _, _, data in G_copy.edges(node_to_remove, data=True))\n",
    "\n",
    "        # Node removal\n",
    "        G_copy.remove_node(node_to_remove)\n",
    "\n",
    "        # After node removal\n",
    "        new_num_connected_components = nx.number_connected_components(G_copy)\n",
    "        new_largest_cc_size = len(max(nx.connected_components(G_copy), key=len)) if new_num_connected_components > 0 else 0\n",
    "\n",
    "        # Get the flow in the largest connected component\n",
    "        largest_cc = max(nx.connected_components(G_copy), key=len)\n",
    "        gc_flow = sum(data[weight] for u, v, data in G_copy.edges(largest_cc, data=True))\n",
    "\n",
    "        # Total flows in the network after node removal\n",
    "        total_flow_after = sum(data[weight] for _, _, data in G_copy.edges(data=True))\n",
    "\n",
    "        # Calculate the isolation flow - the sum of flows in isolated components\n",
    "        isolated_flow = total_flow_after - gc_flow\n",
    "\n",
    "        # Isolation rate calculation\n",
    "        weighted_isolation_rate = isolated_flow / total_flow_after if total_flow_after > 0 else 0\n",
    "\n",
    "        # Ratio calculation\n",
    "        weighted_ratio = gc_flow / (0.5 * impacted_flow) if impacted_flow > 0 else 0\n",
    "\n",
    "        results.append({\n",
    "            \"Node Removed\": node_to_remove,\n",
    "            \"Weighted Isolation Rate\": weighted_isolation_rate,\n",
    "            \"Weighted Ratio\": weighted_ratio,\n",
    "            \"Num Connected Components\": new_num_connected_components,\n",
    "            \"Largest CC Size\": new_largest_cc_size\n",
    "        })\n",
    "\n",
    "    return pd.DataFrame(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "53de8101-0671-4f3c-85a7-a2dcaeea034c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Node Removed</th>\n",
       "      <th>Weighted Isolation Rate</th>\n",
       "      <th>Weighted Ratio</th>\n",
       "      <th>Num Connected Components</th>\n",
       "      <th>Largest CC Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Green Park</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.005674</td>\n",
       "      <td>1</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>King's Cross St. Pancras</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36.618497</td>\n",
       "      <td>1</td>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.431161</td>\n",
       "      <td>1</td>\n",
       "      <td>398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Node Removed  Weighted Isolation Rate  Weighted Ratio  \\\n",
       "0                Green Park                      0.0       32.005674   \n",
       "1  King's Cross St. Pancras                      0.0       36.618497   \n",
       "2         Bank and Monument                      0.0       25.431161   \n",
       "\n",
       "   Num Connected Components  Largest CC Size  \n",
       "0                         1              400  \n",
       "1                         1              399  \n",
       "2                         1              398  "
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G_weighted_rem = G.copy()\n",
    "results_weighted_rem = remove_nodes_by_betweenness_weighted(G_weighted_rem, num_nodes_to_remove=10, weight='flows')\n",
    "results_weighted_rem.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "bdce2e5a-6636-41cc-baf7-fc84eabc6ec2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|    | Node Removed             |   Weighted Isolation Rate |   Weighted Ratio |   Num Connected Components |   Largest CC Size |\n",
      "|---:|:-------------------------|--------------------------:|-----------------:|---------------------------:|------------------:|\n",
      "|  0 | Green Park               |                         0 |          32.0057 |                          1 |               400 |\n",
      "|  1 | King's Cross St. Pancras |                         0 |          36.6185 |                          1 |               399 |\n",
      "|  2 | Bank and Monument        |                         0 |          25.4312 |                          1 |               398 |\n"
     ]
    }
   ],
   "source": [
    "markdown_table2 = results_weighted_rem.head(3).to_markdown()\n",
    "print(markdown_table2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c80e73b0-d524-4d88-865d-4b2130a561af",
   "metadata": {},
   "source": [
    "|    | Node Removed             |   Weighted Isolation Rate |   Weighted Ratio |\n",
    "|---:|:-------------------------|--------------------------:|-----------------:|\n",
    "|  0 | Green Park               |                         0 |          32.0057 |\n",
    "|  1 | King's Cross St. Pancras |                         0 |          36.6185 |\n",
    "|  2 | Bank and Monument        |                         0 |          25.4312 |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37b3775f-7c0f-4970-b99a-069ea94fbf58",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def remove_nodes_by_betweenness_weighted(G, num_nodes_to_remove=10, weight='flows', epsilon=1e-15):\n",
    "    G_copy = G.copy()\n",
    "\n",
    "    # Invert the weights for centrality calculation and add epsilon to zero weights\n",
    "    for u, v, data in G_copy.edges(data=True):\n",
    "        if data[weight] == 0:\n",
    "            data['inverted_weight'] = 1 / (data[weight] + epsilon)\n",
    "        else:\n",
    "            data['inverted_weight'] = 1 / data[weight]\n",
    "\n",
    "    current_centrality_measure = nx.betweenness_centrality(G_copy, weight='inverted_weight')\n",
    "    sorted_nodes = sorted(current_centrality_measure, key=current_centrality_measure.get, reverse=True)\n",
    "\n",
    "    results = []\n",
    "\n",
    "    for i in range(num_nodes_to_remove):\n",
    "        node_to_remove = sorted_nodes[i]\n",
    "\n",
    "        # Flows impacted by the node removal\n",
    "        impacted_flow = sum(data[weight] for _, _, data in G_copy.edges(node_to_remove, data=True))\n",
    "\n",
    "        # Node removal\n",
    "        G_copy.remove_node(node_to_remove)\n",
    "\n",
    "        # After node removal\n",
    "        new_num_connected_components = nx.number_connected_components(G_copy)\n",
    "        new_largest_cc_size = len(max(nx.connected_components(G_copy), key=len)) if new_num_connected_components > 0 else 0\n",
    "\n",
    "        # Get the flow in the largest connected component\n",
    "        largest_cc = max(nx.connected_components(G_copy), key=len)\n",
    "        gc_flow = sum(data[weight] for u, v, data in G_copy.edges(largest_cc, data=True))\n",
    "\n",
    "        # Total flows in the network after node removal\n",
    "        total_flow_after = sum(data[weight] for _, _, data in G_copy.edges(data=True))\n",
    "\n",
    "        # Calculate the isolation flow - the sum of flows in isolated components\n",
    "        isolated_flow = total_flow_after - gc_flow\n",
    "\n",
    "        # Isolation rate calculation\n",
    "        isolation_rate = isolated_flow / total_flow_after if total_flow_after > 0 else 0\n",
    "\n",
    "        # Ratio calculation\n",
    "        ratio = gc_flow / (0.5 * impacted_flow) if impacted_flow > 0 else 0\n",
    "\n",
    "        results.append({\n",
    "            \"Node Removed\": node_to_remove,\n",
    "            \"Isolation Rate\": isolation_rate,\n",
    "            \"Ratio\": ratio,\n",
    "            \"Num Connected Components\": new_num_connected_components,\n",
    "            \"Largest CC Size\": new_largest_cc_size\n",
    "        })\n",
    "\n",
    "    return pd.DataFrame(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "2a2526b7-467c-449a-8cc1-10118b6b81a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Creating a figure with two subplots (2 rows, 1 column)\n",
    "fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1)\n",
    "\n",
    "# Plotting 'Isolation Rate' on the first subplot\n",
    "results_weighted_rem2['Isolation Rate'].plot(kind='line', ax=ax1)\n",
    "ax1.set_ylabel('Isolation Rate')\n",
    "ax1.set_title('Isolation Rate over Nodes Removed')\n",
    "\n",
    "# Plotting 'Ratio' on the second subplot\n",
    "results_weighted_rem2['Ratio'].plot(kind='line', ax=ax2)\n",
    "ax2.set_ylabel('Ratio')\n",
    "ax2.set_xlabel('Node Index')\n",
    "ax2.set_title('Ratio over Nodes Removed')\n",
    "\n",
    "# Automatically adjust subplot params so that the subplotS fits into the figure area.\n",
    "plt.tight_layout()\n",
    "\n",
    "# Displaying the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6a510c4-8de7-47f5-a6ca-34560b807ad4",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "#### Removing Nodes with OLD Measures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "edd54d6b-e001-4023-bf1c-c2416d77ca76",
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_nodes_by_centrality_sequential_weighted(G, centrality_function, num_nodes_to_remove=10, weight='flows', epsilon=1e-20,**kwargs):\n",
    "    # Create a copy of the graph\n",
    "    G_copy = G.copy()\n",
    "\n",
    "    # Invert the weights for centrality calculation and add epsilon to zero weights\n",
    "    for u, v, data in G_copy.edges(data=True):\n",
    "        if data[weight] == 0:\n",
    "            data['inverted_weight'] = 1 / (data[weight] + epsilon)\n",
    "        else:\n",
    "            data['inverted_weight'] = 1 / data[weight]\n",
    "\n",
    "    # Initialize the results list\n",
    "    results = []\n",
    "\n",
    "    # Remove the highest ranked nodes one by one and record the measurements\n",
    "    for i in range(num_nodes_to_remove):\n",
    "        # Calculate the centrality measure for the current graph\n",
    "        current_centrality_measure = centrality_function(G_copy, weight='inverted_weight', **kwargs)\n",
    "\n",
    "        # Get the node with the highest centrality\n",
    "        node_to_remove = max(current_centrality_measure, key=current_centrality_measure.get)\n",
    "\n",
    "        # Remove the node\n",
    "        G_copy.remove_node(node_to_remove)\n",
    "\n",
    "        # Get the connected components\n",
    "        connected_components = list(nx.connected_components(G_copy))\n",
    "        num_connected_components = len(connected_components)\n",
    "\n",
    "        # Get the largest connected component\n",
    "        largest_cc = max(nx.connected_components(G_copy), key=len)\n",
    "        largest_cc_size = len(largest_cc)\n",
    "\n",
    "        # Identify the isolated components (all components excluding the largest)\n",
    "        isolated_components = [comp for comp in connected_components if comp != largest_cc]\n",
    "\n",
    "        # Count the total number of nodes in the isolated components\n",
    "        total_nodes_in_isolated_components = sum(len(comp) for comp in isolated_components)\n",
    "\n",
    "        # Calculate the isolation rate as the proportion of nodes in isolated components out of all nodes\n",
    "        isolation_rate = total_nodes_in_isolated_components / nx.number_of_nodes(G_copy)\n",
    "\n",
    "        # Calculate the ratio of the size of the giant connected component to the number of connected components\n",
    "        ratio = largest_cc_size / num_connected_components\n",
    "\n",
    "        results.append({\"Node Removed\": node_to_remove, \"Isolation Rate\": isolation_rate, \"Ratio\": ratio, \"Num Connected Components\": num_connected_components, \"Largest CC Size\": largest_cc_size})\n",
    "\n",
    "    return pd.DataFrame(results)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "f75f0fb3-54f6-46c5-b1be-01505a4f9381",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Node Removed</th>\n",
       "      <th>Isolation Rate</th>\n",
       "      <th>Ratio</th>\n",
       "      <th>Num Connected Components</th>\n",
       "      <th>Largest CC Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Green Park</td>\n",
       "      <td>0.0</td>\n",
       "      <td>400.0</td>\n",
       "      <td>1</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>King's Cross St. Pancras</td>\n",
       "      <td>0.0</td>\n",
       "      <td>399.0</td>\n",
       "      <td>1</td>\n",
       "      <td>399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0.0</td>\n",
       "      <td>398.0</td>\n",
       "      <td>1</td>\n",
       "      <td>398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Node Removed  Isolation Rate  Ratio  Num Connected Components  \\\n",
       "0                Green Park             0.0  400.0                         1   \n",
       "1  King's Cross St. Pancras             0.0  399.0                         1   \n",
       "2         Bank and Monument             0.0  398.0                         1   \n",
       "\n",
       "   Largest CC Size  \n",
       "0              400  \n",
       "1              399  \n",
       "2              398  "
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G_weighted_rem2 = G.copy()\n",
    "results_weighted_rem2 = remove_nodes_by_centrality_sequential_weighted(G_weighted_rem2, centrality_function=nx.betweenness_centrality, num_nodes_to_remove=10, weight='flows')\n",
    "results_weighted_rem2.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "e9f9468e-1997-4030-838a-d96b1844cc49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|    | Node Removed             |   Isolation Rate |   Ratio |   Num Connected Components |   Largest CC Size |\n",
      "|---:|:-------------------------|-----------------:|--------:|---------------------------:|------------------:|\n",
      "|  0 | Green Park               |                0 |     400 |                          1 |               400 |\n",
      "|  1 | King's Cross St. Pancras |                0 |     399 |                          1 |               399 |\n",
      "|  2 | Bank and Monument        |                0 |     398 |                          1 |               398 |\n"
     ]
    }
   ],
   "source": [
    "markdown_table3 = results_weighted_rem2.head(3).to_markdown()\n",
    "print(markdown_table3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "362d7062-61a6-45fb-b71b-f68c952a1165",
   "metadata": {},
   "source": [
    "|    | Node Removed             |   Isolation Rate |   Ratio |   Num Connected Components |   Largest CC Size |\n",
    "|---:|:-------------------------|-----------------:|--------:|---------------------------:|------------------:|\n",
    "|  0 | Green Park               |                0 |     400 |                          1 |               400 |\n",
    "|  1 | King's Cross St. Pancras |                0 |     399 |                          1 |               399 |\n",
    "|  2 | Bank and Monument        |                0 |     398 |                          1 |               398 |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18985624-18c1-47cd-86ba-238dd4e752da",
   "metadata": {},
   "source": [
    "## Part II"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a942257-a8f0-42a9-a7b2-02d0e6fd54d8",
   "metadata": {},
   "source": [
    "### Calibrating the Beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "bc617632-f9e0-40c8-926d-fda2059d8117",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>R2</th>\n",
       "      <th>RMSE</th>\n",
       "      <th>Alpha</th>\n",
       "      <th>Gamma</th>\n",
       "      <th>Beta</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>uncosim_pow</td>\n",
       "      <td>0.246443</td>\n",
       "      <td>114.260</td>\n",
       "      <td>0.616202</td>\n",
       "      <td>0.650897</td>\n",
       "      <td>-0.815905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>prodsim_pow</td>\n",
       "      <td>0.388269</td>\n",
       "      <td>102.893</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.768616</td>\n",
       "      <td>-0.878119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>attrsim_pow</td>\n",
       "      <td>0.349942</td>\n",
       "      <td>106.012</td>\n",
       "      <td>0.745118</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.635148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>doublesim_pow</td>\n",
       "      <td>0.407697</td>\n",
       "      <td>101.334</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.909632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>uncosim_exp</td>\n",
       "      <td>0.173430</td>\n",
       "      <td>120.845</td>\n",
       "      <td>0.245243</td>\n",
       "      <td>0.344050</td>\n",
       "      <td>-0.000135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>prodsim_exp</td>\n",
       "      <td>0.468066</td>\n",
       "      <td>96.263</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.755222</td>\n",
       "      <td>-0.000153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>attrsim_exp</td>\n",
       "      <td>0.399960</td>\n",
       "      <td>102.168</td>\n",
       "      <td>0.714555</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.000100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>doublesim_exp</td>\n",
       "      <td>0.497890</td>\n",
       "      <td>93.397</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.000154</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Model        R2     RMSE     Alpha     Gamma      Beta\n",
       "0    uncosim_pow  0.246443  114.260  0.616202  0.650897 -0.815905\n",
       "1    prodsim_pow  0.388269  102.893       NaN  0.768616 -0.878119\n",
       "2    attrsim_pow  0.349942  106.012  0.745118       NaN -0.635148\n",
       "3  doublesim_pow  0.407697  101.334       NaN       NaN -0.909632\n",
       "4    uncosim_exp  0.173430  120.845  0.245243  0.344050 -0.000135\n",
       "5    prodsim_exp  0.468066   96.263       NaN  0.755222 -0.000153\n",
       "6    attrsim_exp  0.399960  102.168  0.714555       NaN -0.000100\n",
       "7  doublesim_exp  0.497890   93.397       NaN       NaN -0.000154"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# keep in mind that in the formulas below, the station_origin/station_destination are the dummy variables that stand \n",
    "# in for the data we have that we're trying to find the parameters for so that we\n",
    "\n",
    "\n",
    "# -1 removes the intercept - why?\n",
    "# the diff btw decay and exp are just the fact that some are logged and some are not\n",
    "\n",
    "#set out all the formulas\n",
    "#power law\n",
    "formula1 = \"flows ~ np.log(population) + np.log(jobs) + np.log(distance) -1\" #unconstrained\n",
    "formula2 = \"flows ~ station_origin + np.log(jobs) + np.log(distance) -1\" #origin constrained\n",
    "formula3 = \"flows ~ np.log(population) + station_destination + np.log(distance) -1\" #production constrained\n",
    "formula4 = \"flows ~ station_origin + station_destination + np.log(distance) -1\" #doubly constrained\n",
    "#exponential\n",
    "formula5 = \"flows ~ np.log(population) + np.log(jobs) + distance -1\"\n",
    "formula6 = \"flows ~ station_origin + np.log(jobs) + distance -1\"\n",
    "formula7 = \"flows ~ np.log(population) + station_destination + distance -1\"\n",
    "formula8 = \"flows ~ station_origin + station_destination + distance -1\"\n",
    "\n",
    "#create a list of all the formulas\n",
    "formulas = [formula1, formula2, formula3, formula4, \n",
    "            formula5, formula6, formula7, formula8]\n",
    "\n",
    "#list the models name\n",
    "models = [\"uncosim_pow\", \"prodsim_pow\", \"attrsim_pow\", \"doublesim_pow\",\n",
    "         \"uncosim_exp\", \"prodsim_exp\", \"attrsim_exp\", \"doublesim_exp\"]\n",
    "\n",
    "#create a set of tuples to store whether a paramater\n",
    "#will be in the model or not\n",
    "model_params = [(True, True, True),\n",
    "               (False, True, True),\n",
    "               (True, False, True),\n",
    "               (False, False, True),\n",
    "               (True, True, True),\n",
    "               (False, True, True),\n",
    "               (True, False, True),\n",
    "               (False, False, True)]\n",
    "\n",
    "#create an empty dictionary to store the results\n",
    "results = {\"Model\":models,\n",
    "          \"R2\": [],\n",
    "          \"RMSE\": [],\n",
    "          \"Alpha\":[],\n",
    "          \"Gamma\":[],\n",
    "          \"Beta\":[]}\n",
    "\n",
    "#loop over each formula\n",
    "for i, formula in enumerate(formulas):\n",
    "    \n",
    "    #run the specified model\n",
    "    sim = smf.glm(formula = formula, \n",
    "                 data = data1,\n",
    "                 family = sm.families.Poisson()).fit()\n",
    "    #clauclate the estimates\n",
    "    data1[models[i]] = sim.mu\n",
    "    \n",
    "    #if the alpha paramater is true\n",
    "    if model_params[i][0] == True:\n",
    "        \n",
    "        #if there are three params then it will be \n",
    "        #in the third position\n",
    "        if sum(model_params[i]) == 3:\n",
    "            \n",
    "            results[\"Alpha\"].append(sim.params[-3])\n",
    "            \n",
    "        #otherwise it will be in the second paramater\n",
    "        else:\n",
    "            results[\"Alpha\"].append(sim.params[-2])\n",
    "            \n",
    "    #if not then just append nan\n",
    "    else:\n",
    "        results[\"Alpha\"].append(np.nan) \n",
    "    \n",
    "    #if the gamma paramater is True\n",
    "    #then it will always be the second paramater\n",
    "    if model_params[i][1] == True:\n",
    "        results[\"Gamma\"].append(sim.params[-2])\n",
    "    #otherwise add nan\n",
    "    else:\n",
    "        results[\"Gamma\"].append(np.nan)\n",
    "    \n",
    "    #add the beta to the results (always will be there)\n",
    "    results[\"Beta\"].append(sim.params[-1])\n",
    "        \n",
    "    #add the metrics to the results dictionary\n",
    "    results[\"R2\"].append(CalcRSqaured(data1[\"flows\"],data1[models[i]]))\n",
    "    results[\"RMSE\"].append(CalcRMSE(data1[\"flows\"],data1[models[i]]))\n",
    "\n",
    "#create a dataframe from the results\n",
    "results = pd.DataFrame(results)\n",
    "#print the results\n",
    "results "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de0564a1-6d85-46f4-a498-36e0cb571b32",
   "metadata": {},
   "source": [
    "### Scenario A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "df4be539-5598-4641-aced-2b4a5a643c38",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1237/304473395.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data1[f\"log_{x}\"] = np.log(data1[x]+1)\n",
      "/tmp/ipykernel_1237/304473395.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data1[f\"log_{x}\"] = np.log(data1[x]+1)\n",
      "/tmp/ipykernel_1237/304473395.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data1[f\"log_{x}\"] = np.log(data1[x]+1)\n"
     ]
    }
   ],
   "source": [
    "x_variables = [\"population\", \"jobs\", \"distance\"]\n",
    "log_x_vars = []\n",
    "for x in x_variables:\n",
    "    data1[f\"log_{x}\"] = np.log(data1[x]+1)\n",
    "    log_x_vars.append(f\"log_{x}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ba45fe28-202a-4f66-8d6c-b24bfa9a84d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def new_cw_job(row):\n",
    "    if row[\"station_destination\"] == \"Canary Wharf\":\n",
    "        val = 0.5 * row[\"log_jobs\"]\n",
    "    else:\n",
    "        val = row[\"log_jobs\"]\n",
    "    return val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "81a0a127-5767-4889-b493-1ac00a097641",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cw_job(row):\n",
    "    if row[\"station_destination\"] == \"Canary Wharf\":\n",
    "        val = 0.5 * row[\"jobs\"]\n",
    "    else:\n",
    "        val = row[\"jobs\"]\n",
    "    return val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "173768bb-9d7c-45c3-a8c7-bee43567ff6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1237/3067670889.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data1[\"logjobs_scenarioA\"] = data1.apply(new_cw_job, axis =1)\n",
      "/tmp/ipykernel_1237/3067670889.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data1[\"jobs_scenarioA\"] = data1.apply(cw_job, axis =1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_population</th>\n",
       "      <th>log_jobs</th>\n",
       "      <th>log_distance</th>\n",
       "      <th>logjobs_scenarioA</th>\n",
       "      <th>jobs_scenarioA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>11.271491</td>\n",
       "      <td>9.003627</td>\n",
       "      <td>11.271491</td>\n",
       "      <td>78549.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Beckton</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>442</td>\n",
       "      <td>8510.121774</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>6.093570</td>\n",
       "      <td>9.049129</td>\n",
       "      <td>6.093570</td>\n",
       "      <td>442.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Blackwall</td>\n",
       "      <td>3</td>\n",
       "      <td>599</td>\n",
       "      <td>665</td>\n",
       "      <td>3775.448872</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>6.501290</td>\n",
       "      <td>8.236539</td>\n",
       "      <td>6.501290</td>\n",
       "      <td>665.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>8.534545</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canning Town</td>\n",
       "      <td>37</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "      <td>2228.923167</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>9.644004</td>\n",
       "      <td>7.709722</td>\n",
       "      <td>9.644004</td>\n",
       "      <td>15428.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Crossharbour</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>1208</td>\n",
       "      <td>6686.475560</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>7.097549</td>\n",
       "      <td>8.807992</td>\n",
       "      <td>7.097549</td>\n",
       "      <td>1208.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Custom House</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>845</td>\n",
       "      <td>3824.855630</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>6.740519</td>\n",
       "      <td>8.249537</td>\n",
       "      <td>6.740519</td>\n",
       "      <td>845.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Cutty Sark</td>\n",
       "      <td>2</td>\n",
       "      <td>599</td>\n",
       "      <td>1748</td>\n",
       "      <td>8503.898909</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>7.466799</td>\n",
       "      <td>9.048398</td>\n",
       "      <td>7.466799</td>\n",
       "      <td>1748.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Cyprus</td>\n",
       "      <td>7</td>\n",
       "      <td>599</td>\n",
       "      <td>850</td>\n",
       "      <td>6532.099618</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>6.746412</td>\n",
       "      <td>8.784637</td>\n",
       "      <td>6.746412</td>\n",
       "      <td>850.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Devons Road</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>611</td>\n",
       "      <td>3958.324171</td>\n",
       "      <td>6.39693</td>\n",
       "      <td>6.416732</td>\n",
       "      <td>8.283829</td>\n",
       "      <td>6.416732</td>\n",
       "      <td>611.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  station_origin station_destination  flows  population   jobs     distance  \\\n",
       "0     Abbey Road   Bank and Monument      0         599  78549  8131.525097   \n",
       "1     Abbey Road             Beckton      1         599    442  8510.121774   \n",
       "2     Abbey Road           Blackwall      3         599    665  3775.448872   \n",
       "3     Abbey Road        Canary Wharf      1         599  58772  5086.514220   \n",
       "4     Abbey Road        Canning Town     37         599  15428  2228.923167   \n",
       "5     Abbey Road        Crossharbour      1         599   1208  6686.475560   \n",
       "6     Abbey Road        Custom House      0         599    845  3824.855630   \n",
       "7     Abbey Road          Cutty Sark      2         599   1748  8503.898909   \n",
       "8     Abbey Road              Cyprus      7         599    850  6532.099618   \n",
       "9     Abbey Road         Devons Road      1         599    611  3958.324171   \n",
       "\n",
       "   log_population   log_jobs  log_distance  logjobs_scenarioA  jobs_scenarioA  \n",
       "0         6.39693  11.271491      9.003627          11.271491         78549.0  \n",
       "1         6.39693   6.093570      9.049129           6.093570           442.0  \n",
       "2         6.39693   6.501290      8.236539           6.501290           665.0  \n",
       "3         6.39693  10.981438      8.534545           5.490719         29386.0  \n",
       "4         6.39693   9.644004      7.709722           9.644004         15428.0  \n",
       "5         6.39693   7.097549      8.807992           7.097549          1208.0  \n",
       "6         6.39693   6.740519      8.249537           6.740519           845.0  \n",
       "7         6.39693   7.466799      9.048398           7.466799          1748.0  \n",
       "8         6.39693   6.746412      8.784637           6.746412           850.0  \n",
       "9         6.39693   6.416732      8.283829           6.416732           611.0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data1[\"logjobs_scenarioA\"] = data1.apply(new_cw_job, axis =1)\n",
    "data1[\"jobs_scenarioA\"] = data1.apply(cw_job, axis =1)\n",
    "data1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2b241537-b3da-49b2-b0ca-0a99f5981986",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Generalized Linear Model Regression Results                  \n",
      "==============================================================================\n",
      "Dep. Variable:                  flows   No. Observations:                61413\n",
      "Model:                            GLM   Df Residuals:                    61013\n",
      "Model Family:                 Poisson   Df Model:                          399\n",
      "Link Function:                    Log   Scale:                          1.0000\n",
      "Method:                          IRLS   Log-Likelihood:            -9.0993e+05\n",
      "Date:                Mon, 22 May 2023   Deviance:                   1.6477e+06\n",
      "Time:                        23:04:19   Pearson chi2:                 2.40e+06\n",
      "No. Iterations:                     8   Pseudo R-squ. (CS):              1.000\n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================================================\n",
      "                                                  coef    std err          z      P>|z|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------------------------------\n",
      "station_origin[Abbey Road]                     -2.9167      0.041    -70.566      0.000      -2.998      -2.836\n",
      "station_origin[Acton Central]                  -1.1644      0.029    -40.038      0.000      -1.221      -1.107\n",
      "station_origin[Acton Town]                     -1.6154      0.017    -92.930      0.000      -1.649      -1.581\n",
      "station_origin[Aldgate]                        -2.9453      0.020   -150.251      0.000      -2.984      -2.907\n",
      "station_origin[Aldgate East]                   -2.8570      0.019   -152.078      0.000      -2.894      -2.820\n",
      "station_origin[All Saints]                     -2.8807      0.037    -77.282      0.000      -2.954      -2.808\n",
      "station_origin[Alperton]                       -1.6566      0.026    -64.823      0.000      -1.707      -1.607\n",
      "station_origin[Amersham]                        0.9981      0.030     33.657      0.000       0.940       1.056\n",
      "station_origin[Anerley]                        -1.0394      0.040    -26.106      0.000      -1.117      -0.961\n",
      "station_origin[Angel]                          -2.5898      0.017   -156.143      0.000      -2.622      -2.557\n",
      "station_origin[Archway]                        -1.7187      0.015   -117.410      0.000      -1.747      -1.690\n",
      "station_origin[Arnos Grove]                    -1.4207      0.019    -74.027      0.000      -1.458      -1.383\n",
      "station_origin[Arsenal]                        -2.8859      0.022   -129.004      0.000      -2.930      -2.842\n",
      "station_origin[Baker Street]                   -2.0122      0.013   -154.273      0.000      -2.038      -1.987\n",
      "station_origin[Balham]                         -0.8797      0.012    -73.875      0.000      -0.903      -0.856\n",
      "station_origin[Bank and Monument]              -0.7544      0.008    -90.390      0.000      -0.771      -0.738\n",
      "station_origin[Barbican]                       -3.8378      0.029   -132.056      0.000      -3.895      -3.781\n",
      "station_origin[Barking]                        -0.5168      0.013    -40.706      0.000      -0.542      -0.492\n",
      "station_origin[Barkingside]                    -1.4623      0.028    -51.315      0.000      -1.518      -1.406\n",
      "station_origin[Barons Court]                   -2.1434      0.017   -127.625      0.000      -2.176      -2.110\n",
      "station_origin[Bayswater]                      -3.2370      0.026   -124.823      0.000      -3.288      -3.186\n",
      "station_origin[Beckton]                        -1.5128      0.030    -50.859      0.000      -1.571      -1.455\n",
      "station_origin[Beckton Park]                   -3.1913      0.059    -54.328      0.000      -3.306      -3.076\n",
      "station_origin[Becontree]                      -1.2824      0.022    -59.112      0.000      -1.325      -1.240\n",
      "station_origin[Belsize Park]                   -2.5596      0.020   -127.734      0.000      -2.599      -2.520\n",
      "station_origin[Bermondsey]                     -2.2039      0.015   -144.085      0.000      -2.234      -2.174\n",
      "station_origin[Bethnal Green]                  -1.9097      0.014   -140.634      0.000      -1.936      -1.883\n",
      "station_origin[Blackfriars]                    -2.1859      0.014   -160.837      0.000      -2.212      -2.159\n",
      "station_origin[Blackhorse Road]                -0.7651      0.012    -61.367      0.000      -0.790      -0.741\n",
      "station_origin[Blackwall]                      -2.6276      0.033    -79.661      0.000      -2.692      -2.563\n",
      "station_origin[Bond Street]                    -3.3922      0.023   -147.818      0.000      -3.437      -3.347\n",
      "station_origin[Borough]                        -3.7222      0.028   -133.230      0.000      -3.777      -3.667\n",
      "station_origin[Boston Manor]                   -2.2169      0.030    -74.582      0.000      -2.275      -2.159\n",
      "station_origin[Bounds Green]                   -1.2484      0.016    -76.809      0.000      -1.280      -1.217\n",
      "station_origin[Bow Church]                     -1.9023      0.025    -75.203      0.000      -1.952      -1.853\n",
      "station_origin[Bow Road]                       -2.2069      0.017   -130.088      0.000      -2.240      -2.174\n",
      "station_origin[Brent Cross]                    -2.4105      0.027    -90.575      0.000      -2.463      -2.358\n",
      "station_origin[Brentwood]                       1.4802      0.022     66.787      0.000       1.437       1.524\n",
      "station_origin[Brixton]                        -0.3446      0.009    -38.515      0.000      -0.362      -0.327\n",
      "station_origin[Brockley]                       -0.6241      0.021    -29.057      0.000      -0.666      -0.582\n",
      "station_origin[Bromley-by-Bow]                 -2.5551      0.021   -123.255      0.000      -2.596      -2.514\n",
      "station_origin[Brondesbury]                    -1.0707      0.023    -46.289      0.000      -1.116      -1.025\n",
      "station_origin[Brondesbury Park]               -2.1583      0.038    -56.168      0.000      -2.234      -2.083\n",
      "station_origin[Bruce Grove]                    -1.2952      0.033    -39.517      0.000      -1.359      -1.231\n",
      "station_origin[Buckhurst Hill]                 -1.3552      0.026    -52.674      0.000      -1.406      -1.305\n",
      "station_origin[Burnt Oak]                      -1.0497      0.019    -54.403      0.000      -1.088      -1.012\n",
      "station_origin[Bush Hill Park]                 -0.3169      0.027    -11.557      0.000      -0.371      -0.263\n",
      "station_origin[Bushey]                         -1.3648      0.065    -20.991      0.000      -1.492      -1.237\n",
      "station_origin[Caledonian Road]                -2.7810      0.020   -141.005      0.000      -2.820      -2.742\n",
      "station_origin[Caledonian Road & Barnsbury]    -2.7457      0.043    -63.413      0.000      -2.831      -2.661\n",
      "station_origin[Cambridge Heath]                -3.0304      0.056    -54.527      0.000      -3.139      -2.921\n",
      "station_origin[Camden Road]                    -1.8342      0.029    -62.550      0.000      -1.892      -1.777\n",
      "station_origin[Camden Town]                    -2.6944      0.018   -146.858      0.000      -2.730      -2.658\n",
      "station_origin[Canada Water]                   -0.5053      0.009    -58.790      0.000      -0.522      -0.488\n",
      "station_origin[Canary Wharf]                   -0.9465      0.010    -92.918      0.000      -0.966      -0.926\n",
      "station_origin[Canning Town]                   -0.4464      0.009    -48.876      0.000      -0.464      -0.429\n",
      "station_origin[Cannon Street]                  -2.7495      0.017   -159.855      0.000      -2.783      -2.716\n",
      "station_origin[Canonbury]                      -1.3784      0.021    -65.084      0.000      -1.420      -1.337\n",
      "station_origin[Canons Park]                    -0.8852      0.022    -40.688      0.000      -0.928      -0.843\n",
      "station_origin[Carpenders Park]                 0.1953      0.028      6.998      0.000       0.141       0.250\n",
      "station_origin[Chadwell Heath]                  0.7161      0.017     41.860      0.000       0.683       0.750\n",
      "station_origin[Chalfont & Latimer]              0.4143      0.033     12.483      0.000       0.349       0.479\n",
      "station_origin[Chalk Farm]                     -2.8557      0.021   -133.865      0.000      -2.897      -2.814\n",
      "station_origin[Chancery Lane]                  -3.9742      0.030   -131.883      0.000      -4.033      -3.915\n",
      "station_origin[Charing Cross]                  -2.3061      0.014   -167.069      0.000      -2.333      -2.279\n",
      "station_origin[Chesham]                         1.2123      0.033     36.308      0.000       1.147       1.278\n",
      "station_origin[Cheshunt]                       -1.3026      0.077    -16.989      0.000      -1.453      -1.152\n",
      "station_origin[Chigwell]                       -2.3411      0.047    -50.295      0.000      -2.432      -2.250\n",
      "station_origin[Chingford]                       0.3034      0.023     13.208      0.000       0.258       0.348\n",
      "station_origin[Chiswick Park]                  -2.7753      0.029    -97.215      0.000      -2.831      -2.719\n",
      "station_origin[Chorleywood]                    -0.0016      0.034     -0.047      0.963      -0.068       0.065\n",
      "station_origin[Clapham Common]                 -1.9118      0.016   -123.184      0.000      -1.942      -1.881\n",
      "station_origin[Clapham High Street]            -0.7073      0.026    -26.797      0.000      -0.759      -0.656\n",
      "station_origin[Clapham Junction]                0.6554      0.013     49.489      0.000       0.629       0.681\n",
      "station_origin[Clapham North]                  -2.5498      0.020   -129.373      0.000      -2.588      -2.511\n",
      "station_origin[Clapham South]                  -1.4368      0.014   -104.762      0.000      -1.464      -1.410\n",
      "station_origin[Clapton]                        -1.2839      0.027    -48.345      0.000      -1.336      -1.232\n",
      "station_origin[Cockfosters]                    -1.7221      0.032    -53.293      0.000      -1.785      -1.659\n",
      "station_origin[Colindale]                      -0.6742      0.015    -44.845      0.000      -0.704      -0.645\n",
      "station_origin[Colliers Wood]                  -0.9748      0.015    -65.867      0.000      -1.004      -0.946\n",
      "station_origin[Covent Garden]                  -5.0252      0.049   -102.683      0.000      -5.121      -4.929\n",
      "station_origin[Crossharbour]                   -1.9313      0.025    -77.759      0.000      -1.980      -1.883\n",
      "station_origin[Crouch Hill]                    -2.2583      0.051    -44.339      0.000      -2.358      -2.159\n",
      "station_origin[Croxley]                        -0.3717      0.032    -11.723      0.000      -0.434      -0.310\n",
      "station_origin[Crystal Palace]                  0.1541      0.023      6.580      0.000       0.108       0.200\n",
      "station_origin[Custom House]                   -2.5950      0.036    -71.689      0.000      -2.666      -2.524\n",
      "station_origin[Cutty Sark]                     -1.4825      0.023    -65.808      0.000      -1.527      -1.438\n",
      "station_origin[Cyprus]                         -2.6275      0.045    -58.227      0.000      -2.716      -2.539\n",
      "station_origin[Dagenham East]                  -1.0708      0.024    -45.168      0.000      -1.117      -1.024\n",
      "station_origin[Dagenham Heathway]              -0.7160      0.018    -38.911      0.000      -0.752      -0.680\n",
      "station_origin[Dalston Junction]               -0.7170      0.017    -42.120      0.000      -0.750      -0.684\n",
      "station_origin[Dalston Kingsland]              -1.0682      0.020    -54.735      0.000      -1.106      -1.030\n",
      "station_origin[Debden]                         -0.7731      0.026    -30.163      0.000      -0.823      -0.723\n",
      "station_origin[Denmark Hill]                   -0.7423      0.024    -31.004      0.000      -0.789      -0.695\n",
      "station_origin[Deptford Bridge]                -1.1232      0.021    -53.629      0.000      -1.164      -1.082\n",
      "station_origin[Devons Road]                    -2.1664      0.028    -78.643      0.000      -2.220      -2.112\n",
      "station_origin[Dollis Hill]                    -2.0415      0.021    -98.371      0.000      -2.082      -2.001\n",
      "station_origin[Ealing Broadway]                -0.1130      0.011    -10.604      0.000      -0.134      -0.092\n",
      "station_origin[Ealing Common]                  -2.1106      0.023    -91.287      0.000      -2.156      -2.065\n",
      "station_origin[Earl's Court]                   -1.6314      0.012   -131.547      0.000      -1.656      -1.607\n",
      "station_origin[East Acton]                     -2.2637      0.021   -105.447      0.000      -2.306      -2.222\n",
      "station_origin[East Finchley]                  -1.1908      0.014    -82.268      0.000      -1.219      -1.162\n",
      "station_origin[East Ham]                       -0.8467      0.013    -65.723      0.000      -0.872      -0.821\n",
      "station_origin[East India]                     -2.0495      0.025    -83.334      0.000      -2.098      -2.001\n",
      "station_origin[East Putney]                    -1.4455      0.015    -97.497      0.000      -1.475      -1.416\n",
      "station_origin[Eastcote]                       -0.6419      0.021    -30.836      0.000      -0.683      -0.601\n",
      "station_origin[Edgware]                        -0.7124      0.018    -38.849      0.000      -0.748      -0.676\n",
      "station_origin[Edgware Road]                   -2.8775      0.020   -146.146      0.000      -2.916      -2.839\n",
      "station_origin[Edmonton Green]                 -0.2933      0.023    -12.960      0.000      -0.338      -0.249\n",
      "station_origin[Elephant & Castle]              -1.7941      0.012   -149.350      0.000      -1.818      -1.771\n",
      "station_origin[Elm Park]                       -0.4221      0.020    -20.892      0.000      -0.462      -0.382\n",
      "station_origin[Elverson Road]                  -1.7244      0.030    -57.285      0.000      -1.783      -1.665\n",
      "station_origin[Embankment]                     -2.7643      0.017   -164.740      0.000      -2.797      -2.731\n",
      "station_origin[Emerson Park]                   -0.0424      0.055     -0.773      0.440      -0.150       0.065\n",
      "station_origin[Enfield Town]                    0.1098      0.024      4.528      0.000       0.062       0.157\n",
      "station_origin[Epping]                          0.6441      0.020     32.315      0.000       0.605       0.683\n",
      "station_origin[Euston]                         -1.2131      0.010   -126.258      0.000      -1.232      -1.194\n",
      "station_origin[Euston Square]                  -2.3782      0.015   -153.549      0.000      -2.409      -2.348\n",
      "station_origin[Fairlop]                        -1.5602      0.032    -48.172      0.000      -1.624      -1.497\n",
      "station_origin[Farringdon]                     -2.4197      0.015   -157.860      0.000      -2.450      -2.390\n",
      "station_origin[Finchley Central]               -0.7676      0.014    -54.412      0.000      -0.795      -0.740\n",
      "station_origin[Finchley Road]                  -1.9845      0.016   -126.174      0.000      -2.015      -1.954\n",
      "station_origin[Finchley Road & Frognal]        -1.6541      0.030    -54.838      0.000      -1.713      -1.595\n",
      "station_origin[Finsbury Park]                  -0.3915      0.009    -44.515      0.000      -0.409      -0.374\n",
      "station_origin[Forest Gate]                    -0.5858      0.021    -27.319      0.000      -0.628      -0.544\n",
      "station_origin[Forest Hill]                    -0.1875      0.021     -8.918      0.000      -0.229      -0.146\n",
      "station_origin[Fulham Broadway]                -2.3613      0.018   -128.192      0.000      -2.397      -2.325\n",
      "station_origin[Gallions Reach]                 -2.2585      0.040    -56.300      0.000      -2.337      -2.180\n",
      "station_origin[Gants Hill]                     -0.6050      0.015    -39.686      0.000      -0.635      -0.575\n",
      "station_origin[Gidea Park]                      1.0755      0.018     59.551      0.000       1.040       1.111\n",
      "station_origin[Gloucester Road]                -2.2790      0.016   -145.740      0.000      -2.310      -2.248\n",
      "station_origin[Golders Green]                  -1.4852      0.016    -94.531      0.000      -1.516      -1.454\n",
      "station_origin[Goldhawk Road]                  -2.9572      0.028   -105.992      0.000      -3.012      -2.902\n",
      "station_origin[Goodge Street]                  -5.0914      0.053    -96.757      0.000      -5.195      -4.988\n",
      "station_origin[Goodmayes]                       0.3610      0.019     19.064      0.000       0.324       0.398\n",
      "station_origin[Gospel Oak]                     -1.9785      0.031    -64.056      0.000      -2.039      -1.918\n",
      "station_origin[Grange Hill]                    -1.8527      0.040    -46.718      0.000      -1.930      -1.775\n",
      "station_origin[Great Portland Street]          -3.8015      0.030   -125.546      0.000      -3.861      -3.742\n",
      "station_origin[Green Park]                     -3.3972      0.023   -148.987      0.000      -3.442      -3.353\n",
      "station_origin[Greenford]                      -1.0600      0.020    -52.425      0.000      -1.100      -1.020\n",
      "station_origin[Greenwich]                      -1.8172      0.028    -65.733      0.000      -1.871      -1.763\n",
      "station_origin[Gunnersbury]                    -2.2009      0.022   -100.999      0.000      -2.244      -2.158\n",
      "station_origin[Hackney Central]                -0.8191      0.018    -44.946      0.000      -0.855      -0.783\n",
      "station_origin[Hackney Downs]                  -1.5676      0.035    -44.830      0.000      -1.636      -1.499\n",
      "station_origin[Hackney Wick]                   -1.8587      0.027    -69.499      0.000      -1.911      -1.806\n",
      "station_origin[Haggerston]                     -1.3944      0.023    -61.046      0.000      -1.439      -1.350\n",
      "station_origin[Hainault]                       -0.3395      0.019    -17.775      0.000      -0.377      -0.302\n",
      "station_origin[Hammersmith]                    -0.9863      0.011    -90.330      0.000      -1.008      -0.965\n",
      "station_origin[Hampstead]                      -2.7396      0.024   -115.774      0.000      -2.786      -2.693\n",
      "station_origin[Hampstead Heath]                -2.0799      0.034    -62.017      0.000      -2.146      -2.014\n",
      "station_origin[Hanger Lane]                    -1.8568      0.023    -79.957      0.000      -1.902      -1.811\n",
      "station_origin[Harlesden]                      -2.6228      0.027    -98.953      0.000      -2.675      -2.571\n",
      "station_origin[Harold Wood]                     1.2315      0.019     64.237      0.000       1.194       1.269\n",
      "station_origin[Harringay Green Lanes]          -1.6679      0.045    -37.297      0.000      -1.756      -1.580\n",
      "station_origin[Harrow & Wealdstone]            -1.2753      0.025    -51.457      0.000      -1.324      -1.227\n",
      "station_origin[Harrow-on-the-Hill]             -0.2257      0.014    -16.130      0.000      -0.253      -0.198\n",
      "station_origin[Hatch End]                      -0.3738      0.035    -10.763      0.000      -0.442      -0.306\n",
      "station_origin[Hatton Cross]                   -0.9835      0.028    -35.300      0.000      -1.038      -0.929\n",
      "station_origin[Headstone Lane]                 -1.1286      0.046    -24.291      0.000      -1.220      -1.038\n",
      "station_origin[Heathrow Terminal 4]            -1.3396      0.036    -37.556      0.000      -1.410      -1.270\n",
      "station_origin[Heathrow Terminal 5]            -0.7370      0.033    -22.142      0.000      -0.802      -0.672\n",
      "station_origin[Heathrow Terminals 2 & 3]       -0.2522      0.022    -11.336      0.000      -0.296      -0.209\n",
      "station_origin[Hendon Central]                 -1.2739      0.017    -75.380      0.000      -1.307      -1.241\n",
      "station_origin[Heron Quays]                    -1.9772      0.024    -80.906      0.000      -2.025      -1.929\n",
      "station_origin[High Barnet]                    -0.4896      0.019    -26.160      0.000      -0.526      -0.453\n",
      "station_origin[High Street Kensington]         -3.0010      0.022   -134.446      0.000      -3.045      -2.957\n",
      "station_origin[Highams Park]                    0.1071      0.019      5.527      0.000       0.069       0.145\n",
      "station_origin[Highbury & Islington]           -0.7003      0.009    -79.483      0.000      -0.718      -0.683\n",
      "station_origin[Highgate]                       -1.6840      0.016   -105.339      0.000      -1.715      -1.653\n",
      "station_origin[Hillingdon]                     -0.6907      0.028    -24.639      0.000      -0.746      -0.636\n",
      "station_origin[Holborn]                        -3.6455      0.025   -144.299      0.000      -3.695      -3.596\n",
      "station_origin[Holland Park]                   -3.2092      0.026   -122.652      0.000      -3.261      -3.158\n",
      "station_origin[Holloway Road]                  -2.6388      0.019   -138.124      0.000      -2.676      -2.601\n",
      "station_origin[Homerton]                       -0.9542      0.018    -53.116      0.000      -0.989      -0.919\n",
      "station_origin[Honor Oak Park]                 -0.6844      0.025    -27.891      0.000      -0.732      -0.636\n",
      "station_origin[Hornchurch]                     -0.6467      0.025    -25.786      0.000      -0.696      -0.598\n",
      "station_origin[Hounslow Central]               -1.0681      0.022    -48.256      0.000      -1.111      -1.025\n",
      "station_origin[Hounslow East]                  -1.1366      0.022    -50.920      0.000      -1.180      -1.093\n",
      "station_origin[Hounslow West]                  -0.9156      0.023    -40.109      0.000      -0.960      -0.871\n",
      "station_origin[Hoxton]                         -2.0826      0.032    -66.033      0.000      -2.144      -2.021\n",
      "station_origin[Hyde Park Corner]               -5.3913      0.062    -86.361      0.000      -5.514      -5.269\n",
      "station_origin[Ickenham]                       -1.3448      0.037    -36.015      0.000      -1.418      -1.272\n",
      "station_origin[Ilford]                          0.6198      0.015     40.874      0.000       0.590       0.650\n",
      "station_origin[Imperial Wharf]                 -1.7243      0.034    -50.111      0.000      -1.792      -1.657\n",
      "station_origin[Island Gardens]                 -1.9785      0.027    -72.502      0.000      -2.032      -1.925\n",
      "station_origin[Kennington]                     -2.6814      0.018   -150.803      0.000      -2.716      -2.647\n",
      "station_origin[Kensal Green]                   -2.5863      0.024   -107.613      0.000      -2.633      -2.539\n",
      "station_origin[Kensal Rise]                    -1.1799      0.023    -50.555      0.000      -1.226      -1.134\n",
      "station_origin[Kensington]                     -4.3504      0.048    -89.733      0.000      -4.445      -4.255\n",
      "station_origin[Kentish Town]                   -2.8322      0.021   -133.378      0.000      -2.874      -2.791\n",
      "station_origin[Kentish Town West]              -2.4171      0.038    -63.784      0.000      -2.491      -2.343\n",
      "station_origin[Kenton]                         -1.7291      0.031    -54.917      0.000      -1.791      -1.667\n",
      "station_origin[Kew Gardens]                    -2.0026      0.022    -91.227      0.000      -2.046      -1.960\n",
      "station_origin[Kilburn]                        -1.7672      0.016   -111.153      0.000      -1.798      -1.736\n",
      "station_origin[Kilburn High Road]              -2.2689      0.054    -41.920      0.000      -2.375      -2.163\n",
      "station_origin[Kilburn Park]                   -2.7880      0.024   -117.086      0.000      -2.835      -2.741\n",
      "station_origin[King George V]                  -1.9819      0.033    -60.627      0.000      -2.046      -1.918\n",
      "station_origin[King's Cross St. Pancras]       -0.7487      0.008    -88.566      0.000      -0.765      -0.732\n",
      "station_origin[Kingsbury]                      -1.1590      0.020    -57.515      0.000      -1.199      -1.120\n",
      "station_origin[Knightsbridge]                  -3.8747      0.030   -127.410      0.000      -3.934      -3.815\n",
      "station_origin[Ladbroke Grove]                 -2.6232      0.021   -122.649      0.000      -2.665      -2.581\n",
      "station_origin[Lambeth North]                  -3.9338      0.031   -128.687      0.000      -3.994      -3.874\n",
      "station_origin[Lancaster Gate]                 -2.5923      0.018   -144.678      0.000      -2.627      -2.557\n",
      "station_origin[Langdon Park]                   -2.1603      0.027    -80.566      0.000      -2.213      -2.108\n",
      "station_origin[Latimer Road]                   -3.5266      0.035   -101.912      0.000      -3.594      -3.459\n",
      "station_origin[Leicester Square]               -4.1930      0.032   -129.302      0.000      -4.257      -4.129\n",
      "station_origin[Lewisham]                        0.2338      0.013     18.274      0.000       0.209       0.259\n",
      "station_origin[Leyton]                         -1.0924      0.013    -83.816      0.000      -1.118      -1.067\n",
      "station_origin[Leyton Midland Road]            -0.6397      0.035    -18.458      0.000      -0.708      -0.572\n",
      "station_origin[Leytonstone]                    -0.9865      0.014    -71.748      0.000      -1.013      -0.960\n",
      "station_origin[Leytonstone High Road]          -0.9065      0.040    -22.478      0.000      -0.986      -0.827\n",
      "station_origin[Limehouse]                      -0.9043      0.015    -60.101      0.000      -0.934      -0.875\n",
      "station_origin[Liverpool Street]               -0.6169      0.008    -74.698      0.000      -0.633      -0.601\n",
      "station_origin[London Bridge]                  -0.5979      0.008    -72.618      0.000      -0.614      -0.582\n",
      "station_origin[London City Airport]            -1.3844      0.023    -60.143      0.000      -1.430      -1.339\n",
      "station_origin[London Fields]                  -1.6197      0.031    -52.359      0.000      -1.680      -1.559\n",
      "station_origin[Loughton]                       -0.5874      0.020    -28.996      0.000      -0.627      -0.548\n",
      "station_origin[Maida Vale]                     -2.8172      0.022   -125.609      0.000      -2.861      -2.773\n",
      "station_origin[Manor House]                    -1.7422      0.015   -117.340      0.000      -1.771      -1.713\n",
      "station_origin[Manor Park]                     -0.7303      0.025    -29.585      0.000      -0.779      -0.682\n",
      "station_origin[Mansion House]                  -4.7140      0.044   -106.051      0.000      -4.801      -4.627\n",
      "station_origin[Marble Arch]                    -3.4228      0.024   -141.002      0.000      -3.470      -3.375\n",
      "station_origin[Maryland]                       -1.7656      0.034    -51.317      0.000      -1.833      -1.698\n",
      "station_origin[Marylebone]                     -2.1598      0.014   -153.057      0.000      -2.187      -2.132\n",
      "station_origin[Mile End]                       -1.7177      0.013   -128.770      0.000      -1.744      -1.692\n",
      "station_origin[Mill Hill East]                 -2.0657      0.029    -72.388      0.000      -2.122      -2.010\n",
      "station_origin[Moor Park]                      -1.1725      0.040    -29.481      0.000      -1.250      -1.095\n",
      "station_origin[Moorgate]                       -2.5954      0.016   -159.820      0.000      -2.627      -2.564\n",
      "station_origin[Morden]                         -0.2152      0.013    -16.738      0.000      -0.240      -0.190\n",
      "station_origin[Mornington Crescent]            -4.3205      0.039   -112.160      0.000      -4.396      -4.245\n",
      "station_origin[Mudchute]                       -2.0890      0.028    -75.028      0.000      -2.144      -2.034\n",
      "station_origin[Neasden]                        -2.0254      0.022    -93.817      0.000      -2.068      -1.983\n",
      "station_origin[New Cross]                      -1.0832      0.027    -40.173      0.000      -1.136      -1.030\n",
      "station_origin[New Cross Gate]                 -1.0593      0.025    -42.589      0.000      -1.108      -1.011\n",
      "station_origin[Newbury Park]                   -0.4845      0.017    -28.937      0.000      -0.517      -0.452\n",
      "station_origin[North Acton]                    -1.8411      0.019    -96.839      0.000      -1.878      -1.804\n",
      "station_origin[North Ealing]                   -3.1153      0.045    -69.366      0.000      -3.203      -3.027\n",
      "station_origin[North Greenwich]                -0.9767      0.011    -85.434      0.000      -0.999      -0.954\n",
      "station_origin[North Harrow]                   -1.0598      0.024    -44.707      0.000      -1.106      -1.013\n",
      "station_origin[North Wembley]                  -2.2452      0.031    -72.548      0.000      -2.306      -2.185\n",
      "station_origin[Northfields]                    -1.4341      0.019    -74.037      0.000      -1.472      -1.396\n",
      "station_origin[Northolt]                       -0.5034      0.018    -28.129      0.000      -0.538      -0.468\n",
      "station_origin[Northwick Park]                 -1.4291      0.023    -63.227      0.000      -1.473      -1.385\n",
      "station_origin[Northwood]                      -0.3578      0.023    -15.497      0.000      -0.403      -0.313\n",
      "station_origin[Northwood Hills]                -0.8887      0.027    -32.954      0.000      -0.942      -0.836\n",
      "station_origin[Norwood Junction]               -0.8184      0.039    -21.080      0.000      -0.895      -0.742\n",
      "station_origin[Notting Hill Gate]              -2.2008      0.015   -142.793      0.000      -2.231      -2.171\n",
      "station_origin[Oakwood]                        -1.3659      0.025    -55.428      0.000      -1.414      -1.318\n",
      "station_origin[Old Street]                     -2.3262      0.015   -155.533      0.000      -2.355      -2.297\n",
      "station_origin[Osterley]                       -1.6863      0.027    -61.929      0.000      -1.740      -1.633\n",
      "station_origin[Oval]                           -2.5469      0.018   -143.867      0.000      -2.582      -2.512\n",
      "station_origin[Oxford Circus]                  -3.1105      0.020   -156.534      0.000      -3.149      -3.072\n",
      "station_origin[Paddington]                     -0.6790      0.009    -76.871      0.000      -0.696      -0.662\n",
      "station_origin[Park Royal]                     -2.9449      0.043    -68.924      0.000      -3.029      -2.861\n",
      "station_origin[Parsons Green]                  -1.9741      0.016   -121.299      0.000      -2.006      -1.942\n",
      "station_origin[Peckham Rye]                    -0.6326      0.021    -29.935      0.000      -0.674      -0.591\n",
      "station_origin[Penge West]                     -1.6282      0.053    -30.809      0.000      -1.732      -1.525\n",
      "station_origin[Perivale]                       -1.7636      0.026    -68.921      0.000      -1.814      -1.713\n",
      "station_origin[Piccadilly Circus]              -4.1326      0.032   -130.648      0.000      -4.195      -4.071\n",
      "station_origin[Pimlico]                        -2.5075      0.017   -146.824      0.000      -2.541      -2.474\n",
      "station_origin[Pinner]                         -0.4851      0.020    -24.657      0.000      -0.524      -0.447\n",
      "station_origin[Plaistow]                       -1.9903      0.018   -112.332      0.000      -2.025      -1.956\n",
      "station_origin[Pontoon Dock]                   -1.5572      0.023    -67.436      0.000      -1.602      -1.512\n",
      "station_origin[Poplar]                         -1.8558      0.022    -84.915      0.000      -1.899      -1.813\n",
      "station_origin[Preston Road]                   -1.5290      0.021    -71.147      0.000      -1.571      -1.487\n",
      "station_origin[Prince Regent]                  -2.3579      0.033    -70.953      0.000      -2.423      -2.293\n",
      "station_origin[Pudding Mill Lane]              -3.2577      0.049    -67.150      0.000      -3.353      -3.163\n",
      "station_origin[Putney Bridge]                  -2.2280      0.019   -115.094      0.000      -2.266      -2.190\n",
      "station_origin[Queen's Park]                   -1.8000      0.015   -119.663      0.000      -1.829      -1.771\n",
      "station_origin[Queens Road Peckham]            -0.9147      0.023    -39.031      0.000      -0.961      -0.869\n",
      "station_origin[Queensbury]                     -0.9184      0.020    -46.853      0.000      -0.957      -0.880\n",
      "station_origin[Queensway]                      -2.7742      0.020   -137.896      0.000      -2.814      -2.735\n",
      "station_origin[Ravenscourt Park]               -2.8898      0.026   -110.919      0.000      -2.941      -2.839\n",
      "station_origin[Rayners Lane]                   -0.6189      0.018    -34.263      0.000      -0.654      -0.584\n",
      "station_origin[Rectory Road]                   -1.8039      0.033    -54.701      0.000      -1.868      -1.739\n",
      "station_origin[Redbridge]                      -1.7341      0.023    -75.626      0.000      -1.779      -1.689\n",
      "station_origin[Regent's Park]                  -4.9911      0.052    -95.486      0.000      -5.094      -4.889\n",
      "station_origin[Richmond]                       -0.8426      0.015    -55.444      0.000      -0.872      -0.813\n",
      "station_origin[Rickmansworth]                  -0.1591      0.029     -5.506      0.000      -0.216      -0.102\n",
      "station_origin[Roding Valley]                  -2.6431      0.050    -52.867      0.000      -2.741      -2.545\n",
      "station_origin[Romford]                         1.2685      0.016     78.634      0.000       1.237       1.300\n",
      "station_origin[Rotherhithe]                    -1.4653      0.026    -56.988      0.000      -1.516      -1.415\n",
      "station_origin[Royal Albert]                   -2.5757      0.040    -64.902      0.000      -2.653      -2.498\n",
      "station_origin[Royal Oak]                      -3.2729      0.027   -119.839      0.000      -3.326      -3.219\n",
      "station_origin[Royal Victoria]                 -1.7139      0.023    -74.968      0.000      -1.759      -1.669\n",
      "station_origin[Ruislip]                        -1.0394      0.028    -36.667      0.000      -1.095      -0.984\n",
      "station_origin[Ruislip Gardens]                -1.2182      0.033    -37.078      0.000      -1.283      -1.154\n",
      "station_origin[Ruislip Manor]                  -1.0654      0.027    -38.846      0.000      -1.119      -1.012\n",
      "station_origin[Russell Square]                 -3.7073      0.026   -140.189      0.000      -3.759      -3.655\n",
      "station_origin[Seven Kings]                     0.3073      0.018     16.623      0.000       0.271       0.344\n",
      "station_origin[Seven Sisters]                  -0.2757      0.009    -29.048      0.000      -0.294      -0.257\n",
      "station_origin[Shadwell]                       -1.0444      0.014    -76.866      0.000      -1.071      -1.018\n",
      "station_origin[Shenfield]                      -0.2602      0.064     -4.082      0.000      -0.385      -0.135\n",
      "station_origin[Shepherd's Bush]                -1.2863      0.011   -112.897      0.000      -1.309      -1.264\n",
      "station_origin[Shepherd's Bush Market]         -2.7006      0.024   -111.001      0.000      -2.748      -2.653\n",
      "station_origin[Shoreditch High Street]         -2.1930      0.033    -65.841      0.000      -2.258      -2.128\n",
      "station_origin[Silver Street]                  -0.5887      0.025    -23.132      0.000      -0.639      -0.539\n",
      "station_origin[Sloane Square]                  -2.3497      0.015   -152.397      0.000      -2.380      -2.319\n",
      "station_origin[Snaresbrook]                    -2.0284      0.025    -82.664      0.000      -2.076      -1.980\n",
      "station_origin[South Acton]                    -1.6775      0.040    -42.186      0.000      -1.755      -1.600\n",
      "station_origin[South Ealing]                   -1.8075      0.022    -81.172      0.000      -1.851      -1.764\n",
      "station_origin[South Hampstead]                -2.3721      0.064    -37.219      0.000      -2.497      -2.247\n",
      "station_origin[South Harrow]                   -1.3059      0.026    -49.460      0.000      -1.358      -1.254\n",
      "station_origin[South Kensington]               -2.2747      0.015   -148.619      0.000      -2.305      -2.245\n",
      "station_origin[South Kenton]                   -2.0892      0.031    -67.066      0.000      -2.150      -2.028\n",
      "station_origin[South Quay]                     -2.0082      0.025    -79.794      0.000      -2.058      -1.959\n",
      "station_origin[South Ruislip]                  -1.0609      0.028    -38.525      0.000      -1.115      -1.007\n",
      "station_origin[South Tottenham]                -1.6945      0.049    -34.523      0.000      -1.791      -1.598\n",
      "station_origin[South Wimbledon]                -1.1711      0.017    -67.151      0.000      -1.205      -1.137\n",
      "station_origin[South Woodford]                 -1.0394      0.017    -61.852      0.000      -1.072      -1.006\n",
      "station_origin[Southbury]                      -1.0635      0.043    -24.671      0.000      -1.148      -0.979\n",
      "station_origin[Southfields]                    -1.2603      0.015    -83.367      0.000      -1.290      -1.231\n",
      "station_origin[Southgate]                      -0.9497      0.018    -53.549      0.000      -0.984      -0.915\n",
      "station_origin[Southwark]                      -2.5179      0.016   -161.911      0.000      -2.548      -2.487\n",
      "station_origin[St James Street]                -1.3463      0.031    -42.763      0.000      -1.408      -1.285\n",
      "station_origin[St. James's Park]               -3.4732      0.024   -143.085      0.000      -3.521      -3.426\n",
      "station_origin[St. John's Wood]                -2.5476      0.019   -137.187      0.000      -2.584      -2.511\n",
      "station_origin[St. Paul's]                     -4.2261      0.034   -123.213      0.000      -4.293      -4.159\n",
      "station_origin[Stamford Brook]                 -2.6299      0.024   -109.221      0.000      -2.677      -2.583\n",
      "station_origin[Stamford Hill]                  -2.0486      0.046    -44.991      0.000      -2.138      -1.959\n",
      "station_origin[Stanmore]                       -0.5359      0.021    -26.098      0.000      -0.576      -0.496\n",
      "station_origin[Star Lane]                      -3.2864      0.048    -68.218      0.000      -3.381      -3.192\n",
      "station_origin[Stepney Green]                  -2.7835      0.020   -138.458      0.000      -2.823      -2.744\n",
      "station_origin[Stockwell]                      -1.3705      0.011   -119.940      0.000      -1.393      -1.348\n",
      "station_origin[Stoke Newington]                -1.5781      0.031    -51.216      0.000      -1.639      -1.518\n",
      "station_origin[Stonebridge Park]               -2.4331      0.027    -91.239      0.000      -2.485      -2.381\n",
      "station_origin[Stratford]                       0.5510      0.007     76.899      0.000       0.537       0.565\n",
      "station_origin[Stratford High Street]          -2.9782      0.052    -57.584      0.000      -3.080      -2.877\n",
      "station_origin[Stratford International]        -1.3266      0.022    -60.926      0.000      -1.369      -1.284\n",
      "station_origin[Sudbury Hill]                   -1.5373      0.028    -54.859      0.000      -1.592      -1.482\n",
      "station_origin[Sudbury Town]                   -1.5326      0.027    -57.610      0.000      -1.585      -1.480\n",
      "station_origin[Surrey Quays]                   -0.6960      0.018    -38.822      0.000      -0.731      -0.661\n",
      "station_origin[Swiss Cottage]                  -2.3341      0.018   -130.585      0.000      -2.369      -2.299\n",
      "station_origin[Sydenham]                       -0.2916      0.024    -12.133      0.000      -0.339      -0.245\n",
      "station_origin[Temple]                         -5.1491      0.054    -95.579      0.000      -5.255      -5.044\n",
      "station_origin[Theobalds Grove]                -0.4524      0.044    -10.259      0.000      -0.539      -0.366\n",
      "station_origin[Theydon Bois]                   -1.1497      0.039    -29.439      0.000      -1.226      -1.073\n",
      "station_origin[Tooting Bec]                    -1.1205      0.014    -82.050      0.000      -1.147      -1.094\n",
      "station_origin[Tooting Broadway]               -0.6073      0.012    -50.745      0.000      -0.631      -0.584\n",
      "station_origin[Tottenham Court Road]           -3.5835      0.025   -146.254      0.000      -3.632      -3.535\n",
      "station_origin[Tottenham Hale]                 -0.8468      0.012    -68.899      0.000      -0.871      -0.823\n",
      "station_origin[Totteridge & Whetstone]         -1.2235      0.022    -56.054      0.000      -1.266      -1.181\n",
      "station_origin[Tower Gateway]                  -2.5101      0.035    -72.115      0.000      -2.578      -2.442\n",
      "station_origin[Tower Hill]                     -1.9125      0.012   -153.512      0.000      -1.937      -1.888\n",
      "station_origin[Tufnell Park]                   -2.5787      0.020   -128.681      0.000      -2.618      -2.539\n",
      "station_origin[Turkey Street]                  -0.3538      0.036     -9.883      0.000      -0.424      -0.284\n",
      "station_origin[Turnham Green]                  -1.8953      0.018   -107.796      0.000      -1.930      -1.861\n",
      "station_origin[Turnpike Lane]                  -1.2082      0.014    -88.245      0.000      -1.235      -1.181\n",
      "station_origin[Upminster]                      -1.2029      0.038    -31.928      0.000      -1.277      -1.129\n",
      "station_origin[Upminster Bridge]               -1.2180      0.036    -33.448      0.000      -1.289      -1.147\n",
      "station_origin[Upney]                          -1.8255      0.025    -73.613      0.000      -1.874      -1.777\n",
      "station_origin[Upper Holloway]                 -2.4822      0.052    -47.611      0.000      -2.584      -2.380\n",
      "station_origin[Upton Park]                     -1.3100      0.014    -91.111      0.000      -1.338      -1.282\n",
      "station_origin[Uxbridge]                        0.3906      0.020     19.404      0.000       0.351       0.430\n",
      "station_origin[Vauxhall]                       -0.9784      0.010    -98.869      0.000      -0.998      -0.959\n",
      "station_origin[Victoria]                       -0.4188      0.008    -52.974      0.000      -0.434      -0.403\n",
      "station_origin[Walthamstow Central]             0.0407      0.010      4.157      0.000       0.021       0.060\n",
      "station_origin[Walthamstow Queens Road]        -0.3758      0.032    -11.747      0.000      -0.438      -0.313\n",
      "station_origin[Wandsworth Road]                -1.6534      0.041    -40.687      0.000      -1.733      -1.574\n",
      "station_origin[Wanstead]                       -1.9478      0.023    -83.493      0.000      -1.994      -1.902\n",
      "station_origin[Wanstead Park]                  -0.5751      0.037    -15.739      0.000      -0.647      -0.503\n",
      "station_origin[Wapping]                        -1.7178      0.029    -59.585      0.000      -1.774      -1.661\n",
      "station_origin[Warren Street]                  -3.4609      0.024   -146.392      0.000      -3.507      -3.415\n",
      "station_origin[Warwick Avenue]                 -2.8147      0.021   -131.964      0.000      -2.856      -2.773\n",
      "station_origin[Waterloo]                        0.0871      0.007     12.142      0.000       0.073       0.101\n",
      "station_origin[Watford]                         0.2266      0.028      8.237      0.000       0.173       0.281\n",
      "station_origin[Watford High Street]            -0.5393      0.047    -11.589      0.000      -0.631      -0.448\n",
      "station_origin[Watford Junction]               -0.1990      0.045     -4.383      0.000      -0.288      -0.110\n",
      "station_origin[Wembley Central]                -1.8108      0.022    -82.475      0.000      -1.854      -1.768\n",
      "station_origin[Wembley Park]                   -0.6230      0.013    -46.544      0.000      -0.649      -0.597\n",
      "station_origin[West Acton]                     -2.5452      0.030    -85.298      0.000      -2.604      -2.487\n",
      "station_origin[West Brompton]                  -2.3827      0.017   -138.575      0.000      -2.416      -2.349\n",
      "station_origin[West Croydon]                    0.4105      0.028     14.667      0.000       0.356       0.465\n",
      "station_origin[West Finchley]                  -1.9523      0.026    -74.574      0.000      -2.004      -1.901\n",
      "station_origin[West Ham]                       -1.3374      0.012   -109.500      0.000      -1.361      -1.313\n",
      "station_origin[West Hampstead]                 -1.2005      0.011   -104.676      0.000      -1.223      -1.178\n",
      "station_origin[West Harrow]                    -1.8815      0.032    -59.017      0.000      -1.944      -1.819\n",
      "station_origin[West India Quay]                -4.4921      0.079    -57.001      0.000      -4.647      -4.338\n",
      "station_origin[West Kensington]                -2.6340      0.020   -131.111      0.000      -2.673      -2.595\n",
      "station_origin[West Ruislip]                   -0.8075      0.031    -25.930      0.000      -0.869      -0.746\n",
      "station_origin[West Silvertown]                -2.4581      0.034    -72.524      0.000      -2.525      -2.392\n",
      "station_origin[Westbourne Park]                -2.6562      0.021   -125.216      0.000      -2.698      -2.615\n",
      "station_origin[Westferry]                      -1.8516      0.022    -83.539      0.000      -1.895      -1.808\n",
      "station_origin[Westminster]                    -3.6995      0.026   -140.351      0.000      -3.751      -3.648\n",
      "station_origin[White City]                     -2.4766      0.021   -117.396      0.000      -2.518      -2.435\n",
      "station_origin[White Hart Lane]                -1.2347      0.032    -39.022      0.000      -1.297      -1.173\n",
      "station_origin[Whitechapel]                    -1.4727      0.011   -135.499      0.000      -1.494      -1.451\n",
      "station_origin[Willesden Green]                -1.4279      0.015    -97.847      0.000      -1.456      -1.399\n",
      "station_origin[Willesden Junction]             -1.5968      0.015   -106.503      0.000      -1.626      -1.567\n",
      "station_origin[Wimbledon]                      -0.4865      0.013    -36.236      0.000      -0.513      -0.460\n",
      "station_origin[Wimbledon Park]                 -2.1339      0.025    -84.425      0.000      -2.183      -2.084\n",
      "station_origin[Wood Green]                     -1.0631      0.014    -77.441      0.000      -1.090      -1.036\n",
      "station_origin[Wood Lane]                      -3.2076      0.031   -103.792      0.000      -3.268      -3.147\n",
      "station_origin[Wood Street]                    -0.9451      0.028    -34.122      0.000      -0.999      -0.891\n",
      "station_origin[Woodford]                       -0.6361      0.016    -40.488      0.000      -0.667      -0.605\n",
      "station_origin[Woodgrange Park]                -0.8988      0.044    -20.553      0.000      -0.985      -0.813\n",
      "station_origin[Woodside Park]                  -1.1515      0.019    -60.344      0.000      -1.189      -1.114\n",
      "station_origin[Woolwich Arsenal]                0.5156      0.013     40.263      0.000       0.491       0.541\n",
      "log_jobs                                        0.7554      0.001   1185.153      0.000       0.754       0.757\n",
      "distance                                       -0.0002   1.88e-07   -814.172      0.000      -0.000      -0.000\n",
      "===============================================================================================================\n"
     ]
    }
   ],
   "source": [
    "# GET THE PARAMETERS FROM THE PRODUCTION CONSTRAINED FUNCTION TO USE IN THE MODELLING\n",
    "formula = \"flows ~ station_origin + log_jobs + distance-1\"\n",
    "#run the simulation\n",
    "prod_exp = smf.glm(formula = formula, data=data1, family=sm.families.Poisson()).fit()\n",
    "#summary\n",
    "print(prod_exp.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "63f56368-e0fb-4f13-af7e-f878d27295e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#GET THE PRARMETERS\n",
    "alpha_i = prod_exp.params[0:-2]\n",
    "gamma = prod_exp.params[-2]\n",
    "beta = -prod_exp.params[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3a7a0b7b-3b16-4bee-ab82-e45275090810",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0001531588759409847"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta\n",
    "# NEED TO MAKE SURE THIS IS NEGATIVE IN THE CALCULATIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9d8b8fc1-9173-431a-a381-35f3d82d7c65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7554430253796871"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gamma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "d9269429-cf12-45ad-bf13-95672e6bd2da",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1237/50317739.py:7: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  coefs[\"coef\"] = coefs[\"coef\"].str.replace(x, \"\")\n"
     ]
    }
   ],
   "source": [
    "#ADD THEM BACK INTO THE DF\n",
    "coefs = pd.DataFrame(prod_exp.params)\n",
    "coefs.reset_index(inplace=True)\n",
    "coefs.rename(columns = {0:\"alpha_i\", \"index\":\"coef\"}, inplace = True)\n",
    "to_repl = [\"station_origin\", \"\\[\", \"\\]\"]\n",
    "for x in to_repl:\n",
    "    coefs[\"coef\"] = coefs[\"coef\"].str.replace(x, \"\")\n",
    "\n",
    "#then once you have done this you can join them back into the dataframes\n",
    "data2 = data1.merge(coefs, left_on=\"station_origin\", right_on=\"coef\", how = \"left\")\n",
    "data2.drop(columns = [\"coef\"], inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71eeae9b-6087-4b1c-b732-7aeea7ec2dca",
   "metadata": {},
   "source": [
    "Now that we've calibrated all of the parameters, we can use them to model for Scenario A using the column jobs_scenarioA which reflects a 50% loss in jobs at Canary Wharf."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "61440a50-3e6e-49e8-b2ef-1dc056922c14",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Check the results; FIRST ONE NORMAL JOBS\n",
    "#prod_exp1 are the estimations based on the \"prod(uction)\" constrained model and negative \"exp(onential) decay\"\n",
    "data2[\"prod_exp1\"] = np.exp(data2[\"alpha_i\"]+(gamma*(data2[\"log_jobs\"])) - beta*data2[\"distance\"])\n",
    "\n",
    "data2[\"prod_exp1\"] = round(data2[\"prod_exp1\"],0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fb86825b-203f-4f88-929a-2cfb0d9f4335",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prod_exp1</th>\n",
       "      <th>prod_exp2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78.0</td>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>99.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61408</th>\n",
       "      <td>99.0</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61409</th>\n",
       "      <td>295.0</td>\n",
       "      <td>295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61410</th>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61411</th>\n",
       "      <td>125.0</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61412</th>\n",
       "      <td>80.0</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61413 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       prod_exp1  prod_exp2\n",
       "0           78.0       78.0\n",
       "1            1.0        1.0\n",
       "2            4.0        4.0\n",
       "3           99.0        2.0\n",
       "4           56.0       56.0\n",
       "...          ...        ...\n",
       "61408       99.0       99.0\n",
       "61409      295.0      295.0\n",
       "61410       36.0       36.0\n",
       "61411      125.0      125.0\n",
       "61412       80.0       80.0\n",
       "\n",
       "[61413 rows x 2 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the results; SECOND TIME, COMPARE THE FLOWS OF PRE-SCALED NEW Dj VARIABLE (JOBS) WITH 1/2 CW JOBS\n",
    "data2[\"prod_exp2\"] = np.exp(data2[\"alpha_i\"]+(gamma*(data2[\"logjobs_scenarioA\"])) - beta*data2[\"distance\"])\n",
    "\n",
    "data2[\"prod_exp2\"] = round(data2[\"prod_exp2\"])\n",
    "\n",
    "data2[[\"prod_exp1\", \"prod_exp2\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "de65be3d-c571-438f-99dc-705e5e4983ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1542283"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#NOW, WE WANT TO MAKE SURE THE FLOWS FROM MODELLING JUST BASED ON THE JOBS IS THE SAME AS JUST THE SUM OF INITIAL FLOWS\n",
    "sum(data2[\"flows\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "fcbd09b8-d255-4e62-9753-fe0a8b5de2a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1541336.0"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(data2[\"prod_exp1\"])\n",
    "# THEY ARE! (mostly, likely due to rounding the dataset of this size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "4e114957-1062-4351-844a-f2b8ef1e9322",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1494386.0"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# NOW, WE WANT TO COMPARE THE SUM OF THE FLOWS OF THE ORIGIONAL JOBS DATA WITH OUR NEW 1/2 JOBS IN CW DATA\n",
    "sum(data2[\"prod_exp2\"])\n",
    "# WHAT IS HAPPENING IS THAT WE DECREASED FLOWS TO CW BUT DIDN'T SCALE/INCREASE OTHER FLOWS, SO NEXT STEP IS TO DO THAT\n",
    "# AKA, \"the original constraints are still working on the other zones so we need to do Ai to scale the flows\" - Adam's Prac wk3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ab51aebf-3b90-4d1c-9574-cb3e49dab2ef",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#JUST OUT OF CURIOSITY TO SEE WHERE THINGS WENT WRONG\n",
    "mismatch_rows = data2[data2[\"prod_exp1\"] != data2[\"prod_exp2\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "925cb9d8-aa2e-44b1-b37e-83b316e59fa8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_population</th>\n",
       "      <th>log_jobs</th>\n",
       "      <th>log_distance</th>\n",
       "      <th>logjobs_scenarioA</th>\n",
       "      <th>jobs_scenarioA</th>\n",
       "      <th>alpha_i</th>\n",
       "      <th>prod_exp1</th>\n",
       "      <th>prod_exp2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "      <td>6.396930</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>8.534545</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-2.916690</td>\n",
       "      <td>99.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>Acton Town</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>57</td>\n",
       "      <td>3745</td>\n",
       "      <td>58772</td>\n",
       "      <td>20398.165882</td>\n",
       "      <td>8.228444</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>9.923249</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-1.615372</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>348</th>\n",
       "      <td>Aldgate</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>2886</td>\n",
       "      <td>58772</td>\n",
       "      <td>6564.419680</td>\n",
       "      <td>7.967973</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>8.789572</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-2.945319</td>\n",
       "      <td>77.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>595</th>\n",
       "      <td>Aldgate East</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>3</td>\n",
       "      <td>3172</td>\n",
       "      <td>58772</td>\n",
       "      <td>5127.998899</td>\n",
       "      <td>8.062433</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>8.542666</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-2.857026</td>\n",
       "      <td>105.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>817</th>\n",
       "      <td>All Saints</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>67</td>\n",
       "      <td>740</td>\n",
       "      <td>58772</td>\n",
       "      <td>1340.088733</td>\n",
       "      <td>6.608001</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>7.201237</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-2.880687</td>\n",
       "      <td>183.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60534</th>\n",
       "      <td>Wood Green</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>64</td>\n",
       "      <td>6667</td>\n",
       "      <td>58772</td>\n",
       "      <td>16849.246595</td>\n",
       "      <td>8.805075</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>9.732121</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-1.063066</td>\n",
       "      <td>105.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60777</th>\n",
       "      <td>Wood Lane</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>0</td>\n",
       "      <td>1088</td>\n",
       "      <td>58772</td>\n",
       "      <td>17092.091760</td>\n",
       "      <td>6.993015</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>9.746430</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-3.207601</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61001</th>\n",
       "      <td>Woodford</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>192</td>\n",
       "      <td>4868</td>\n",
       "      <td>58772</td>\n",
       "      <td>13963.787075</td>\n",
       "      <td>8.490644</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>9.544294</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-0.636058</td>\n",
       "      <td>250.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61233</th>\n",
       "      <td>Woodside Park</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>42</td>\n",
       "      <td>3093</td>\n",
       "      <td>58772</td>\n",
       "      <td>22356.567178</td>\n",
       "      <td>8.037220</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>10.014920</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>-1.151461</td>\n",
       "      <td>41.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61381</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>82</td>\n",
       "      <td>7892</td>\n",
       "      <td>58772</td>\n",
       "      <td>9863.964667</td>\n",
       "      <td>8.973732</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>9.196745</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>29386.0</td>\n",
       "      <td>0.515622</td>\n",
       "      <td>1481.0</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>304 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         station_origin station_destination  flows  population   jobs  \\\n",
       "3            Abbey Road        Canary Wharf      1         599  58772   \n",
       "126          Acton Town        Canary Wharf     57        3745  58772   \n",
       "348             Aldgate        Canary Wharf      1        2886  58772   \n",
       "595        Aldgate East        Canary Wharf      3        3172  58772   \n",
       "817          All Saints        Canary Wharf     67         740  58772   \n",
       "...                 ...                 ...    ...         ...    ...   \n",
       "60534        Wood Green        Canary Wharf     64        6667  58772   \n",
       "60777         Wood Lane        Canary Wharf      0        1088  58772   \n",
       "61001          Woodford        Canary Wharf    192        4868  58772   \n",
       "61233     Woodside Park        Canary Wharf     42        3093  58772   \n",
       "61381  Woolwich Arsenal        Canary Wharf     82        7892  58772   \n",
       "\n",
       "           distance  log_population   log_jobs  log_distance  \\\n",
       "3       5086.514220        6.396930  10.981438      8.534545   \n",
       "126    20398.165882        8.228444  10.981438      9.923249   \n",
       "348     6564.419680        7.967973  10.981438      8.789572   \n",
       "595     5127.998899        8.062433  10.981438      8.542666   \n",
       "817     1340.088733        6.608001  10.981438      7.201237   \n",
       "...             ...             ...        ...           ...   \n",
       "60534  16849.246595        8.805075  10.981438      9.732121   \n",
       "60777  17092.091760        6.993015  10.981438      9.746430   \n",
       "61001  13963.787075        8.490644  10.981438      9.544294   \n",
       "61233  22356.567178        8.037220  10.981438     10.014920   \n",
       "61381   9863.964667        8.973732  10.981438      9.196745   \n",
       "\n",
       "       logjobs_scenarioA  jobs_scenarioA   alpha_i  prod_exp1  prod_exp2  \n",
       "3               5.490719         29386.0 -2.916690       99.0        2.0  \n",
       "126             5.490719         29386.0 -1.615372       35.0        1.0  \n",
       "348             5.490719         29386.0 -2.945319       77.0        1.0  \n",
       "595             5.490719         29386.0 -2.857026      105.0        2.0  \n",
       "817             5.490719         29386.0 -2.880687      183.0        3.0  \n",
       "...                  ...             ...       ...        ...        ...  \n",
       "60534           5.490719         29386.0 -1.063066      105.0        2.0  \n",
       "60777           5.490719         29386.0 -3.207601       12.0        0.0  \n",
       "61001           5.490719         29386.0 -0.636058      250.0        4.0  \n",
       "61233           5.490719         29386.0 -1.151461       41.0        1.0  \n",
       "61381           5.490719         29386.0  0.515622     1481.0       23.0  \n",
       "\n",
       "[304 rows x 14 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mismatch_rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9232d03-ac5b-47e0-8d37-b1d45ef24350",
   "metadata": {},
   "source": [
    "Now that we've done this, we can with with estimates/find Ai for the scenario"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "82a40f76-9208-400a-91d6-c82c006840dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#JUST SAVE IT AS A NEW DF IN CASE I NEED TO RE-RUN THIS SECTION...\n",
    "data22 = data2.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a3892f8-cbee-48e2-8c63-61739c4bb98d",
   "metadata": {},
   "source": [
    "This is what needs to be used with negative exponential decay:\n",
    "\n",
    "$exp (-\\beta d_{ij})$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "ca57cd67-fb25-4a5d-9965-dbbbeef57689",
   "metadata": {},
   "outputs": [],
   "source": [
    "# CREATE THE SCALING FACTOR NECESSARY FOR PRODUCTION CONSTRAINED\n",
    "jobs_gamma = data22[\"jobs\"]**gamma\n",
    "dist_beta = np.exp(-beta * data22[\"distance\"])\n",
    "\n",
    "# THIS DEFINITION OF THE BETA FOR THE PRODUCTION CONSTRAINED MODEL IS IMPORTANT BECAUSE IT\n",
    "# SPECIFICALLY REPRESENTS THE EXPONENTIAL DECAY VERSION OF THE MODEL.\n",
    "\n",
    "#calcualte the first stage of the Ai values\n",
    "data22[\"Ai1\"] = jobs_gamma * dist_beta\n",
    "\n",
    "#now do the sum over all js bit\n",
    "A_i = pd.DataFrame(data22.groupby([\"station_origin\"])[\"Ai1\"].agg(np.sum))\n",
    "\n",
    "#now divide into 1\n",
    "A_i[\"Ai1\"] = 1/A_i[\"Ai1\"]\n",
    "A_i.rename(columns={\"Ai1\":\"A_i\"}, inplace=True)\n",
    "\n",
    "#and write the A_i values back into the dataframe\n",
    "data22 = data22.merge(A_i, left_on=\"station_origin\", right_index=True, how=\"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a94746da-18eb-486b-a239-ab718bdca65f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Check the results; THIS IS LIKE MODELLING WITH PRODEST 1 BUT USING THE BALANCING FACTORS WHERE NO DISTRIBITIONS HAVE CHANGED\n",
    "# SO, THE FLOWS SHOULD BE THE SAME AS PROD_EXP1\n",
    "data22[\"prod_exp3\"] = data22[\"A_i\"]*data22[\"population\"]*jobs_gamma*dist_beta\n",
    "\n",
    "data22[\"prod_exp3\"] = round(data22[\"prod_exp3\"],0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "68497a6b-4e0c-415b-b62d-3d9bdd2ee29e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prod_exp1</th>\n",
       "      <th>prod_exp3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78.0</td>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>99.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61408</th>\n",
       "      <td>99.0</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61409</th>\n",
       "      <td>295.0</td>\n",
       "      <td>295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61410</th>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61411</th>\n",
       "      <td>125.0</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61412</th>\n",
       "      <td>80.0</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61413 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       prod_exp1  prod_exp3\n",
       "0           78.0       78.0\n",
       "1            1.0        1.0\n",
       "2            4.0        4.0\n",
       "3           99.0      100.0\n",
       "4           56.0       56.0\n",
       "...          ...        ...\n",
       "61408       99.0       99.0\n",
       "61409      295.0      295.0\n",
       "61410       36.0       36.0\n",
       "61411      125.0      125.0\n",
       "61412       80.0       80.0\n",
       "\n",
       "[61413 rows x 2 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data22[[\"prod_exp1\", \"prod_exp3\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "24e54f91-59bd-4c6b-be9f-9107a82e15a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1541465.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the sums to make sure the totals are conserved\n",
    "sum(data22[\"prod_exp3\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "01476074-bdec-40ab-b640-41c253e12078",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4681338443441393"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# CHECK THE GOODNESS OF FIT\n",
    "CalcRSqaured(data22['flows'], data22['prod_exp3'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "37134e49-165f-4356-9ba8-777ca9084d3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "96.254"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CalcRMSE(data22['flows'], data22['prod_exp3'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "c6a68052-12ab-4b13-958a-45f6007f5607",
   "metadata": {},
   "outputs": [],
   "source": [
    "jobs_gamma2 = data22[\"jobs_scenarioA\"]**gamma\n",
    "\n",
    "#calcualte the first stage of the Ai values\n",
    "data22[\"Ai1\"] = jobs_gamma2 * dist_beta\n",
    "\n",
    "#now do the sum over all js bit\n",
    "A_i = pd.DataFrame(data22.groupby([\"station_origin\"])[\"Ai1\"].agg(np.sum))\n",
    "\n",
    "#now divide into 1\n",
    "A_i[\"Ai1\"] = 1/A_i[\"Ai1\"]\n",
    "A_i.rename(columns={\"Ai1\":\"A_i2\"}, inplace=True)\n",
    "\n",
    "#and write the A_i values back into the dataframe\n",
    "data22 = data22.merge(A_i, left_on=\"station_origin\", right_index=True, how=\"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "09ae54af-9bf8-4f98-859a-fa07f5fe6674",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Check the results; THIRD TIME BUT DO THE EQU THAT HAS AI BC NOW YOU KNOW AI\n",
    "data22[\"prod_exp4\"] = data22[\"A_i2\"]*data22[\"population\"]*jobs_gamma2*dist_beta\n",
    "\n",
    "data22[\"prod_exp4\"] = round(data22[\"prod_exp4\"],0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "b96af79c-26c3-4cc9-95dc-6a4e6c9f1507",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prod_exp3</th>\n",
       "      <th>prod_exp4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78.0</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100.0</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61408</th>\n",
       "      <td>99.0</td>\n",
       "      <td>107.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61409</th>\n",
       "      <td>295.0</td>\n",
       "      <td>320.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61410</th>\n",
       "      <td>36.0</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61411</th>\n",
       "      <td>125.0</td>\n",
       "      <td>135.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61412</th>\n",
       "      <td>80.0</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61413 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       prod_exp3  prod_exp4\n",
       "0           78.0       83.0\n",
       "1            1.0        2.0\n",
       "2            4.0        4.0\n",
       "3          100.0       63.0\n",
       "4           56.0       60.0\n",
       "...          ...        ...\n",
       "61408       99.0      107.0\n",
       "61409      295.0      320.0\n",
       "61410       36.0       39.0\n",
       "61411      125.0      135.0\n",
       "61412       80.0       86.0\n",
       "\n",
       "[61413 rows x 2 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data22[[\"prod_exp3\", \"prod_exp4\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e0f96ef5-444e-4327-a5bd-c3be94c17408",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1541508.0"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#NOW THAT WE HAVE BALANCED THE EQUATION THAT USES THE NEW DATA, WE SHOULD HAVE THE TOTAL NUMBER OF FLOWS CONSERVED\n",
    "#AND WE DO, YAY! HOWEVER, THE DISTRIBUTION IS DIFFERENT (WHICH IS CLEAR FROM THE ABOVE)\n",
    "sum(data22[\"prod_exp4\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "34e8d844-6382-4669-8f0b-09fba437df88",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.45174814551623194"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# CHECK THE GOODNESS OF FIT\n",
    "CalcRSqaured(data22['flows'], data22['prod_exp4'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "39710469-31bf-422b-950f-ad48cca2e089",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "97.679"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CalcRMSE(data22['flows'], data22['prod_exp4'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "b2cc314c-2321-4dfa-b14d-09cbb0bf29bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.016385698827907358"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#DIFF IN GOODNESS OF FIT\n",
    "CalcRSqaured(data22['flows'], data22['prod_exp3']) - CalcRSqaured(data22['flows'], data22['prod_exp4'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "97376572-17ec-4c1b-af6c-1643c94d2714",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.4249999999999972"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CalcRMSE(data22['flows'], data22['prod_exp3']) - CalcRMSE(data22['flows'], data22['prod_exp4'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37666f68-b3c0-4d56-9d81-bdf3038cbd93",
   "metadata": {},
   "source": [
    "THE DIFFERENCE IN THE R2 BETWEEN OUR MODEL (SCENARIO A) AND THE ACTUAL DATA IS SO MINISCULE, SUGGESTING THE MODEL IS GOOD! And, the RMSE is actually even better somehow..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26503431-d740-4b51-a61a-c3df9383e2df",
   "metadata": {},
   "source": [
    "### Scenario B\n",
    "*Notes to self*:\n",
    "Here, I will change the beta parameter to be increased but **I will not use the canary wharf jobs bc the assignment doesn't specify that I should.** It makes more sense in my mind to isolate the real world flows to compare to the impact of cost of transport. To model an increase in the financial cost of transport, I will assume the cost is proportionally related to distance. This is, in reality, the case with the tube. If you travel within differnt zones you pay different rates. While not a perfect 1-to-1 comparison, it is still useful here when we don't really have financial cost data. So, I will just multiply beta by 1.15 and then by 1.25. If you do large value increases, it will not work well in an exponential decay function because flows to some places will be SO close to zero that when you round things, it will round to 0 and thus those people will disappear. Further, these values reflect a 15% and 25% increase in cost which is already substantial. If we think about this in real world terms, that would be the cost would rise from £3.25 to £3.73 (15%) and £4.06 (25%). If you think about this in monthly or annual cost, it is actually a *significant* amount of money for peoplek who use the tube to commute to work 5 days a week. When you do this, you still loose some people - 983 peope - but they only make up 0.0006% of all the people in the dataset so this number is negligible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "35bf7e4b-ad76-4983-8cb6-cb34962382bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "data3 = data22.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fe6d161-b55c-4a4d-a519-f9fcbcb97f3d",
   "metadata": {},
   "source": [
    "#### First New Cost Value (Old Beta * 1.15)\n",
    "In selecting the beta, it is important it reflects the 'rules' of exponential decay (an larger number like 2 here would count for an almost impossible rise in cost, more than 10000 time more!)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "4ad94177-a717-4582-841a-68d92ed9cc1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#recalculate the Ai so it reflects the updated decay function\n",
    "jobs_gamma = data3[\"jobs\"]**gamma\n",
    "dist_beta1 = np.exp(-(1.15*beta) * data3[\"distance\"]) \n",
    "\n",
    "data3[\"Ai1_new\"] = jobs_gamma * dist_beta1\n",
    "\n",
    "A_i = pd.DataFrame(data3.groupby([\"station_origin\"])[\"Ai1_new\"].agg(np.sum))\n",
    "\n",
    "A_i[\"Ai1_new\"] = 1/A_i[\"Ai1_new\"]\n",
    "A_i.rename(columns={\"Ai1_new\":\"A_i_new1\"}, inplace=True)\n",
    "\n",
    "data3 = data3.merge(A_i, left_on=\"station_origin\", right_index=True, how=\"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "9cc29f1e-ab46-40f4-b55e-ae01d74a12c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "data3[\"scenarioB1\"] = data3[\"A_i_new1\"]*data3[\"population\"]*jobs_gamma*dist_beta1\n",
    "data3[\"scenarioB1\"] = round(data3[\"scenarioB1\"],0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9036c464-ccd1-413a-8728-6700f82165af",
   "metadata": {},
   "source": [
    "#### Second New Cost Value (Old Beta * 1.25)\n",
    "Here, I will make a much more substantial change for the sake of comparison to the more 'realistic' 1.25x the cost of transport."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "b387ec36-6660-4fe7-8ee1-b077712c89db",
   "metadata": {},
   "outputs": [],
   "source": [
    "#recalculate the Ai so it reflects the updated decay function\n",
    "jobs_gamma = data3[\"jobs\"]**gamma\n",
    "dist_beta2 = np.exp(-(1.25*beta) * data3[\"distance\"]) \n",
    "\n",
    "data3[\"Ai1_new2\"] = jobs_gamma * dist_beta2\n",
    "\n",
    "A_i = pd.DataFrame(data3.groupby([\"station_origin\"])[\"Ai1_new2\"].agg(np.sum))\n",
    "\n",
    "A_i[\"Ai1_new2\"] = 1/A_i[\"Ai1_new2\"]\n",
    "A_i.rename(columns={\"Ai1_new2\":\"A_i_new2\"}, inplace=True)\n",
    "\n",
    "data3 = data3.merge(A_i, left_on=\"station_origin\", right_index=True, how=\"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "8d462236-018b-4f39-8398-0fb9d952c86c",
   "metadata": {},
   "outputs": [],
   "source": [
    "data3[\"scenarioB2\"] = data3[\"A_i_new2\"]*data3[\"population\"]*jobs_gamma*dist_beta2\n",
    "data3[\"scenarioB2\"] = round(data3[\"scenarioB2\"],0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "871c0bc2-1664-4b45-b5d0-c9824c02fbc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>scenarioB1</th>\n",
       "      <th>scenarioB2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>70.0</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>97.0</td>\n",
       "      <td>94.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>58.0</td>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61408</th>\n",
       "      <td>91.0</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61409</th>\n",
       "      <td>301.0</td>\n",
       "      <td>305.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61410</th>\n",
       "      <td>36.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61411</th>\n",
       "      <td>138.0</td>\n",
       "      <td>147.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61412</th>\n",
       "      <td>79.0</td>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61413 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       scenarioB1  scenarioB2\n",
       "0            70.0        66.0\n",
       "1             1.0         1.0\n",
       "2             4.0         4.0\n",
       "3            97.0        94.0\n",
       "4            58.0        59.0\n",
       "...           ...         ...\n",
       "61408        91.0        85.0\n",
       "61409       301.0       305.0\n",
       "61410        36.0        36.0\n",
       "61411       138.0       147.0\n",
       "61412        79.0        78.0\n",
       "\n",
       "[61413 rows x 2 columns]"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data3[[\"scenarioB1\",\"scenarioB2\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "61f215af-f54f-4088-bb68-bb0cea5577e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1541305.0"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(data3[\"scenarioB2\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "8ed79489-77cc-44e9-8ac2-9fd987a1db1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1541300.0"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(data3[\"scenarioB1\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "824f91e8-eb49-4ef6-8e78-7be63c766693",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1542283"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(data3[\"flows\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "8f641043-bb0d-4b4f-b58c-a3bffa591ddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00063736681270558"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1542283-1541300)/1542283"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "e2ad1699-2dbb-4505-a3e9-4905ab87e9ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "mismatch_rows_scenarioB = data3[data3[\"scenarioB1\"] != data3[\"scenarioB2\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "d41d994a-3980-4774-b36d-fbdb662c6ab6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>station_origin</th>\n",
       "      <th>station_destination</th>\n",
       "      <th>flows</th>\n",
       "      <th>population</th>\n",
       "      <th>jobs</th>\n",
       "      <th>distance</th>\n",
       "      <th>log_population</th>\n",
       "      <th>log_jobs</th>\n",
       "      <th>log_distance</th>\n",
       "      <th>logjobs_scenarioA</th>\n",
       "      <th>...</th>\n",
       "      <th>A_i</th>\n",
       "      <th>prod_exp3</th>\n",
       "      <th>A_i2</th>\n",
       "      <th>prod_exp4</th>\n",
       "      <th>scenarioB1</th>\n",
       "      <th>scenarioB2</th>\n",
       "      <th>Ai1_new</th>\n",
       "      <th>A_i_new1</th>\n",
       "      <th>Ai1_new2</th>\n",
       "      <th>A_i_new2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Bank and Monument</td>\n",
       "      <td>0</td>\n",
       "      <td>599</td>\n",
       "      <td>78549</td>\n",
       "      <td>8131.525097</td>\n",
       "      <td>6.396930</td>\n",
       "      <td>11.271491</td>\n",
       "      <td>9.003627</td>\n",
       "      <td>11.271491</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000090</td>\n",
       "      <td>78.0</td>\n",
       "      <td>0.000097</td>\n",
       "      <td>83.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>1191.218301</td>\n",
       "      <td>0.000098</td>\n",
       "      <td>1051.728543</td>\n",
       "      <td>0.000104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canary Wharf</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>58772</td>\n",
       "      <td>5086.514220</td>\n",
       "      <td>6.396930</td>\n",
       "      <td>10.981438</td>\n",
       "      <td>8.534545</td>\n",
       "      <td>5.490719</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000090</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.000097</td>\n",
       "      <td>63.0</td>\n",
       "      <td>97.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>1635.880146</td>\n",
       "      <td>0.000098</td>\n",
       "      <td>1513.275483</td>\n",
       "      <td>0.000104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Canning Town</td>\n",
       "      <td>37</td>\n",
       "      <td>599</td>\n",
       "      <td>15428</td>\n",
       "      <td>2228.923167</td>\n",
       "      <td>6.396930</td>\n",
       "      <td>9.644004</td>\n",
       "      <td>7.709722</td>\n",
       "      <td>9.644004</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000090</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0.000097</td>\n",
       "      <td>60.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>985.215525</td>\n",
       "      <td>0.000098</td>\n",
       "      <td>952.149907</td>\n",
       "      <td>0.000104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Cutty Sark</td>\n",
       "      <td>2</td>\n",
       "      <td>599</td>\n",
       "      <td>1748</td>\n",
       "      <td>8503.898909</td>\n",
       "      <td>6.396930</td>\n",
       "      <td>7.466799</td>\n",
       "      <td>9.048398</td>\n",
       "      <td>7.466799</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000090</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.000097</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>62.959697</td>\n",
       "      <td>0.000098</td>\n",
       "      <td>55.271093</td>\n",
       "      <td>0.000104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Abbey Road</td>\n",
       "      <td>Shadwell</td>\n",
       "      <td>1</td>\n",
       "      <td>599</td>\n",
       "      <td>7447</td>\n",
       "      <td>6583.570466</td>\n",
       "      <td>6.396930</td>\n",
       "      <td>8.915701</td>\n",
       "      <td>8.792484</td>\n",
       "      <td>8.915701</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000090</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.000097</td>\n",
       "      <td>18.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>263.913256</td>\n",
       "      <td>0.000098</td>\n",
       "      <td>238.599699</td>\n",
       "      <td>0.000104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61407</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>Stratford International</td>\n",
       "      <td>314</td>\n",
       "      <td>7892</td>\n",
       "      <td>1546</td>\n",
       "      <td>11696.031993</td>\n",
       "      <td>8.973732</td>\n",
       "      <td>7.344073</td>\n",
       "      <td>9.367090</td>\n",
       "      <td>7.344073</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000212</td>\n",
       "      <td>72.0</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>78.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>32.703639</td>\n",
       "      <td>0.000265</td>\n",
       "      <td>27.340011</td>\n",
       "      <td>0.000306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61408</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>Tower Gateway</td>\n",
       "      <td>127</td>\n",
       "      <td>7892</td>\n",
       "      <td>3342</td>\n",
       "      <td>13401.795549</td>\n",
       "      <td>8.973732</td>\n",
       "      <td>8.114624</td>\n",
       "      <td>9.503219</td>\n",
       "      <td>8.114624</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000212</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>107.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>43.354715</td>\n",
       "      <td>0.000265</td>\n",
       "      <td>35.309607</td>\n",
       "      <td>0.000306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61409</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>West Ham</td>\n",
       "      <td>608</td>\n",
       "      <td>7892</td>\n",
       "      <td>5487</td>\n",
       "      <td>8701.454361</td>\n",
       "      <td>8.973732</td>\n",
       "      <td>8.610319</td>\n",
       "      <td>9.071360</td>\n",
       "      <td>8.610319</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000212</td>\n",
       "      <td>295.0</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>320.0</td>\n",
       "      <td>301.0</td>\n",
       "      <td>305.0</td>\n",
       "      <td>144.294620</td>\n",
       "      <td>0.000265</td>\n",
       "      <td>126.290737</td>\n",
       "      <td>0.000306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61411</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>West Silvertown</td>\n",
       "      <td>81</td>\n",
       "      <td>7892</td>\n",
       "      <td>893</td>\n",
       "      <td>5355.248554</td>\n",
       "      <td>8.973732</td>\n",
       "      <td>6.795706</td>\n",
       "      <td>8.586019</td>\n",
       "      <td>6.795706</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000212</td>\n",
       "      <td>125.0</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>135.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>147.0</td>\n",
       "      <td>66.002236</td>\n",
       "      <td>0.000265</td>\n",
       "      <td>60.804770</td>\n",
       "      <td>0.000306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61412</th>\n",
       "      <td>Woolwich Arsenal</td>\n",
       "      <td>Westferry</td>\n",
       "      <td>76</td>\n",
       "      <td>7892</td>\n",
       "      <td>1250</td>\n",
       "      <td>9958.371322</td>\n",
       "      <td>8.973732</td>\n",
       "      <td>7.131699</td>\n",
       "      <td>9.206269</td>\n",
       "      <td>7.131699</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000212</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>86.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>37.825856</td>\n",
       "      <td>0.000265</td>\n",
       "      <td>32.475033</td>\n",
       "      <td>0.000306</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>27068 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         station_origin      station_destination  flows  population   jobs  \\\n",
       "0            Abbey Road        Bank and Monument      0         599  78549   \n",
       "3            Abbey Road             Canary Wharf      1         599  58772   \n",
       "4            Abbey Road             Canning Town     37         599  15428   \n",
       "7            Abbey Road               Cutty Sark      2         599   1748   \n",
       "21           Abbey Road                 Shadwell      1         599   7447   \n",
       "...                 ...                      ...    ...         ...    ...   \n",
       "61407  Woolwich Arsenal  Stratford International    314        7892   1546   \n",
       "61408  Woolwich Arsenal            Tower Gateway    127        7892   3342   \n",
       "61409  Woolwich Arsenal                 West Ham    608        7892   5487   \n",
       "61411  Woolwich Arsenal          West Silvertown     81        7892    893   \n",
       "61412  Woolwich Arsenal                Westferry     76        7892   1250   \n",
       "\n",
       "           distance  log_population   log_jobs  log_distance  \\\n",
       "0       8131.525097        6.396930  11.271491      9.003627   \n",
       "3       5086.514220        6.396930  10.981438      8.534545   \n",
       "4       2228.923167        6.396930   9.644004      7.709722   \n",
       "7       8503.898909        6.396930   7.466799      9.048398   \n",
       "21      6583.570466        6.396930   8.915701      8.792484   \n",
       "...             ...             ...        ...           ...   \n",
       "61407  11696.031993        8.973732   7.344073      9.367090   \n",
       "61408  13401.795549        8.973732   8.114624      9.503219   \n",
       "61409   8701.454361        8.973732   8.610319      9.071360   \n",
       "61411   5355.248554        8.973732   6.795706      8.586019   \n",
       "61412   9958.371322        8.973732   7.131699      9.206269   \n",
       "\n",
       "       logjobs_scenarioA  ...       A_i  prod_exp3      A_i2  prod_exp4  \\\n",
       "0              11.271491  ...  0.000090       78.0  0.000097       83.0   \n",
       "3               5.490719  ...  0.000090      100.0  0.000097       63.0   \n",
       "4               9.644004  ...  0.000090       56.0  0.000097       60.0   \n",
       "7               7.466799  ...  0.000090        4.0  0.000097        4.0   \n",
       "21              8.915701  ...  0.000090       17.0  0.000097       18.0   \n",
       "...                  ...  ...       ...        ...       ...        ...   \n",
       "61407           7.344073  ...  0.000212       72.0  0.000230       78.0   \n",
       "61408           8.114624  ...  0.000212       99.0  0.000230      107.0   \n",
       "61409           8.610319  ...  0.000212      295.0  0.000230      320.0   \n",
       "61411           6.795706  ...  0.000212      125.0  0.000230      135.0   \n",
       "61412           7.131699  ...  0.000212       80.0  0.000230       86.0   \n",
       "\n",
       "       scenarioB1  scenarioB2      Ai1_new  A_i_new1     Ai1_new2  A_i_new2  \n",
       "0            70.0        66.0  1191.218301  0.000098  1051.728543  0.000104  \n",
       "3            97.0        94.0  1635.880146  0.000098  1513.275483  0.000104  \n",
       "4            58.0        59.0   985.215525  0.000098   952.149907  0.000104  \n",
       "7             4.0         3.0    62.959697  0.000098    55.271093  0.000104  \n",
       "21           16.0        15.0   263.913256  0.000098   238.599699  0.000104  \n",
       "...           ...         ...          ...       ...          ...       ...  \n",
       "61407        68.0        66.0    32.703639  0.000265    27.340011  0.000306  \n",
       "61408        91.0        85.0    43.354715  0.000265    35.309607  0.000306  \n",
       "61409       301.0       305.0   144.294620  0.000265   126.290737  0.000306  \n",
       "61411       138.0       147.0    66.002236  0.000265    60.804770  0.000306  \n",
       "61412        79.0        78.0    37.825856  0.000265    32.475033  0.000306  \n",
       "\n",
       "[27068 rows x 25 columns]"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mismatch_rows_scenarioB"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2e3ed1b-bb37-4b93-b3c9-af30ec0f3171",
   "metadata": {},
   "source": [
    "### Analysis/Comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "842c729c-ae4d-4957-8b81-cafd17aad10f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          flows  prod_exp4  Difference\n",
      "station_destination                                   \n",
      "Bank and Monument         78549    70067.0     -8482.0\n",
      "Stratford                 55954    67169.0     11215.0\n",
      "Liverpool Street          61122    59382.0     -1740.0\n",
      "Oxford Circus             44368    40079.0     -4289.0\n",
      "King's Cross St. Pancras  33330    30812.0     -2518.0\n",
      "Highbury & Islington      25385    29987.0      4602.0\n",
      "Canary Wharf              58772    29502.0    -29270.0\n",
      "Victoria                  33251    28946.0     -4305.0\n",
      "London Bridge             29926    27431.0     -2495.0\n",
      "Green Park                26754    26744.0       -10.0\n"
     ]
    }
   ],
   "source": [
    "# Group 'data22' by 'station_destination' and calculate the sum of 'flows' and 'prod_exp4'\n",
    "grouped_data = data22.groupby(\"station_destination\").agg({'flows': 'sum', 'prod_exp4': 'sum'})\n",
    "\n",
    "# Sort the grouped data based on the 'prod_exp4' values\n",
    "sorted_data = grouped_data.sort_values(by=\"prod_exp4\", ascending=False)\n",
    "\n",
    "# Add a new column 'Difference' to show the difference between 'flows' and 'prod_exp4'\n",
    "sorted_data['Difference'] = sorted_data['prod_exp4'] - sorted_data['flows']\n",
    "\n",
    "# Select the top 10 destinations\n",
    "top_10_destinations = sorted_data.head(10)\n",
    "\n",
    "# Display the top 10 destinations with the number of jobs and difference\n",
    "rounded_destinations = round(top_10_destinations, 0)\n",
    "rounded_destinations['Difference'] = rounded_destinations['Difference'].fillna(0)  # Replace NaN with 0\n",
    "print(rounded_destinations)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98f7c27d-9926-46d2-92c5-2b61e92ebc06",
   "metadata": {},
   "source": [
    "| Station Destination        | Initial Flows | Model Predictions | Difference |\n",
    "|-------------------------|-------|-----------|------------|\n",
    "| Bank and Monument       | 78549 | 70067     | <span style=\"color:red\">-8482</span> |\n",
    "| Stratford               | 55954 | 67169     | <span style=\"color:green\">11215</span> |\n",
    "| Liverpool Street        | 61122 | 59382     | <span style=\"color:red\">-1740</span> |\n",
    "| Oxford Circus           | 44368 | 40079     | <span style=\"color:red\">-4289</span> |\n",
    "| King's Cross St. Pancras| 33330 | 30812     | <span style=\"color:red\">-2518</span> |\n",
    "| Highbury & Islington    | 25385 | 29987     | <span style=\"color:green\">4602</span> |\n",
    "| Canary Wharf            | 58772 | 29502     | <span style=\"color:red\">-29270</span> |\n",
    "| Victoria                | 33251 | 28946     | <span style=\"color:red\">-4305</span> |\n",
    "| London Bridge           | 29926 | 27431     | <span style=\"color:red\">-2495</span> |\n",
    "| Green Park              | 26754 | 26744     | <span style=\"color:red\">-10</span> |\n",
    "\n",
    "\n",
    "\n",
    "*Note: the difference column is calculated through the initial flows - model predictions*\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "574f32a0-7a36-4814-b967-0c0b711389d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| station_destination   |   flows |   prod_exp4 | Difference                             |   Absolute_Difference |\n",
      "|:----------------------|--------:|------------:|:---------------------------------------|----------------------:|\n",
      "| Canary Wharf          |   58772 |       29502 | <span style=\"color:red\">-29270</span>  |                 29270 |\n",
      "| Stratford             |   55954 |       67169 | <span style=\"color:green\">11215</span> |                 11215 |\n",
      "| Bank and Monument     |   78549 |       70067 | <span style=\"color:red\">-8482</span>   |                  8482 |\n",
      "| Whitechapel           |   17633 |       24450 | <span style=\"color:green\">6817</span>  |                  6817 |\n",
      "| Hammersmith           |   18250 |       13072 | <span style=\"color:red\">-5178</span>   |                  5178 |\n",
      "| Canada Water          |   20443 |       25348 | <span style=\"color:green\">4905</span>  |                  4905 |\n",
      "| Highbury & Islington  |   25385 |       29987 | <span style=\"color:green\">4602</span>  |                  4602 |\n",
      "| Victoria              |   33251 |       28946 | <span style=\"color:red\">-4305</span>   |                  4305 |\n",
      "| Wimbledon             |    6295 |        1999 | <span style=\"color:red\">-4296</span>   |                  4296 |\n",
      "| Oxford Circus         |   44368 |       40079 | <span style=\"color:red\">-4289</span>   |                  4289 |\n"
     ]
    }
   ],
   "source": [
    "# Group 'data22' by 'station_destination' and calculate the sum of 'flows' and 'prod_exp4'\n",
    "grouped_data = data22.groupby(\"station_destination\").agg({'flows': 'sum', 'prod_exp4': 'sum'})\n",
    "\n",
    "# Sort the grouped data based on the absolute difference between 'flows' and 'prod_exp4'\n",
    "sorted_data = grouped_data.copy()\n",
    "sorted_data['Difference'] = sorted_data['prod_exp4'] - sorted_data['flows']\n",
    "sorted_data['Absolute_Difference'] = abs(sorted_data['Difference'])\n",
    "sorted_data = sorted_data.sort_values(by=\"Absolute_Difference\", ascending=False)\n",
    "\n",
    "# Select the top 10 destinations\n",
    "top_10_destinations = sorted_data.head(10)\n",
    "\n",
    "# Format the data for markdown display\n",
    "rounded_destinations = top_10_destinations.round(0)\n",
    "rounded_destinations['Difference'] = rounded_destinations['Difference'].fillna(0).astype(int)  # Replace NaN with 0 and convert to int\n",
    "\n",
    "# Define a function to apply color formatting\n",
    "def color_difference(val):\n",
    "    color = 'red' if val < 0 else 'green'\n",
    "    return f'<span style=\"color:{color}\">{val}</span>'\n",
    "\n",
    "# Apply color formatting to the 'Difference' column\n",
    "rounded_destinations['Difference'] = rounded_destinations['Difference'].apply(color_difference)\n",
    "\n",
    "# Convert the DataFrame to markdown format\n",
    "markdown_table = rounded_destinations.to_markdown()\n",
    "\n",
    "# Print the markdown table\n",
    "print(markdown_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8a8791c-73c0-4c2d-b926-69cdefb680eb",
   "metadata": {},
   "source": [
    "| Station Destination        | Real Flows | Predictions (Scenario A) | Difference |\n",
    "|:----------------------|--------:|------------:|:---------------------------------------|\n",
    "| Canary Wharf          |   58772 |       29502 | <span style=\"color:red\">-29270</span>  |\n",
    "| Stratford             |   55954 |       67169 | <span style=\"color:green\">11215</span> |\n",
    "| Bank and Monument     |   78549 |       70067 | <span style=\"color:red\">-8482</span>   |\n",
    "| Whitechapel           |   17633 |       24450 | <span style=\"color:green\">6817</span>  |\n",
    "| Hammersmith           |   18250 |       13072 | <span style=\"color:red\">-5178</span>   |\n",
    "| Canada Water          |   20443 |       25348 | <span style=\"color:green\">4905</span>  |\n",
    "| Highbury & Islington  |   25385 |       29987 | <span style=\"color:green\">4602</span>  |\n",
    "| Victoria              |   33251 |       28946 | <span style=\"color:red\">-4305</span>   |\n",
    "| Wimbledon             |    6295 |        1999 | <span style=\"color:red\">-4296</span>   |\n",
    "| Oxford Circus         |   44368 |       40079 | <span style=\"color:red\">-4289</span>   |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "aedc13d8-3108-4a47-87e7-3051fe7c11d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| station_destination   |   flows |   scenarioB1 | Difference                            |   Absolute_Difference |\n",
      "|:----------------------|--------:|-------------:|:--------------------------------------|----------------------:|\n",
      "| Canary Wharf          |   58772 |        47330 | <span style=\"color:red\">-11442</span> |                 11442 |\n",
      "| Bank and Monument     |   78549 |        68103 | <span style=\"color:red\">-10446</span> |                 10446 |\n",
      "| Stratford             |   55954 |        64879 | <span style=\"color:green\">8925</span> |                  8925 |\n",
      "| Whitechapel           |   17633 |        24069 | <span style=\"color:green\">6436</span> |                  6436 |\n",
      "| Hammersmith           |   18250 |        12793 | <span style=\"color:red\">-5457</span>  |                  5457 |\n",
      "| Victoria              |   33251 |        28614 | <span style=\"color:red\">-4637</span>  |                  4637 |\n",
      "| Wimbledon             |    6295 |         1738 | <span style=\"color:red\">-4557</span>  |                  4557 |\n",
      "| Canada Water          |   20443 |        24916 | <span style=\"color:green\">4473</span> |                  4473 |\n",
      "| Oxford Circus         |   44368 |        40019 | <span style=\"color:red\">-4349</span>  |                  4349 |\n",
      "| Highbury & Islington  |   25385 |        29412 | <span style=\"color:green\">4027</span> |                  4027 |\n"
     ]
    }
   ],
   "source": [
    "# SCENARIO B1\n",
    "# Group 'data3' by 'station_destination' and calculate the sum of 'flows' and 'scenarioB1'\n",
    "grouped_data = data3.groupby(\"station_destination\").agg({'flows': 'sum', 'scenarioB1': 'sum'})\n",
    "\n",
    "# Sort the grouped data based on the absolute difference between 'flows' and 'scenarioB1'\n",
    "sorted_data = grouped_data.copy()\n",
    "sorted_data['Difference'] = sorted_data['scenarioB1'] - sorted_data['flows']\n",
    "sorted_data['Absolute_Difference'] = abs(sorted_data['Difference'])\n",
    "sorted_data = sorted_data.sort_values(by=\"Absolute_Difference\", ascending=False)\n",
    "\n",
    "# Select the top 10 destinations\n",
    "top_10_destinations = sorted_data.head(10)\n",
    "\n",
    "# Format the data for markdown display\n",
    "rounded_destinations = top_10_destinations.round(0)\n",
    "rounded_destinations['Difference'] = rounded_destinations['Difference'].fillna(0).astype(int)  # Replace NaN with 0 and convert to int\n",
    "\n",
    "# Define a function to apply color formatting\n",
    "def color_difference(val):\n",
    "    color = 'red' if val < 0 else 'green'\n",
    "    return f'<span style=\"color:{color}\">{val}</span>'\n",
    "\n",
    "# Apply color formatting to the 'Difference' column\n",
    "rounded_destinations['Difference'] = rounded_destinations['Difference'].apply(color_difference)\n",
    "\n",
    "# Convert the DataFrame to markdown format\n",
    "markdown_table = rounded_destinations.to_markdown()\n",
    "\n",
    "# Print the markdown table\n",
    "print(markdown_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36cf55a0-0140-4915-bfa0-147a37e387e4",
   "metadata": {},
   "source": [
    "| Station Destination   | Real Flows | Predictions (+15%) | Difference                            |\n",
    "|:----------------------|--------:|-------------:|:--------------------------------------|\n",
    "| Canary Wharf          |   58772 |        47330 | <span style=\"color:red\">-11442</span> |\n",
    "| Bank and Monument     |   78549 |        68103 | <span style=\"color:red\">-10446</span> |\n",
    "| Stratford             |   55954 |        64879 | <span style=\"color:green\">8925</span> | \n",
    "| Whitechapel           |   17633 |        24069 | <span style=\"color:green\">6436</span> | \n",
    "| Hammersmith           |   18250 |        12793 | <span style=\"color:red\">-5457</span>  | \n",
    "| Victoria              |   33251 |        28614 | <span style=\"color:red\">-4637</span>  |   \n",
    "| Wimbledon             |    6295 |         1738 | <span style=\"color:red\">-4557</span>  |    \n",
    "| Canada Water          |   20443 |        24916 | <span style=\"color:green\">4473</span> |             \n",
    "| Oxford Circus         |   44368 |        40019 | <span style=\"color:red\">-4349</span>  |              \n",
    "| Highbury & Islington  |   25385 |        29412 | <span style=\"color:green\">4027</span> |                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "05c26c97-fe9c-4e20-82a3-645654e2c68f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| station_destination   |   flows |   scenarioB2 | Difference                            |   Absolute_Difference |\n",
      "|:----------------------|--------:|-------------:|:--------------------------------------|----------------------:|\n",
      "| Canary Wharf          |   58772 |        47086 | <span style=\"color:red\">-11686</span> |                 11686 |\n",
      "| Bank and Monument     |   78549 |        67765 | <span style=\"color:red\">-10784</span> |                 10784 |\n",
      "| Stratford             |   55954 |        64366 | <span style=\"color:green\">8412</span> |                  8412 |\n",
      "| Whitechapel           |   17633 |        23925 | <span style=\"color:green\">6292</span> |                  6292 |\n",
      "| Hammersmith           |   18250 |        12682 | <span style=\"color:red\">-5568</span>  |                  5568 |\n",
      "| Victoria              |   33251 |        28481 | <span style=\"color:red\">-4770</span>  |                  4770 |\n",
      "| Wimbledon             |    6295 |         1618 | <span style=\"color:red\">-4677</span>  |                  4677 |\n",
      "| Oxford Circus         |   44368 |        40076 | <span style=\"color:red\">-4292</span>  |                  4292 |\n",
      "| Liverpool Street      |   61122 |        56831 | <span style=\"color:red\">-4291</span>  |                  4291 |\n",
      "| Canada Water          |   20443 |        24712 | <span style=\"color:green\">4269</span> |                  4269 |\n"
     ]
    }
   ],
   "source": [
    "# Group 'data3' by 'station_destination' and calculate the sum of 'flows' and 'scenarioB2'\n",
    "grouped_data = data3.groupby(\"station_destination\").agg({'flows': 'sum', 'scenarioB2': 'sum'})\n",
    "\n",
    "# Sort the grouped data based on the absolute difference between 'flows' and 'scenarioB2'\n",
    "sorted_data = grouped_data.copy()\n",
    "sorted_data['Difference'] = sorted_data['scenarioB2'] - sorted_data['flows']\n",
    "sorted_data['Absolute_Difference'] = abs(sorted_data['Difference'])\n",
    "sorted_data = sorted_data.sort_values(by=\"Absolute_Difference\", ascending=False)\n",
    "\n",
    "# Select the top 10 destinations\n",
    "top_10_destinations = sorted_data.head(10)\n",
    "\n",
    "# Format the data for markdown display\n",
    "rounded_destinations = top_10_destinations.round(0)\n",
    "rounded_destinations['Difference'] = rounded_destinations['Difference'].fillna(0).astype(int)  # Replace NaN with 0 and convert to int\n",
    "\n",
    "# Define a function to apply color formatting\n",
    "def color_difference(val):\n",
    "    color = 'red' if val < 0 else 'green'\n",
    "    return f'<span style=\"color:{color}\">{val}</span>'\n",
    "\n",
    "# Apply color formatting to the 'Difference' column\n",
    "rounded_destinations['Difference'] = rounded_destinations['Difference'].apply(color_difference)\n",
    "\n",
    "# Convert the DataFrame to markdown format\n",
    "markdown_table = rounded_destinations.to_markdown()\n",
    "\n",
    "# Print the markdown table\n",
    "print(markdown_table)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80663212-7ded-4280-969b-5d2a6e2d7542",
   "metadata": {},
   "source": [
    "\n",
    "| Station Destination   |   Real Flows | Predictions (+25%) | Difference                            |\n",
    "|:----------------------|--------:|-------------:|:--------------------------------------|\n",
    "| Canary Wharf          |   58772 |        47086 | <span style=\"color:red\">-11686</span> |                \n",
    "| Bank and Monument     |   78549 |        67765 | <span style=\"color:red\">-10784</span> |                \n",
    "| Stratford             |   55954 |        64366 | <span style=\"color:green\">8412</span> |               \n",
    "| Whitechapel           |   17633 |        23925 | <span style=\"color:green\">6292</span> |             \n",
    "| Hammersmith           |   18250 |        12682 | <span style=\"color:red\">-5568</span>  |                  \n",
    "| Victoria              |   33251 |        28481 | <span style=\"color:red\">-4770</span>  |                  \n",
    "| Wimbledon             |    6295 |         1618 | <span style=\"color:red\">-4677</span>  |              \n",
    "| Oxford Circus         |   44368 |        40076 | <span style=\"color:red\">-4292</span>  |                \n",
    "| Liverpool Street      |   61122 |        56831 | <span style=\"color:red\">-4291</span>  |               \n",
    "| Canada Water          |   20443 |        24712 | <span style=\"color:green\">4269</span> |              "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "c66f19b9-6cd2-4d36-aa26-cdc718f95a00",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1237/1543017203.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data_stats[\"scenarioA\"] = data3[\"prod_exp4\"]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>median</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>scenarioB1</th>\n",
       "      <td>25.097292</td>\n",
       "      <td>84.155804</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>scenarioB2</th>\n",
       "      <td>25.097374</td>\n",
       "      <td>85.970428</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>scenarioA</th>\n",
       "      <td>25.100679</td>\n",
       "      <td>80.380996</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 mean        std  median\n",
       "scenarioB1  25.097292  84.155804     5.0\n",
       "scenarioB2  25.097374  85.970428     5.0\n",
       "scenarioA   25.100679  80.380996     6.0"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Select the columns of interest\n",
    "columns = [\"prod_exp4\", \"scenarioB1\", \"scenarioB2\"]\n",
    "data_stats = data3[columns]\n",
    "data_stats[\"scenarioA\"] = data3[\"prod_exp4\"]\n",
    "data_stats = data_stats.drop(columns = [\"prod_exp4\"])\n",
    "\n",
    "# Get the summary statistics for each column\n",
    "summary_stats = data_stats.describe()\n",
    "\n",
    "# Add the median to the summary statistics\n",
    "summary_stats.loc['median'] = data_stats.median()\n",
    "\n",
    "# Transpose the summary statistics dataframe\n",
    "summary_stats = summary_stats.transpose()\n",
    "\n",
    "summary_stats = summary_stats.drop(columns = [\"25%\",\"50%\",\"75%\",\"count\",\"min\",\"max\"])\n",
    "# Print the resulting pivot table\n",
    "summary_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "64207df8-c83e-4ea4-b01a-cea638c4ae95",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the difference between 'flows' and each scenario\n",
    "data3['Diff_scenarioA'] = data3['flows'] - data3['prod_exp4']\n",
    "data3['Diff_scenarioB1'] = data3['flows'] - data3['scenarioB1']\n",
    "data3['Diff_scenarioB2'] = data3['flows'] - data3['scenarioB2']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "e178cef5-1988-489a-8692-10f141239283",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median difference for Scenario A: -1.0\n",
      "Median difference for Scenario B1: -1.0\n",
      "Median difference for Scenario B2: 0.0\n"
     ]
    }
   ],
   "source": [
    "# Calculate the median difference for each scenario\n",
    "median_diff_scenarioA = data3['Diff_scenarioA'].median()\n",
    "median_diff_scenarioB1 = data3['Diff_scenarioB1'].median()\n",
    "median_diff_scenarioB2 = data3['Diff_scenarioB2'].median()\n",
    "\n",
    "# Print the median differences\n",
    "print(f\"Median difference for Scenario A: {median_diff_scenarioA}\")\n",
    "print(f\"Median difference for Scenario B1: {median_diff_scenarioB1}\")\n",
    "print(f\"Median difference for Scenario B2: {median_diff_scenarioB2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "59eb905f-1f79-4583-a1cc-6e78def42ad3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Filter data for IQR of each column\n",
    "columns = [\"flows\", \"scenarioA\", \"scenarioB1\", \"scenarioB2\"]\n",
    "data_iqr = data3[columns].copy()\n",
    "\n",
    "# Calculate IQR for each column\n",
    "Q1 = data_iqr.quantile(0.25)\n",
    "Q3 = data_iqr.quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# Remove outliers\n",
    "data_iqr = data_iqr[~((data_iqr < (Q1 - 1.5 * IQR)) | (data_iqr > (Q3 + 1.5 * IQR))).any(axis=1)]\n",
    "\n",
    "# Define colors for each histogram\n",
    "colors = [\"grey\", \"red\", \"green\", \"blue\"]\n",
    "\n",
    "# Create a new figure and define subplots\n",
    "fig, axs = plt.subplots(2, 2, figsize=(12, 8), sharey=True)\n",
    "\n",
    "# Reshape the axs array to be 1-dimensional for easier iteration\n",
    "axs = axs.ravel()\n",
    "\n",
    "for i, (ax, col, color) in enumerate(zip(axs, columns, colors)):\n",
    "    sns.histplot(data_iqr, x=col, kde=True, alpha=0.5, color=color, ax=ax)\n",
    "    ax.set_title(col)\n",
    "    ax.set_xlabel(\"Number of Flows\")\n",
    "    if i % 2 == 0:\n",
    "        ax.set_ylabel(\"Density\")\n",
    "\n",
    "plt.suptitle(\"Histograms of Interquartile Range for Flow Estimates\")\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
